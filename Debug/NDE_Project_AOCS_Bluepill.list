
NDE_Project_AOCS_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080093e0  080093e0  0000a3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009610  08009610  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009610  08009610  0000a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009618  08009618  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009618  08009618  0000a618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800961c  0800961c  0000a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009620  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000068  08009688  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08009688  0000b438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012999  00000000  00000000  0000b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4c  00000000  00000000  0001da2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00020578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e52  00000000  00000000  000217a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fee  00000000  00000000  000225fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ed5  00000000  00000000  0003c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009531c  00000000  00000000  000524bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e77d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac8  00000000  00000000  000e781c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ed2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080093c4 	.word	0x080093c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080093c4 	.word	0x080093c4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <init_fan>:
 uint32_t *INC;
 uint32_t *IND;


void init_fan(uint32_t* motor_PWM_INA, uint32_t* motor_PWM_INB, uint32_t* motor_PWM_INC, uint32_t* motor_PWM_IND)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
	INA = motor_PWM_INA;
 80010ee:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <init_fan+0x50>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6013      	str	r3, [r2, #0]
	INB = motor_PWM_INB;
 80010f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <init_fan+0x54>)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	6013      	str	r3, [r2, #0]
	INC = motor_PWM_INC;
 80010fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <init_fan+0x58>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
	IND = motor_PWM_IND;
 8001100:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <init_fan+0x5c>)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	6013      	str	r3, [r2, #0]
	*INA = 0;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <init_fan+0x50>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
	*INB = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <init_fan+0x54>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	*INC = 0;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <init_fan+0x58>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
	*IND = 0;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <init_fan+0x5c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000084 	.word	0x20000084
 8001134:	20000088 	.word	0x20000088
 8001138:	2000008c 	.word	0x2000008c
 800113c:	20000090 	.word	0x20000090

08001140 <set_fan_speed>:

// speed has to be integer from -1000 to 1000
void set_fan_speed(int16_t speed){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed && speed <= 1000){
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0e      	blt.n	8001170 <set_fan_speed+0x30>
 8001152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800115a:	dc09      	bgt.n	8001170 <set_fan_speed+0x30>
		*INB = 0;
 800115c:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <set_fan_speed+0x60>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
		*INA = speed;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <set_fan_speed+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800116c:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed && speed < 0){
		*INA = 0;
		*INB = -1*speed;
	}
}
 800116e:	e012      	b.n	8001196 <set_fan_speed+0x56>
	}else if (-1000 <= speed && speed < 0){
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001178:	db0d      	blt.n	8001196 <set_fan_speed+0x56>
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da09      	bge.n	8001196 <set_fan_speed+0x56>
		*INA = 0;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <set_fan_speed+0x64>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
		*INB = -1*speed;
 800118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118e:	425a      	negs	r2, r3
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <set_fan_speed+0x60>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000088 	.word	0x20000088
 80011a4:	20000084 	.word	0x20000084

080011a8 <set_fan_speed2>:

void set_fan_speed2(int16_t speed2){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed2 && speed2 <= 1000){
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0e      	blt.n	80011d8 <set_fan_speed2+0x30>
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c2:	dc09      	bgt.n	80011d8 <set_fan_speed2+0x30>
		*IND = 0;
 80011c4:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <set_fan_speed2+0x60>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
		*INC = speed2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <set_fan_speed2+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011d4:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed2 && speed2 < 0){
		*INC = 0;
		*IND = -1*speed2;
	}
}
 80011d6:	e012      	b.n	80011fe <set_fan_speed2+0x56>
	}else if (-1000 <= speed2 && speed2 < 0){
 80011d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011dc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80011e0:	db0d      	blt.n	80011fe <set_fan_speed2+0x56>
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da09      	bge.n	80011fe <set_fan_speed2+0x56>
		*INC = 0;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <set_fan_speed2+0x64>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		*IND = -1*speed2;
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	425a      	negs	r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <set_fan_speed2+0x60>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000090 	.word	0x20000090
 800120c:	2000008c 	.word	0x2000008c

08001210 <MPU6050_Init>:

// set i2c timeout
const uint16_t i2c_timeout = 100;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, i2c_timeout);
 8001218:	2364      	movs	r3, #100	@ 0x64
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030f 	add.w	r3, r7, #15
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2275      	movs	r2, #117	@ 0x75
 800122a:	21d0      	movs	r1, #208	@ 0xd0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f003 f8e9 	bl	8004404 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b68      	cmp	r3, #104	@ 0x68
 8001236:	d13d      	bne.n	80012b4 <MPU6050_Init+0xa4>
    {
        // wake sensor up using power management register
        Data = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 800123c:	2364      	movs	r3, #100	@ 0x64
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	2301      	movs	r3, #1
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	f107 030e 	add.w	r3, r7, #14
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	226b      	movs	r2, #107	@ 0x6b
 800124e:	21d0      	movs	r1, #208	@ 0xd0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f002 ffdd 	bl	8004210 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001256:	2307      	movs	r3, #7
 8001258:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, i2c_timeout);
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2301      	movs	r3, #1
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	f107 030e 	add.w	r3, r7, #14
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2219      	movs	r2, #25
 800126c:	21d0      	movs	r1, #208	@ 0xd0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 ffce 	bl	8004210 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register AFS_SEL=0
        Data = 0x00;
 8001274:	2300      	movs	r3, #0
 8001276:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 8001278:	2364      	movs	r3, #100	@ 0x64
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	f107 030e 	add.w	r3, r7, #14
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	221c      	movs	r2, #28
 800128a:	21d0      	movs	r1, #208	@ 0xd0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f002 ffbf 	bl	8004210 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register FS_SEL=0
        Data = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 8001296:	2364      	movs	r3, #100	@ 0x64
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2301      	movs	r3, #1
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	f107 030e 	add.w	r3, r7, #14
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	221b      	movs	r2, #27
 80012a8:	21d0      	movs	r1, #208	@ 0xd0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f002 ffb0 	bl	8004210 <HAL_I2C_Mem_Write>
        return 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e000      	b.n	80012b6 <MPU6050_Init+0xa6>
    }
    return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <MPU6050_Read_MPU>:

void MPU6050_Read_MPU(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b088      	sub	sp, #32
 80012c2:	af04      	add	r7, sp, #16
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_R_GYRO_XOUT, 1, Rec_Data, 6, i2c_timeout);
 80012c8:	2364      	movs	r3, #100	@ 0x64
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2306      	movs	r3, #6
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	2243      	movs	r2, #67	@ 0x43
 80012da:	21d0      	movs	r1, #208	@ 0xd0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f003 f891 	bl	8004404 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7a7b      	ldrb	r3, [r7, #9]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	805a      	strh	r2, [r3, #2]
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	b21b      	sxth	r3, r3
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21a      	sxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	809a      	strh	r2, [r3, #4]

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_R_ACCEL_XOUT, 1, Rec_Data, 6, i2c_timeout);
 800131e:	2364      	movs	r3, #100	@ 0x64
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2306      	movs	r3, #6
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	223b      	movs	r2, #59	@ 0x3b
 8001330:	21d0      	movs	r1, #208	@ 0xd0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f003 f866 	bl	8004404 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001338:	7a3b      	ldrb	r3, [r7, #8]
 800133a:	b21b      	sxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7a7b      	ldrb	r3, [r7, #9]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21a      	sxth	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	839a      	strh	r2, [r3, #28]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800134c:	7abb      	ldrb	r3, [r7, #10]
 800134e:	b21b      	sxth	r3, r3
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21a      	sxth	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	83da      	strh	r2, [r3, #30]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	b21b      	sxth	r3, r3
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21a      	sxth	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	841a      	strh	r2, [r3, #32]


}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0000      	movs	r0, r0
	...

08001380 <Calculate_Accel_Values>:

void Calculate_Accel_Values(MPU6050_t *Raw_Values){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Accel_X = Raw_Values-> Accel_X_RAW*((2*G)/32768); //Values for AFS_SEL = 0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f842 	bl	8000418 <__aeabi_i2d>
 8001394:	a31c      	add	r3, pc, #112	@ (adr r3, 8001408 <Calculate_Accel_Values+0x88>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f8a7 	bl	80004ec <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fb51 	bl	8000a4c <__aeabi_d2f>
 80013aa:	4602      	mov	r2, r0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
	Raw_Values-> Accel_Y = Raw_Values-> Accel_Y_RAW*((2*G)/32768);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f82e 	bl	8000418 <__aeabi_i2d>
 80013bc:	a312      	add	r3, pc, #72	@ (adr r3, 8001408 <Calculate_Accel_Values+0x88>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f893 	bl	80004ec <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb3d 	bl	8000a4c <__aeabi_d2f>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
	Raw_Values-> Accel_Z = Raw_Values-> Accel_Z_RAW*((2*G)/32768);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f81a 	bl	8000418 <__aeabi_i2d>
 80013e4:	a308      	add	r3, pc, #32	@ (adr r3, 8001408 <Calculate_Accel_Values+0x88>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f87f 	bl	80004ec <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb29 	bl	8000a4c <__aeabi_d2f>
 80013fa:	4602      	mov	r2, r0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
};
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	51eb851f 	.word	0x51eb851f
 800140c:	3f439eb8 	.word	0x3f439eb8

08001410 <Calculate_Gyro_Values>:

void Calculate_Gyro_Values(MPU6050_t *Raw_Values){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    //Scale values 
	Raw_Values-> Gyro_X = Raw_Values-> Gyro_X_RAW/131.0; //Values for FS_SEL = 0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fffa 	bl	8000418 <__aeabi_i2d>
 8001424:	a31c      	add	r3, pc, #112	@ (adr r3, 8001498 <Calculate_Gyro_Values+0x88>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f989 	bl	8000740 <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb09 	bl	8000a4c <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
	Raw_Values-> Gyro_Y = Raw_Values-> Gyro_Y_RAW/131.0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffe6 	bl	8000418 <__aeabi_i2d>
 800144c:	a312      	add	r3, pc, #72	@ (adr r3, 8001498 <Calculate_Gyro_Values+0x88>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f975 	bl	8000740 <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff faf5 	bl	8000a4c <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60da      	str	r2, [r3, #12]
	Raw_Values-> Gyro_Z = Raw_Values-> Gyro_Z_RAW/131.0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ffd2 	bl	8000418 <__aeabi_i2d>
 8001474:	a308      	add	r3, pc, #32	@ (adr r3, 8001498 <Calculate_Gyro_Values+0x88>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f961 	bl	8000740 <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fae1 	bl	8000a4c <__aeabi_d2f>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
};
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	00000000 	.word	0x00000000
 800149c:	40606000 	.word	0x40606000

080014a0 <Get_Accel_Angles>:


void Get_Accel_Angles(MPU6050_t *Raw_Values){
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf
    
    // Calculate Pitch using RPY
	float pitch_tmp =  RAD_TO_DEG * asin(Raw_Values->Accel_X / G);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ffc5 	bl	800043c <__aeabi_f2d>
 80014b2:	a33b      	add	r3, pc, #236	@ (adr r3, 80015a0 <Get_Accel_Angles+0x100>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f942 	bl	8000740 <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f007 faec 	bl	8008aa0 <asin>
 80014c8:	a337      	add	r3, pc, #220	@ (adr r3, 80015a8 <Get_Accel_Angles+0x108>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f80d 	bl	80004ec <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fab7 	bl	8000a4c <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	60fb      	str	r3, [r7, #12]
	Raw_Values->Accel_Pitch = Raw_Values->Accel_Pitch * (1 - ACCEL_LPF_ALPHA) + pitch_tmp * ACCEL_LPF_ALPHA;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4932      	ldr	r1, [pc, #200]	@ (80015b0 <Get_Accel_Angles+0x110>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fc0d 	bl	8000d08 <__aeabi_fmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461c      	mov	r4, r3
 80014f2:	4930      	ldr	r1, [pc, #192]	@ (80015b4 <Get_Accel_Angles+0x114>)
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff fc07 	bl	8000d08 <__aeabi_fmul>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff fafa 	bl	8000af8 <__addsf3>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	631a      	str	r2, [r3, #48]	@ 0x30

    // Check for potential division by zero
    if (Raw_Values->Accel_Z != 0) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001510:	f04f 0100 	mov.w	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd8b 	bl	8001030 <__aeabi_fcmpeq>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d134      	bne.n	800158a <Get_Accel_Angles+0xea>
    	float roll_tmp = RAD_TO_DEG * atan(Raw_Values->Accel_Y / Raw_Values->Accel_Z);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f7ff fca0 	bl	8000e70 <__aeabi_fdiv>
 8001530:	4603      	mov	r3, r0
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ff82 	bl	800043c <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f007 fad6 	bl	8008af0 <atan>
 8001544:	a318      	add	r3, pc, #96	@ (adr r3, 80015a8 <Get_Accel_Angles+0x108>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe ffcf 	bl	80004ec <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fa79 	bl	8000a4c <__aeabi_d2f>
 800155a:	4603      	mov	r3, r0
 800155c:	60bb      	str	r3, [r7, #8]
    	Raw_Values->Accel_Roll = Raw_Values->Accel_Roll * (1 - ACCEL_LPF_ALPHA) + roll_tmp * ACCEL_LPF_ALPHA;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001562:	4913      	ldr	r1, [pc, #76]	@ (80015b0 <Get_Accel_Angles+0x110>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fbcf 	bl	8000d08 <__aeabi_fmul>
 800156a:	4603      	mov	r3, r0
 800156c:	461c      	mov	r4, r3
 800156e:	4911      	ldr	r1, [pc, #68]	@ (80015b4 <Get_Accel_Angles+0x114>)
 8001570:	68b8      	ldr	r0, [r7, #8]
 8001572:	f7ff fbc9 	bl	8000d08 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	4619      	mov	r1, r3
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fabc 	bl	8000af8 <__addsf3>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        // Handle division by zero error (if necessary)
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
    }
}
 8001588:	e003      	b.n	8001592 <Get_Accel_Angles+0xf2>
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	51eb851f 	.word	0x51eb851f
 80015a4:	40239eb8 	.word	0x40239eb8
 80015a8:	b851eb85 	.word	0xb851eb85
 80015ac:	404ca51e 	.word	0x404ca51e
 80015b0:	3f666666 	.word	0x3f666666
 80015b4:	3dcccccd 	.word	0x3dcccccd

080015b8 <Get_Gyro_Angles>:



void Get_Gyro_Angles(MPU6050_t *Raw_Values, double Sample_Time){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	e9c7 2300 	strd	r2, r3, [r7]

    //     explanation in /Datasheets/MPU-6050-math.pdf


	float pitch_tmp = Raw_Values->Gyro_Pitch + Raw_Values->Gyro_Y*Sample_Time;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff37 	bl	800043c <__aeabi_f2d>
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff30 	bl	800043c <__aeabi_f2d>
 80015dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e0:	f7fe ff84 	bl	80004ec <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe fdc8 	bl	8000180 <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa28 	bl	8000a4c <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	617b      	str	r3, [r7, #20]
	Raw_Values->Gyro_Pitch = Raw_Values->Gyro_Pitch * (1 - GYRO_LPF_ALPHA) + pitch_tmp * GYRO_LPF_ALPHA;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4924      	ldr	r1, [pc, #144]	@ (8001698 <Get_Gyro_Angles+0xe0>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fb7e 	bl	8000d08 <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	461c      	mov	r4, r3
 8001610:	4922      	ldr	r1, [pc, #136]	@ (800169c <Get_Gyro_Angles+0xe4>)
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff fb78 	bl	8000d08 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	4619      	mov	r1, r3
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff fa6b 	bl	8000af8 <__addsf3>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	615a      	str	r2, [r3, #20]

	float roll_tmp = Raw_Values->Gyro_Roll + Raw_Values->Gyro_X*Sample_Time;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff04 	bl	800043c <__aeabi_f2d>
 8001634:	4604      	mov	r4, r0
 8001636:	460d      	mov	r5, r1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fefd 	bl	800043c <__aeabi_f2d>
 8001642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001646:	f7fe ff51 	bl	80004ec <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fd95 	bl	8000180 <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff f9f5 	bl	8000a4c <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	613b      	str	r3, [r7, #16]
	Raw_Values->Gyro_Roll = Raw_Values->Gyro_Roll * (1 - GYRO_LPF_ALPHA) + roll_tmp * GYRO_LPF_ALPHA;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	490b      	ldr	r1, [pc, #44]	@ (8001698 <Get_Gyro_Angles+0xe0>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb4b 	bl	8000d08 <__aeabi_fmul>
 8001672:	4603      	mov	r3, r0
 8001674:	461c      	mov	r4, r3
 8001676:	4909      	ldr	r1, [pc, #36]	@ (800169c <Get_Gyro_Angles+0xe4>)
 8001678:	6938      	ldr	r0, [r7, #16]
 800167a:	f7ff fb45 	bl	8000d08 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	4619      	mov	r1, r3
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fa38 	bl	8000af8 <__addsf3>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	619a      	str	r2, [r3, #24]

};
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	3d4cccd0 	.word	0x3d4cccd0
 800169c:	3f733333 	.word	0x3f733333

080016a0 <Comp_Filter_Results>:

void Comp_Filter_Results(MPU6050_t *Results){
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf

	float pitch_tmp = Results->Gyro_Pitch * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Pitch;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	491b      	ldr	r1, [pc, #108]	@ (800171c <Comp_Filter_Results+0x7c>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb2a 	bl	8000d08 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461c      	mov	r4, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	4918      	ldr	r1, [pc, #96]	@ (8001720 <Comp_Filter_Results+0x80>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb22 	bl	8000d08 <__aeabi_fmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fa15 	bl	8000af8 <__addsf3>
 80016ce:	4603      	mov	r3, r0
 80016d0:	60fb      	str	r3, [r7, #12]
	Results->Accel_Pitch = pitch_tmp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	631a      	str	r2, [r3, #48]	@ 0x30
	Results->Gyro_Pitch = pitch_tmp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	615a      	str	r2, [r3, #20]

	float roll_tmp = Results->Gyro_Roll * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Roll;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	490e      	ldr	r1, [pc, #56]	@ (800171c <Comp_Filter_Results+0x7c>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb0f 	bl	8000d08 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461c      	mov	r4, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f2:	490b      	ldr	r1, [pc, #44]	@ (8001720 <Comp_Filter_Results+0x80>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fb07 	bl	8000d08 <__aeabi_fmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4619      	mov	r1, r3
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff f9fa 	bl	8000af8 <__addsf3>
 8001704:	4603      	mov	r3, r0
 8001706:	60bb      	str	r3, [r7, #8]
	Results->Accel_Roll = roll_tmp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	635a      	str	r2, [r3, #52]	@ 0x34
	Results->Gyro_Roll = roll_tmp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	619a      	str	r2, [r3, #24]

}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	3dba2e8c 	.word	0x3dba2e8c
 8001720:	3f68ba2e 	.word	0x3f68ba2e

08001724 <findMaxIndex>:
	              *fan_speed2 = 1;
	              break;
	      }
}

int findMaxIndex(uint16_t arr[], uint16_t size) {
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
	uint16_t max = arr[0];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	81fb      	strh	r3, [r7, #14]
	uint16_t max_i = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	81bb      	strh	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 800173a:	2301      	movs	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	e012      	b.n	8001766 <findMaxIndex+0x42>
        if (arr[i] > max) {
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <findMaxIndex+0x3c>
            max = arr[i];
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81fb      	strh	r3, [r7, #14]
            max_i = i;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	81bb      	strh	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3301      	adds	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbe8      	blt.n	8001740 <findMaxIndex+0x1c>
        }
    }
    return max_i;
 800176e:	89bb      	ldrh	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <findMinIndex>:

int findMinIndex(uint16_t arr[], uint16_t size) {
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
	uint16_t min = arr[0];
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	81fb      	strh	r3, [r7, #14]
	uint16_t min_i = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	81bb      	strh	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 8001790:	2301      	movs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	e012      	b.n	80017bc <findMinIndex+0x42>
        if (arr[i] < min) {
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	89fa      	ldrh	r2, [r7, #14]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d907      	bls.n	80017b6 <findMinIndex+0x3c>
            min = arr[i];
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	81fb      	strh	r3, [r7, #14]
            min_i = i;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	81bb      	strh	r3, [r7, #12]
    for (int i = 1; i < size; i++) {
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbe8      	blt.n	8001796 <findMinIndex+0x1c>
        }
    }
    return min_i;
 80017c4:	89bb      	ldrh	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <light_tracking_logic>:

void light_tracking_logic(uint16_t rawValues[4], int16_t *fan_speed1, int16_t *fan_speed2){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	uint16_t max_index = findMaxIndex(rawValues, 4);
 80017dc:	2104      	movs	r1, #4
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ffa0 	bl	8001724 <findMaxIndex>
 80017e4:	4603      	mov	r3, r0
 80017e6:	82fb      	strh	r3, [r7, #22]
	uint16_t min_index = findMinIndex(rawValues, 4);
 80017e8:	2104      	movs	r1, #4
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f7ff ffc5 	bl	800177a <findMinIndex>
 80017f0:	4603      	mov	r3, r0
 80017f2:	82bb      	strh	r3, [r7, #20]
	const uint16_t THRESHOLD_VALUE = 400;
 80017f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80017f8:	827b      	strh	r3, [r7, #18]
	if (rawValues[max_index] - rawValues[min_index] < THRESHOLD_VALUE){
		// if max is not better than min then do nothing
		//return;
	}

	switch (max_index)
 80017fa:	8afb      	ldrh	r3, [r7, #22]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d82d      	bhi.n	800185c <light_tracking_logic+0x8c>
 8001800:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <light_tracking_logic+0x38>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	08001819 	.word	0x08001819
 800180c:	08001827 	.word	0x08001827
 8001810:	08001839 	.word	0x08001839
 8001814:	0800184b 	.word	0x0800184b
	{
		case 0:
			*fan_speed1 = 0;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]
			*fan_speed2 = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	801a      	strh	r2, [r3, #0]
			break; // do nothing, already pointed at maximum
 8001824:	e01a      	b.n	800185c <light_tracking_logic+0x8c>

		case 1:
			*fan_speed1 = 850;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f240 3252 	movw	r2, #850	@ 0x352
 800182c:	801a      	strh	r2, [r3, #0]
			*fan_speed2 = 850;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f240 3252 	movw	r2, #850	@ 0x352
 8001834:	801a      	strh	r2, [r3, #0]
			break; // do nothing, already pointed at maximum
 8001836:	e011      	b.n	800185c <light_tracking_logic+0x8c>

		case 2:
			*fan_speed1 = -850;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f64f 42ae 	movw	r2, #64686	@ 0xfcae
 800183e:	801a      	strh	r2, [r3, #0]
			*fan_speed2 = -850;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f64f 42ae 	movw	r2, #64686	@ 0xfcae
 8001846:	801a      	strh	r2, [r3, #0]
			break; // do nothing, already pointed at maximum
 8001848:	e008      	b.n	800185c <light_tracking_logic+0x8c>

		case 3:
			*fan_speed1 = -850;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f64f 42ae 	movw	r2, #64686	@ 0xfcae
 8001850:	801a      	strh	r2, [r3, #0]
			*fan_speed2 = -850;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f64f 42ae 	movw	r2, #64686	@ 0xfcae
 8001858:	801a      	strh	r2, [r3, #0]
			break; // do nothing, already pointed at maximum
 800185a:	bf00      	nop

	}

}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800186c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001870:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800187c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001880:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001884:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00b      	beq.n	80018a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800188c:	e000      	b.n	8001890 <ITM_SendChar+0x2c>
    {
      __NOP();
 800188e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001890:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f9      	beq.n	800188e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800189a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <control_rotation>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
float fan_speed_1, fan_speed_2 = 0;

void control_rotation(float desired_rotation, float actual_rotation) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	// Prepracovat ako PID kontroler, ak to nebude fungovat
	if (actual_rotation-desired_rotation > 7.5) {
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	6838      	ldr	r0, [r7, #0]
 80018be:	f7ff f919 	bl	8000af4 <__aeabi_fsub>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4934      	ldr	r1, [pc, #208]	@ (8001998 <control_rotation+0xe8>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fbda 	bl	8001080 <__aeabi_fcmpgt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01a      	beq.n	8001908 <control_rotation+0x58>
		fan_speed_1 = -1000;
 80018d2:	4b32      	ldr	r3, [pc, #200]	@ (800199c <control_rotation+0xec>)
 80018d4:	4a32      	ldr	r2, [pc, #200]	@ (80019a0 <control_rotation+0xf0>)
 80018d6:	601a      	str	r2, [r3, #0]
		fan_speed_2 = -1000;
 80018d8:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <control_rotation+0xf4>)
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <control_rotation+0xf0>)
 80018dc:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <control_rotation+0xec>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fbd6 	bl	8001094 <__aeabi_f2iz>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc27 	bl	8001140 <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <control_rotation+0xf4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fbcc 	bl	8001094 <__aeabi_f2iz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fc51 	bl	80011a8 <set_fan_speed2>
		fan_speed_1 = 0;
		fan_speed_2 = 0;
		set_fan_speed(fan_speed_1);
		set_fan_speed2(fan_speed_2);
	}
}
 8001906:	e042      	b.n	800198e <control_rotation+0xde>
	}else if (actual_rotation-desired_rotation < -7.5){
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f7ff f8f2 	bl	8000af4 <__aeabi_fsub>
 8001910:	4603      	mov	r3, r0
 8001912:	4925      	ldr	r1, [pc, #148]	@ (80019a8 <control_rotation+0xf8>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb95 	bl	8001044 <__aeabi_fcmplt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01a      	beq.n	8001956 <control_rotation+0xa6>
		fan_speed_1 = 1000;
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <control_rotation+0xec>)
 8001922:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <control_rotation+0xfc>)
 8001924:	601a      	str	r2, [r3, #0]
		fan_speed_2 = 1000;
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <control_rotation+0xf4>)
 8001928:	4a20      	ldr	r2, [pc, #128]	@ (80019ac <control_rotation+0xfc>)
 800192a:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <control_rotation+0xec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fbaf 	bl	8001094 <__aeabi_f2iz>
 8001936:	4603      	mov	r3, r0
 8001938:	b21b      	sxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fc00 	bl	8001140 <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <control_rotation+0xf4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fba5 	bl	8001094 <__aeabi_f2iz>
 800194a:	4603      	mov	r3, r0
 800194c:	b21b      	sxth	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fc2a 	bl	80011a8 <set_fan_speed2>
}
 8001954:	e01b      	b.n	800198e <control_rotation+0xde>
		fan_speed_1 = 0;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <control_rotation+0xec>)
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
		fan_speed_2 = 0;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <control_rotation+0xf4>)
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <control_rotation+0xec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb92 	bl	8001094 <__aeabi_f2iz>
 8001970:	4603      	mov	r3, r0
 8001972:	b21b      	sxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fbe3 	bl	8001140 <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <control_rotation+0xf4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fb88 	bl	8001094 <__aeabi_f2iz>
 8001984:	4603      	mov	r3, r0
 8001986:	b21b      	sxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc0d 	bl	80011a8 <set_fan_speed2>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40f00000 	.word	0x40f00000
 800199c:	20000234 	.word	0x20000234
 80019a0:	c47a0000 	.word	0xc47a0000
 80019a4:	20000238 	.word	0x20000238
 80019a8:	c0f00000 	.word	0xc0f00000
 80019ac:	447a0000 	.word	0x447a0000

080019b0 <HAL_ADC_ConvCpltCallback>:
uint16_t readValue3;
uint16_t readValue4;
uint16_t readValue5;

uint16_t rawValues[5];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d113      	bne.n	80019ea <HAL_ADC_ConvCpltCallback+0x3a>
        readValue1 = rawValues[0];
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80019c8:	801a      	strh	r2, [r3, #0]
        readValue2 = rawValues[1];
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80019cc:	885a      	ldrh	r2, [r3, #2]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_ADC_ConvCpltCallback+0x50>)
 80019d0:	801a      	strh	r2, [r3, #0]
        readValue3 = rawValues[2];
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80019d4:	889a      	ldrh	r2, [r3, #4]
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_ADC_ConvCpltCallback+0x54>)
 80019d8:	801a      	strh	r2, [r3, #0]
        readValue4 = rawValues[3];
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80019dc:	88da      	ldrh	r2, [r3, #6]
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_ADC_ConvCpltCallback+0x58>)
 80019e0:	801a      	strh	r2, [r3, #0]
        readValue5 = rawValues[4];
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80019e4:	891a      	ldrh	r2, [r3, #8]
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_ADC_ConvCpltCallback+0x5c>)
 80019e8:	801a      	strh	r2, [r3, #0]
    }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40012400 	.word	0x40012400
 80019f8:	20000248 	.word	0x20000248
 80019fc:	2000023c 	.word	0x2000023c
 8001a00:	2000023e 	.word	0x2000023e
 8001a04:	20000240 	.word	0x20000240
 8001a08:	20000242 	.word	0x20000242
 8001a0c:	20000244 	.word	0x20000244

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b0ac      	sub	sp, #176	@ 0xb0
 8001a14:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a16:	f000 ff89 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1a:	f000 f95b 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1e:	f000 fb5f 	bl	80020e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a22:	f000 fb3f 	bl	80020a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a26:	f000 f9a5 	bl	8001d74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a2a:	f000 fa1b 	bl	8001e64 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a2e:	f000 fa95 	bl	8001f5c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a32:	f000 fb0d 	bl	8002050 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a36:	f000 fa43 	bl	8001ec0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 8001a3a:	2264      	movs	r2, #100	@ 0x64
 8001a3c:	4982      	ldr	r1, [pc, #520]	@ (8001c48 <main+0x238>)
 8001a3e:	4883      	ldr	r0, [pc, #524]	@ (8001c4c <main+0x23c>)
 8001a40:	f005 f8e6 	bl	8006c10 <HAL_UARTEx_ReceiveToIdle_IT>

  // Set up HC05 bluetooth controller
  printf("Setting up Bluetooth module\n");
 8001a44:	4882      	ldr	r0, [pc, #520]	@ (8001c50 <main+0x240>)
 8001a46:	f005 ffd3 	bl	80079f0 <puts>

  // reset module to original state
  char at_orgl[] = "AT+ORGL\r\n";
 8001a4a:	4a82      	ldr	r2, [pc, #520]	@ (8001c54 <main+0x244>)
 8001a4c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a52:	c303      	stmia	r3!, {r0, r1}
 8001a54:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)&at_orgl, strlen(at_orgl));
 8001a56:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fb82 	bl	8000164 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4878      	ldr	r0, [pc, #480]	@ (8001c4c <main+0x23c>)
 8001a6c:	f005 f89b 	bl	8006ba6 <HAL_UART_Transmit_IT>

  // set HC06 module name
  char at_set_name[] = "AT+NAME=NDEProjekt\r\n";
 8001a70:	4b79      	ldr	r3, [pc, #484]	@ (8001c58 <main+0x248>)
 8001a72:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001a76:	461d      	mov	r5, r3
 8001a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a80:	6020      	str	r0, [r4, #0]
 8001a82:	3404      	adds	r4, #4
 8001a84:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)&at_set_name, strlen(at_set_name));
 8001a86:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fb6a 	bl	8000164 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	486c      	ldr	r0, [pc, #432]	@ (8001c4c <main+0x23c>)
 8001a9c:	f005 f883 	bl	8006ba6 <HAL_UART_Transmit_IT>

  MPU6050_t MPU6050;

  // Initialize MPU6050 (see library sample code)
  while (MPU6050_Init(&hi2c1) == 1){
 8001aa0:	e002      	b.n	8001aa8 <main+0x98>
	  printf("Unable to Init MPU6050\n");
 8001aa2:	486e      	ldr	r0, [pc, #440]	@ (8001c5c <main+0x24c>)
 8001aa4:	f005 ffa4 	bl	80079f0 <puts>
  while (MPU6050_Init(&hi2c1) == 1){
 8001aa8:	486d      	ldr	r0, [pc, #436]	@ (8001c60 <main+0x250>)
 8001aaa:	f7ff fbb1 	bl	8001210 <MPU6050_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d0f6      	beq.n	8001aa2 <main+0x92>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	486b      	ldr	r0, [pc, #428]	@ (8001c64 <main+0x254>)
 8001ab8:	f004 f93a 	bl	8005d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001abc:	2104      	movs	r1, #4
 8001abe:	4869      	ldr	r0, [pc, #420]	@ (8001c64 <main+0x254>)
 8001ac0:	f004 f936 	bl	8005d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	4867      	ldr	r0, [pc, #412]	@ (8001c64 <main+0x254>)
 8001ac8:	f004 f932 	bl	8005d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001acc:	210c      	movs	r1, #12
 8001ace:	4865      	ldr	r0, [pc, #404]	@ (8001c64 <main+0x254>)
 8001ad0:	f004 f92e 	bl	8005d30 <HAL_TIM_PWM_Start>
  init_fan(&(TIM3->CCR1), &(TIM3->CCR2), &(TIM3->CCR3), &(TIM3->CCR4));
 8001ad4:	4b64      	ldr	r3, [pc, #400]	@ (8001c68 <main+0x258>)
 8001ad6:	4a65      	ldr	r2, [pc, #404]	@ (8001c6c <main+0x25c>)
 8001ad8:	4965      	ldr	r1, [pc, #404]	@ (8001c70 <main+0x260>)
 8001ada:	4866      	ldr	r0, [pc, #408]	@ (8001c74 <main+0x264>)
 8001adc:	f7ff fb00 	bl	80010e0 <init_fan>
  HAL_TIM_Base_Start_IT(&htim2);
 8001ae0:	4865      	ldr	r0, [pc, #404]	@ (8001c78 <main+0x268>)
 8001ae2:	f004 f883 	bl	8005bec <HAL_TIM_Base_Start_IT>

  //ch1_counter_val = 0;//(TIM1 -> ARR);
  //ch2_counter_val = 0;

  // calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001ae6:	4865      	ldr	r0, [pc, #404]	@ (8001c7c <main+0x26c>)
 8001ae8:	f001 fc30 	bl	800334c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f000 ff7f 	bl	80029f0 <HAL_Delay>
  // end of calibration

  fan_speed_1 = 0;
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <main+0x270>)
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
  fan_speed_2 = 0;
 8001afa:	4b62      	ldr	r3, [pc, #392]	@ (8001c84 <main+0x274>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
  while (1)
  {

	 HAL_ADC_Start_DMA(&hadc1, (uint16_t *) rawValues, 5);
 8001b02:	2205      	movs	r2, #5
 8001b04:	4960      	ldr	r1, [pc, #384]	@ (8001c88 <main+0x278>)
 8001b06:	485d      	ldr	r0, [pc, #372]	@ (8001c7c <main+0x26c>)
 8001b08:	f001 f86e 	bl	8002be8 <HAL_ADC_Start_DMA>
	 HAL_Delay(10);
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	f000 ff6f 	bl	80029f0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // MPU6050 reading
	  MPU6050_Read_MPU(&hi2c1, &MPU6050);
 8001b12:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b16:	4619      	mov	r1, r3
 8001b18:	4851      	ldr	r0, [pc, #324]	@ (8001c60 <main+0x250>)
 8001b1a:	f7ff fbd0 	bl	80012be <MPU6050_Read_MPU>
	  Calculate_Accel_Values(&MPU6050);
 8001b1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fc2c 	bl	8001380 <Calculate_Accel_Values>
	  Calculate_Gyro_Values(&MPU6050);
 8001b28:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fc6f 	bl	8001410 <Calculate_Gyro_Values>
	  Get_Accel_Angles(&MPU6050);
 8001b32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fcb2 	bl	80014a0 <Get_Accel_Angles>
	  Get_Gyro_Angles(&MPU6050, 0.01);
 8001b3c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001b40:	a33f      	add	r3, pc, #252	@ (adr r3, 8001c40 <main+0x230>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	4608      	mov	r0, r1
 8001b48:	f7ff fd36 	bl	80015b8 <Get_Gyro_Angles>
	  Comp_Filter_Results(&MPU6050);
 8001b4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fda5 	bl	80016a0 <Comp_Filter_Results>

	  // Writing results
	  GyroX = MPU6050.Gyro_X;
 8001b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b58:	4a4c      	ldr	r2, [pc, #304]	@ (8001c8c <main+0x27c>)
 8001b5a:	6013      	str	r3, [r2, #0]
	  GyroY = MPU6050.Gyro_Y;
 8001b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c90 <main+0x280>)
 8001b60:	6013      	str	r3, [r2, #0]
	  GyroZ = MPU6050.Gyro_Z;
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	4a4b      	ldr	r2, [pc, #300]	@ (8001c94 <main+0x284>)
 8001b66:	6013      	str	r3, [r2, #0]

	  AccelX = MPU6050.Accel_X;
 8001b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c98 <main+0x288>)
 8001b6c:	6013      	str	r3, [r2, #0]
	  AccelY = MPU6050.Accel_Y;
 8001b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b70:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <main+0x28c>)
 8001b72:	6013      	str	r3, [r2, #0]
	  AccelZ = MPU6050.Accel_Z;
 8001b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b76:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca0 <main+0x290>)
 8001b78:	6013      	str	r3, [r2, #0]

	  GyroRoll = MPU6050.Gyro_Roll;
 8001b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ca4 <main+0x294>)
 8001b7e:	6013      	str	r3, [r2, #0]
	  GyroPitch = MPU6050.Gyro_Pitch;
 8001b80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b82:	4a49      	ldr	r2, [pc, #292]	@ (8001ca8 <main+0x298>)
 8001b84:	6013      	str	r3, [r2, #0]
	  AccelRoll = MPU6050.Accel_Roll;
 8001b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b88:	4a48      	ldr	r2, [pc, #288]	@ (8001cac <main+0x29c>)
 8001b8a:	6013      	str	r3, [r2, #0]
	  AccelPitch = MPU6050.Accel_Pitch;
 8001b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b8e:	4a48      	ldr	r2, [pc, #288]	@ (8001cb0 <main+0x2a0>)
 8001b90:	6013      	str	r3, [r2, #0]


	  if (global_mode == 0){
 8001b92:	4b48      	ldr	r3, [pc, #288]	@ (8001cb4 <main+0x2a4>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <main+0x19a>
		  control_rotation(0, GyroX);
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <main+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	f7ff fe84 	bl	80018b0 <control_rotation>
 8001ba8:	e7ab      	b.n	8001b02 <main+0xf2>
	  }else if (global_mode == 1){
 8001baa:	4b42      	ldr	r3, [pc, #264]	@ (8001cb4 <main+0x2a4>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d136      	bne.n	8001c20 <main+0x210>
		  int16_t fan_speed_local1, fan_speed_local2;
		  light_tracking_logic(rawValues, &fan_speed_local1, &fan_speed_local2);
 8001bb2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bb6:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4832      	ldr	r0, [pc, #200]	@ (8001c88 <main+0x278>)
 8001bbe:	f7ff fe07 	bl	80017d0 <light_tracking_logic>
		  set_fan_speed(fan_speed_local1);
 8001bc2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff faba 	bl	8001140 <set_fan_speed>
		  set_fan_speed2(fan_speed_local2);
 8001bcc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fae9 	bl	80011a8 <set_fan_speed2>
		  char msg[64];
		  snprintf(msg, sizeof(msg), "Comparison of ADC values: %d, %d, %d, %d, %d\r\n", readValue1, readValue2, readValue3, readValue4, readValue5);
 8001bd6:	4b38      	ldr	r3, [pc, #224]	@ (8001cb8 <main+0x2a8>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	461d      	mov	r5, r3
 8001bdc:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <main+0x2ac>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <main+0x2b0>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <main+0x2b4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	461c      	mov	r4, r3
 8001bee:	4b36      	ldr	r3, [pc, #216]	@ (8001cc8 <main+0x2b8>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	9303      	str	r3, [sp, #12]
 8001bf6:	9402      	str	r4, [sp, #8]
 8001bf8:	9101      	str	r1, [sp, #4]
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	4a33      	ldr	r2, [pc, #204]	@ (8001ccc <main+0x2bc>)
 8001c00:	2140      	movs	r1, #64	@ 0x40
 8001c02:	f005 fefd 	bl	8007a00 <sniprintf>

		 // Odeslání přes UART
		 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c06:	463b      	mov	r3, r7
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe faab 	bl	8000164 <strlen>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4639      	mov	r1, r7
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <main+0x23c>)
 8001c1a:	f004 ff39 	bl	8006a90 <HAL_UART_Transmit>
 8001c1e:	e770      	b.n	8001b02 <main+0xf2>
	  }else if(global_mode == 2){
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <main+0x2a4>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	f47f af6c 	bne.w	8001b02 <main+0xf2>
		  set_fan_speed(800);
 8001c2a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c2e:	f7ff fa87 	bl	8001140 <set_fan_speed>
		  set_fan_speed2(-800);
 8001c32:	4827      	ldr	r0, [pc, #156]	@ (8001cd0 <main+0x2c0>)
 8001c34:	f7ff fab8 	bl	80011a8 <set_fan_speed2>
	 HAL_ADC_Start_DMA(&hadc1, (uint16_t *) rawValues, 5);
 8001c38:	e763      	b.n	8001b02 <main+0xf2>
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	47ae147b 	.word	0x47ae147b
 8001c44:	3f847ae1 	.word	0x3f847ae1
 8001c48:	2000027c 	.word	0x2000027c
 8001c4c:	200001ec 	.word	0x200001ec
 8001c50:	080093e0 	.word	0x080093e0
 8001c54:	08009444 	.word	0x08009444
 8001c58:	08009450 	.word	0x08009450
 8001c5c:	080093fc 	.word	0x080093fc
 8001c60:	20000108 	.word	0x20000108
 8001c64:	200001a4 	.word	0x200001a4
 8001c68:	40000440 	.word	0x40000440
 8001c6c:	4000043c 	.word	0x4000043c
 8001c70:	40000438 	.word	0x40000438
 8001c74:	40000434 	.word	0x40000434
 8001c78:	2000015c 	.word	0x2000015c
 8001c7c:	20000094 	.word	0x20000094
 8001c80:	20000234 	.word	0x20000234
 8001c84:	20000238 	.word	0x20000238
 8001c88:	20000248 	.word	0x20000248
 8001c8c:	20000254 	.word	0x20000254
 8001c90:	20000258 	.word	0x20000258
 8001c94:	2000025c 	.word	0x2000025c
 8001c98:	20000260 	.word	0x20000260
 8001c9c:	20000264 	.word	0x20000264
 8001ca0:	20000268 	.word	0x20000268
 8001ca4:	2000026c 	.word	0x2000026c
 8001ca8:	20000270 	.word	0x20000270
 8001cac:	20000274 	.word	0x20000274
 8001cb0:	20000278 	.word	0x20000278
 8001cb4:	200002e0 	.word	0x200002e0
 8001cb8:	2000023c 	.word	0x2000023c
 8001cbc:	2000023e 	.word	0x2000023e
 8001cc0:	20000240 	.word	0x20000240
 8001cc4:	20000242 	.word	0x20000242
 8001cc8:	20000244 	.word	0x20000244
 8001ccc:	08009414 	.word	0x08009414
 8001cd0:	fffffce0 	.word	0xfffffce0

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	@ 0x50
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cde:	2228      	movs	r2, #40	@ 0x28
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f005 ff9a 	bl	8007c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 f99b 	bl	8005054 <HAL_RCC_OscConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001d24:	f000 fb36 	bl	8002394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d28:	230f      	movs	r3, #15
 8001d2a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fc08 	bl	8005558 <HAL_RCC_ClockConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001d4e:	f000 fb21 	bl	8002394 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d52:	2302      	movs	r3, #2
 8001d54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fd89 	bl	8005874 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d68:	f000 fb14 	bl	8002394 <Error_Handler>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3750      	adds	r7, #80	@ 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d84:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001d86:	4a36      	ldr	r2, [pc, #216]	@ (8001e60 <MX_ADC1_Init+0xec>)
 8001d88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d92:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001da0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001dae:	2205      	movs	r2, #5
 8001db0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001db2:	482a      	ldr	r0, [pc, #168]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001db4:	f000 fe40 	bl	8002a38 <HAL_ADC_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001dbe:	f000 fae9 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4822      	ldr	r0, [pc, #136]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001dd4:	f001 f8c0 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dde:	f000 fad9 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001df0:	f001 f8b2 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001dfa:	f000 facb 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4814      	ldr	r0, [pc, #80]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001e0c:	f001 f8a4 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001e16:	f000 fabd 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001e28:	f001 f896 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001e32:	f000 faaf 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e36:	2304      	movs	r3, #4
 8001e38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <MX_ADC1_Init+0xe8>)
 8001e44:	f001 f888 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e4e:	f000 faa1 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000094 	.word	0x20000094
 8001e60:	40012400 	.word	0x40012400

08001e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e6a:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <MX_I2C1_Init+0x54>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e70:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <MX_I2C1_Init+0x58>)
 8001e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e8e:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <MX_I2C1_Init+0x50>)
 8001ea2:	f002 f871 	bl	8003f88 <HAL_I2C_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eac:	f000 fa72 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000108 	.word	0x20000108
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	000186a0 	.word	0x000186a0

08001ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001ede:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ee2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001ee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001eea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1001;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001ef4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8001ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f06:	4814      	ldr	r0, [pc, #80]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001f08:	f003 fe20 	bl	8005b4c <HAL_TIM_Base_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f12:	f000 fa3f 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001f24:	f004 f958 	bl	80061d8 <HAL_TIM_ConfigClockSource>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f2e:	f000 fa31 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <MX_TIM2_Init+0x98>)
 8001f40:	f004 fce6 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f4a:	f000 fa23 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000015c 	.word	0x2000015c

08001f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f7e:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f80:	4a32      	ldr	r2, [pc, #200]	@ (800204c <MX_TIM3_Init+0xf0>)
 8001f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f84:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa4:	4828      	ldr	r0, [pc, #160]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fa6:	f003 fe73 	bl	8005c90 <HAL_TIM_PWM_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001fb0:	f000 f9f0 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4821      	ldr	r0, [pc, #132]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fc4:	f004 fca4 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001fce:	f000 f9e1 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	@ 0x60
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4817      	ldr	r0, [pc, #92]	@ (8002048 <MX_TIM3_Init+0xec>)
 8001fea:	f004 f833 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ff4:	f000 f9ce 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4812      	ldr	r0, [pc, #72]	@ (8002048 <MX_TIM3_Init+0xec>)
 8002000:	f004 f828 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800200a:	f000 f9c3 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2208      	movs	r2, #8
 8002012:	4619      	mov	r1, r3
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <MX_TIM3_Init+0xec>)
 8002016:	f004 f81d 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002020:	f000 f9b8 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	220c      	movs	r2, #12
 8002028:	4619      	mov	r1, r3
 800202a:	4807      	ldr	r0, [pc, #28]	@ (8002048 <MX_TIM3_Init+0xec>)
 800202c:	f004 f812 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002036:	f000 f9ad 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800203a:	4803      	ldr	r0, [pc, #12]	@ (8002048 <MX_TIM3_Init+0xec>)
 800203c:	f000 fad2 	bl	80025e4 <HAL_TIM_MspPostInit>

}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	@ 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200001a4 	.word	0x200001a4
 800204c:	40000400 	.word	0x40000400

08002050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <MX_USART1_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 800205c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <MX_USART1_UART_Init+0x4c>)
 8002088:	f004 fcb2 	bl	80069f0 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f000 f97f 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200001ec 	.word	0x200001ec
 80020a0:	40013800 	.word	0x40013800

080020a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <MX_DMA_Init+0x38>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <MX_DMA_Init+0x38>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6153      	str	r3, [r2, #20]
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <MX_DMA_Init+0x38>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	200b      	movs	r0, #11
 80020c8:	f001 facf 	bl	800366a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020cc:	200b      	movs	r0, #11
 80020ce:	f001 fae8 	bl	80036a2 <HAL_NVIC_EnableIRQ>

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000

080020e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <MX_GPIO_Init+0x90>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <MX_GPIO_Init+0x90>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <MX_GPIO_Init+0x90>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <MX_GPIO_Init+0x90>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <MX_GPIO_Init+0x90>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <MX_GPIO_Init+0x90>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <MX_GPIO_Init+0x90>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <MX_GPIO_Init+0x90>)
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <MX_GPIO_Init+0x90>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002142:	480c      	ldr	r0, [pc, #48]	@ (8002174 <MX_GPIO_Init+0x94>)
 8002144:	f001 feee 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 8002148:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800214c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2302      	movs	r3, #2
 8002158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4619      	mov	r1, r3
 8002160:	4804      	ldr	r0, [pc, #16]	@ (8002174 <MX_GPIO_Init+0x94>)
 8002162:	f001 fd5b 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40011000 	.word	0x40011000

08002178 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e009      	b.n	800219e <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	60ba      	str	r2, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fb66 	bl	8001864 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbf1      	blt.n	800218a <_write+0x12>
  }
  return len;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	uint16_t leds[] = {LED_BLUE_Pin, LED_GREEN_Pin, LED_RED_Pin};
 80021b8:	4a28      	ldr	r2, [pc, #160]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021c2:	6018      	str	r0, [r3, #0]
 80021c4:	3304      	adds	r3, #4
 80021c6:	8019      	strh	r1, [r3, #0]
	static uint8_t i = 0;
	if (htim == &htim2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d140      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		if (global_mode == 0){
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d111      	bne.n	80021fc <HAL_TIM_PeriodElapsedCallback+0x4c>
			HAL_GPIO_TogglePin(GPIOC, LED_BLUE_Pin);
 80021d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021dc:	4822      	ldr	r0, [pc, #136]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80021de:	f001 feb9 	bl	8003f54 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021e8:	481f      	ldr	r0, [pc, #124]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80021ea:	f001 fe9b 	bl	8003f24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021f4:	481c      	ldr	r0, [pc, #112]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80021f6:	f001 fe95 	bl	8003f24 <HAL_GPIO_WritePin>
		i++;
		if (i>2){
			i=0;
		}*/
	}
}
 80021fa:	e02a      	b.n	8002252 <HAL_TIM_PeriodElapsedCallback+0xa2>
		}else if (global_mode == 1){
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d111      	bne.n	8002228 <HAL_TIM_PeriodElapsedCallback+0x78>
			HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800220a:	4817      	ldr	r0, [pc, #92]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800220c:	f001 fe8a 	bl	8003f24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002216:	4814      	ldr	r0, [pc, #80]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002218:	f001 fe84 	bl	8003f24 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOC, LED_GREEN_Pin);
 800221c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002220:	4811      	ldr	r0, [pc, #68]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002222:	f001 fe97 	bl	8003f54 <HAL_GPIO_TogglePin>
}
 8002226:	e014      	b.n	8002252 <HAL_TIM_PeriodElapsedCallback+0xa2>
		}else if (global_mode == 2){
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d110      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002236:	480c      	ldr	r0, [pc, #48]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002238:	f001 fe74 	bl	8003f24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002242:	4809      	ldr	r0, [pc, #36]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002244:	f001 fe6e 	bl	8003f24 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOC, LED_RED_Pin);
 8002248:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800224c:	4806      	ldr	r0, [pc, #24]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800224e:	f001 fe81 	bl	8003f54 <HAL_GPIO_TogglePin>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	08009468 	.word	0x08009468
 8002260:	2000015c 	.word	0x2000015c
 8002264:	200002e0 	.word	0x200002e0
 8002268:	40011000 	.word	0x40011000

0800226c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0c4      	sub	sp, #272	@ 0x110
 8002270:	af00      	add	r7, sp, #0
 8002272:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002276:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800227a:	6018      	str	r0, [r3, #0]
 800227c:	460a      	mov	r2, r1
 800227e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002282:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002286:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		printf("Size %d\n", Size);
 8002288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800228c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	4832      	ldr	r0, [pc, #200]	@ (8002360 <HAL_UARTEx_RxEventCallback+0xf4>)
 8002296:	f005 fb43 	bl	8007920 <iprintf>
		printf(RxBuffer);
 800229a:	4832      	ldr	r0, [pc, #200]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 800229c:	f005 fb40 	bl	8007920 <iprintf>
		printf("Received: %s\n", RxBuffer);
 80022a0:	4930      	ldr	r1, [pc, #192]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 80022a2:	4831      	ldr	r0, [pc, #196]	@ (8002368 <HAL_UARTEx_RxEventCallback+0xfc>)
 80022a4:	f005 fb3c 	bl	8007920 <iprintf>

		char reply[256];
		snprintf(reply, sizeof(reply), "UART Received text: %s\r\n", RxBuffer);
 80022a8:	f107 000c 	add.w	r0, r7, #12
 80022ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 80022ae:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <HAL_UARTEx_RxEventCallback+0x100>)
 80022b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022b4:	f005 fba4 	bl	8007a00 <sniprintf>

		HAL_UART_Transmit_IT(&huart1, reply, strlen(reply));
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fd ff51 	bl	8000164 <strlen>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	4828      	ldr	r0, [pc, #160]	@ (8002370 <HAL_UARTEx_RxEventCallback+0x104>)
 80022ce:	f004 fc6a 	bl	8006ba6 <HAL_UART_Transmit_IT>
		char* to_send;
		if (strcmp(RxBuffer, "MODE_S\n") == 0){
 80022d2:	4928      	ldr	r1, [pc, #160]	@ (8002374 <HAL_UARTEx_RxEventCallback+0x108>)
 80022d4:	4823      	ldr	r0, [pc, #140]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 80022d6:	f7fd ff3b 	bl	8000150 <strcmp>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_UARTEx_RxEventCallback+0x82>
			global_mode = 1;
 80022e0:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <HAL_UARTEx_RxEventCallback+0x10c>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	801a      	strh	r2, [r3, #0]
			to_send = "setting mode to light tracking mode\r\n";
 80022e6:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_UARTEx_RxEventCallback+0x110>)
 80022e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80022ec:	e021      	b.n	8002332 <HAL_UARTEx_RxEventCallback+0xc6>
		}else if(strcmp(RxBuffer, "MODE_L\n") == 0){
 80022ee:	4924      	ldr	r1, [pc, #144]	@ (8002380 <HAL_UARTEx_RxEventCallback+0x114>)
 80022f0:	481c      	ldr	r0, [pc, #112]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 80022f2:	f7fd ff2d 	bl	8000150 <strcmp>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_UARTEx_RxEventCallback+0x9e>
			global_mode = 0;
 80022fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_UARTEx_RxEventCallback+0x10c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	801a      	strh	r2, [r3, #0]
			to_send = "setting mode to BASIC mode\r\n";
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_UARTEx_RxEventCallback+0x118>)
 8002304:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002308:	e013      	b.n	8002332 <HAL_UARTEx_RxEventCallback+0xc6>
		}else if(strcmp(RxBuffer, "MODE_R\n") == 0){
 800230a:	491f      	ldr	r1, [pc, #124]	@ (8002388 <HAL_UARTEx_RxEventCallback+0x11c>)
 800230c:	4815      	ldr	r0, [pc, #84]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 800230e:	f7fd ff1f 	bl	8000150 <strcmp>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <HAL_UARTEx_RxEventCallback+0xba>
			global_mode = 2;
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <HAL_UARTEx_RxEventCallback+0x10c>)
 800231a:	2202      	movs	r2, #2
 800231c:	801a      	strh	r2, [r3, #0]
			to_send = "setting mode to ROTATE mode\r\n";
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_UARTEx_RxEventCallback+0x120>)
 8002320:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002324:	e005      	b.n	8002332 <HAL_UARTEx_RxEventCallback+0xc6>
		}else{
			global_mode = 9;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002328:	2209      	movs	r2, #9
 800232a:	801a      	strh	r2, [r3, #0]
			to_send = "Unable to decode command: \r\n";
 800232c:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <HAL_UARTEx_RxEventCallback+0x124>)
 800232e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		}

		HAL_UART_Transmit_IT(&huart1, to_send, strlen(to_send));
 8002332:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002336:	f7fd ff15 	bl	8000164 <strlen>
 800233a:	4603      	mov	r3, r0
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8002344:	480a      	ldr	r0, [pc, #40]	@ (8002370 <HAL_UARTEx_RxEventCallback+0x104>)
 8002346:	f004 fc2e 	bl	8006ba6 <HAL_UART_Transmit_IT>
		//process_command_string(RxBuffer, &global_command, global_args);
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 800234a:	2264      	movs	r2, #100	@ 0x64
 800234c:	4905      	ldr	r1, [pc, #20]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xf8>)
 800234e:	4808      	ldr	r0, [pc, #32]	@ (8002370 <HAL_UARTEx_RxEventCallback+0x104>)
 8002350:	f004 fc5e 	bl	8006c10 <HAL_UARTEx_ReceiveToIdle_IT>
		//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

}
 8002354:	bf00      	nop
 8002356:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	08009470 	.word	0x08009470
 8002364:	2000027c 	.word	0x2000027c
 8002368:	0800947c 	.word	0x0800947c
 800236c:	0800948c 	.word	0x0800948c
 8002370:	200001ec 	.word	0x200001ec
 8002374:	080094a8 	.word	0x080094a8
 8002378:	200002e0 	.word	0x200002e0
 800237c:	080094b0 	.word	0x080094b0
 8002380:	080094d8 	.word	0x080094d8
 8002384:	080094e0 	.word	0x080094e0
 8002388:	08009500 	.word	0x08009500
 800238c:	08009508 	.word	0x08009508
 8002390:	08009528 	.word	0x08009528

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <Error_Handler+0x8>

080023a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_MspInit+0x5c>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <HAL_MspInit+0x5c>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6193      	str	r3, [r2, #24]
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_MspInit+0x5c>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_MspInit+0x5c>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <HAL_MspInit+0x5c>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_MspInit+0x5c>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_MspInit+0x60>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_MspInit+0x60>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000

08002404 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d151      	bne.n	80024c8 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002424:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <HAL_ADC_MspInit+0xd0>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a2a      	ldr	r2, [pc, #168]	@ (80024d4 <HAL_ADC_MspInit+0xd0>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <HAL_ADC_MspInit+0xd0>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <HAL_ADC_MspInit+0xd0>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a24      	ldr	r2, [pc, #144]	@ (80024d4 <HAL_ADC_MspInit+0xd0>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_ADC_MspInit+0xd0>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002454:	231f      	movs	r3, #31
 8002456:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002458:	2303      	movs	r3, #3
 800245a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	481d      	ldr	r0, [pc, #116]	@ (80024d8 <HAL_ADC_MspInit+0xd4>)
 8002464:	f001 fbda 	bl	8003c1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002468:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 800246a:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_ADC_MspInit+0xdc>)
 800246c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800247a:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 800247c:	2280      	movs	r2, #128	@ 0x80
 800247e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 8002482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002486:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 800248a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800248e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 8002492:	2220      	movs	r2, #32
 8002494:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 8002498:	2200      	movs	r2, #0
 800249a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800249c:	480f      	ldr	r0, [pc, #60]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 800249e:	f001 f91b 	bl	80036d8 <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80024a8:	f7ff ff74 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 80024b0:	621a      	str	r2, [r3, #32]
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_ADC_MspInit+0xd8>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2012      	movs	r0, #18
 80024be:	f001 f8d4 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024c2:	2012      	movs	r0, #18
 80024c4:	f001 f8ed 	bl	80036a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012400 	.word	0x40012400
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010800 	.word	0x40010800
 80024dc:	200000c4 	.word	0x200000c4
 80024e0:	40020008 	.word	0x40020008

080024e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a15      	ldr	r2, [pc, #84]	@ (8002554 <HAL_I2C_MspInit+0x70>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d123      	bne.n	800254c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_I2C_MspInit+0x74>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <HAL_I2C_MspInit+0x74>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_I2C_MspInit+0x74>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800251c:	23c0      	movs	r3, #192	@ 0xc0
 800251e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002520:	2312      	movs	r3, #18
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4619      	mov	r1, r3
 800252e:	480b      	ldr	r0, [pc, #44]	@ (800255c <HAL_I2C_MspInit+0x78>)
 8002530:	f001 fb74 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_I2C_MspInit+0x74>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <HAL_I2C_MspInit+0x74>)
 800253a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800253e:	61d3      	str	r3, [r2, #28]
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_I2C_MspInit+0x74>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40005400 	.word	0x40005400
 8002558:	40021000 	.word	0x40021000
 800255c:	40010c00 	.word	0x40010c00

08002560 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002570:	d113      	bne.n	800259a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <HAL_TIM_Base_MspInit+0x44>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <HAL_TIM_Base_MspInit+0x44>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_TIM_Base_MspInit+0x44>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	201c      	movs	r0, #28
 8002590:	f001 f86b 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002594:	201c      	movs	r0, #28
 8002596:	f001 f884 	bl	80036a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <HAL_TIM_PWM_MspInit+0x34>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10b      	bne.n	80025d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_TIM_PWM_MspInit+0x38>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_TIM_PWM_MspInit+0x38>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	61d3      	str	r3, [r2, #28]
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_TIM_PWM_MspInit+0x38>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1b      	ldr	r2, [pc, #108]	@ (800266c <HAL_TIM_MspPostInit+0x88>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d12f      	bne.n	8002664 <HAL_TIM_MspPostInit+0x80>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <HAL_TIM_MspPostInit+0x8c>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a19      	ldr	r2, [pc, #100]	@ (8002670 <HAL_TIM_MspPostInit+0x8c>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <HAL_TIM_MspPostInit+0x8c>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_TIM_MspPostInit+0x8c>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <HAL_TIM_MspPostInit+0x8c>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_TIM_MspPostInit+0x8c>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002634:	23c0      	movs	r3, #192	@ 0xc0
 8002636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2302      	movs	r3, #2
 800263e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	480b      	ldr	r0, [pc, #44]	@ (8002674 <HAL_TIM_MspPostInit+0x90>)
 8002648:	f001 fae8 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800264c:	2303      	movs	r3, #3
 800264e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2302      	movs	r3, #2
 8002656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4619      	mov	r1, r3
 800265e:	4806      	ldr	r0, [pc, #24]	@ (8002678 <HAL_TIM_MspPostInit+0x94>)
 8002660:	f001 fadc 	bl	8003c1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40000400 	.word	0x40000400
 8002670:	40021000 	.word	0x40021000
 8002674:	40010800 	.word	0x40010800
 8002678:	40010c00 	.word	0x40010c00

0800267c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <HAL_UART_MspInit+0x9c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d139      	bne.n	8002710 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_UART_MspInit+0xa0>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	@ (800271c <HAL_UART_MspInit+0xa0>)
 80026a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_UART_MspInit+0xa0>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_UART_MspInit+0xa0>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a18      	ldr	r2, [pc, #96]	@ (800271c <HAL_UART_MspInit+0xa0>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_UART_MspInit+0xa0>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	4619      	mov	r1, r3
 80026e0:	480f      	ldr	r0, [pc, #60]	@ (8002720 <HAL_UART_MspInit+0xa4>)
 80026e2:	f001 fa9b 	bl	8003c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4619      	mov	r1, r3
 80026fa:	4809      	ldr	r0, [pc, #36]	@ (8002720 <HAL_UART_MspInit+0xa4>)
 80026fc:	f001 fa8e 	bl	8003c1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2025      	movs	r0, #37	@ 0x25
 8002706:	f000 ffb0 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800270a:	2025      	movs	r0, #37	@ 0x25
 800270c:	f000 ffc9 	bl	80036a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40013800 	.word	0x40013800
 800271c:	40021000 	.word	0x40021000
 8002720:	40010800 	.word	0x40010800

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002774:	f000 f920 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <DMA1_Channel1_IRQHandler+0x10>)
 8002782:	f001 f917 	bl	80039b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200000c4 	.word	0x200000c4

08002790 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <ADC1_2_IRQHandler+0x10>)
 8002796:	f000 fb05 	bl	8002da4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000094 	.word	0x20000094

080027a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <TIM2_IRQHandler+0x10>)
 80027aa:	f003 fb63 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000015c 	.word	0x2000015c

080027b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <USART1_IRQHandler+0x10>)
 80027be:	f004 fa85 	bl	8006ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200001ec 	.word	0x200001ec

080027cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e00a      	b.n	80027f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027de:	f3af 8000 	nop.w
 80027e2:	4601      	mov	r1, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf0      	blt.n	80027de <_read+0x12>
  }

  return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800282c:	605a      	str	r2, [r3, #4]
  return 0;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <_isatty>:

int _isatty(int file)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002842:	2301      	movs	r3, #1
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
	...

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f005 fa0e 	bl	8007cb8 <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20005000 	.word	0x20005000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	200002e4 	.word	0x200002e4
 80028d0:	20000438 	.word	0x20000438

080028d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e0:	f7ff fff8 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e4:	480b      	ldr	r0, [pc, #44]	@ (8002914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e6:	490c      	ldr	r1, [pc, #48]	@ (8002918 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028fc:	4c09      	ldr	r4, [pc, #36]	@ (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f005 f9db 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7ff f87f 	bl	8001a10 <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800291c:	08009620 	.word	0x08009620
  ldr r2, =_sbss
 8002920:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002924:	20000438 	.word	0x20000438

08002928 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <CAN1_RX1_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <HAL_Init+0x28>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	@ (8002954 <HAL_Init+0x28>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 fe89 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	200f      	movs	r0, #15
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7ff fd2a 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fea1 	bl	80036be <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f000 fe69 	bl	800366a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	@ (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000008 	.word	0x20000008
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_IncTick+0x1c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_IncTick+0x20>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <HAL_IncTick+0x20>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000008 	.word	0x20000008
 80029d8:	200002e8 	.word	0x200002e8

080029dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <HAL_GetTick+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	200002e8 	.word	0x200002e8

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff fff0 	bl	80029dc <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffe0 	bl	80029dc <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000008 	.word	0x20000008

08002a38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0be      	b.n	8002bd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fcc4 	bl	8002404 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fbbd 	bl	80031fc <ADC_ConversionStop_Disable>
 8002a82:	4603      	mov	r3, r0
 8002a84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 8099 	bne.w	8002bc6 <HAL_ADC_Init+0x18e>
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 8095 	bne.w	8002bc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aa4:	f023 0302 	bic.w	r3, r3, #2
 8002aa8:	f043 0202 	orr.w	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7b1b      	ldrb	r3, [r3, #12]
 8002abe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ac0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad0:	d003      	beq.n	8002ada <HAL_ADC_Init+0xa2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_ADC_Init+0xa8>
 8002ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ade:	e000      	b.n	8002ae2 <HAL_ADC_Init+0xaa>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7d1b      	ldrb	r3, [r3, #20]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d119      	bne.n	8002b24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7b1b      	ldrb	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	035a      	lsls	r2, r3, #13
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	e00b      	b.n	8002b24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_ADC_Init+0x1a8>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b54:	d003      	beq.n	8002b5e <HAL_ADC_Init+0x126>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d104      	bne.n	8002b68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	051b      	lsls	r3, r3, #20
 8002b66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <HAL_ADC_Init+0x1ac>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ba2:	e018      	b.n	8002bd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	f023 0312 	bic.w	r3, r3, #18
 8002bac:	f043 0210 	orr.w	r2, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	f043 0210 	orr.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	ffe1f7fd 	.word	0xffe1f7fd
 8002be4:	ff1f0efe 	.word	0xff1f0efe

08002be8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a64      	ldr	r2, [pc, #400]	@ (8002d90 <HAL_ADC_Start_DMA+0x1a8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_Start_DMA+0x24>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a63      	ldr	r2, [pc, #396]	@ (8002d94 <HAL_ADC_Start_DMA+0x1ac>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_Start_DMA+0x32>
 8002c0c:	4b60      	ldr	r3, [pc, #384]	@ (8002d90 <HAL_ADC_Start_DMA+0x1a8>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 80b3 	bne.w	8002d80 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_Start_DMA+0x40>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0ae      	b.n	8002d86 <HAL_ADC_Start_DMA+0x19e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fa89 	bl	8003148 <ADC_Enable>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 809a 	bne.w	8002d76 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002d94 <HAL_ADC_Start_DMA+0x1ac>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d105      	bne.n	8002c6c <HAL_ADC_Start_DMA+0x84>
 8002c60:	4b4b      	ldr	r3, [pc, #300]	@ (8002d90 <HAL_ADC_Start_DMA+0x1a8>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d115      	bne.n	8002c98 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d026      	beq.n	8002cd4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c96:	e01d      	b.n	8002cd4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a39      	ldr	r2, [pc, #228]	@ (8002d90 <HAL_ADC_Start_DMA+0x1a8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0xd0>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a38      	ldr	r2, [pc, #224]	@ (8002d94 <HAL_ADC_Start_DMA+0x1ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_ADC_Start_DMA+0xec>
 8002cb8:	4b35      	ldr	r3, [pc, #212]	@ (8002d90 <HAL_ADC_Start_DMA+0x1a8>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ccc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	f023 0206 	bic.w	r2, r3, #6
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cec:	e002      	b.n	8002cf4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <HAL_ADC_Start_DMA+0x1b0>)
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a24      	ldr	r2, [pc, #144]	@ (8002d9c <HAL_ADC_Start_DMA+0x1b4>)
 8002d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <HAL_ADC_Start_DMA+0x1b8>)
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0202 	mvn.w	r2, #2
 8002d1c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d2c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a18      	ldr	r0, [r3, #32]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	334c      	adds	r3, #76	@ 0x4c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f000 fd25 	bl	800378c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d4c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d50:	d108      	bne.n	8002d64 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002d60:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d62:	e00f      	b.n	8002d84 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d72:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d74:	e006      	b.n	8002d84 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002d7e:	e001      	b.n	8002d84 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40012400 	.word	0x40012400
 8002d94:	40012800 	.word	0x40012800
 8002d98:	0800327f 	.word	0x0800327f
 8002d9c:	080032fb 	.word	0x080032fb
 8002da0:	08003317 	.word	0x08003317

08002da4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03e      	beq.n	8002e44 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d039      	beq.n	8002e44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002df2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002df6:	d11d      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d119      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0220 	bic.w	r2, r2, #32
 8002e0e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fe fdbb 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0212 	mvn.w	r2, #18
 8002e42:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04d      	beq.n	8002eea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d048      	beq.n	8002eea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d105      	bne.n	8002e70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002e7a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002e7e:	d012      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d125      	bne.n	8002eda <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e98:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e9c:	d11d      	bne.n	8002eda <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d119      	bne.n	8002eda <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eb4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fae4 	bl	80034a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 020c 	mvn.w	r2, #12
 8002ee8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f812 	bl	8002f34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0201 	mvn.w	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x20>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0dc      	b.n	8003132 <HAL_ADC_ConfigChannel+0x1da>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d81c      	bhi.n	8002fc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b05      	subs	r3, #5
 8002f9a:	221f      	movs	r2, #31
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4019      	ands	r1, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b05      	subs	r3, #5
 8002fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fc0:	e03c      	b.n	800303c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d81c      	bhi.n	8003004 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b23      	subs	r3, #35	@ 0x23
 8002fdc:	221f      	movs	r2, #31
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	4019      	ands	r1, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b23      	subs	r3, #35	@ 0x23
 8002ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
 8003002:	e01b      	b.n	800303c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b41      	subs	r3, #65	@ 0x41
 8003016:	221f      	movs	r2, #31
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	4019      	ands	r1, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b41      	subs	r3, #65	@ 0x41
 8003030:	fa00 f203 	lsl.w	r2, r0, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b09      	cmp	r3, #9
 8003042:	d91c      	bls.n	800307e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68d9      	ldr	r1, [r3, #12]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	3b1e      	subs	r3, #30
 8003056:	2207      	movs	r2, #7
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6898      	ldr	r0, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	3b1e      	subs	r3, #30
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]
 800307c:	e019      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6919      	ldr	r1, [r3, #16]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	2207      	movs	r2, #7
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	4019      	ands	r1, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6898      	ldr	r0, [r3, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	fa00 f203 	lsl.w	r2, r0, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d003      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030be:	2b11      	cmp	r3, #17
 80030c0:	d132      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <HAL_ADC_ConfigChannel+0x1e4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d125      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d126      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80030e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d11a      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <HAL_ADC_ConfigChannel+0x1e8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a13      	ldr	r2, [pc, #76]	@ (8003144 <HAL_ADC_ConfigChannel+0x1ec>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	0c9a      	lsrs	r2, r3, #18
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003108:	e002      	b.n	8003110 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3b01      	subs	r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f9      	bne.n	800310a <HAL_ADC_ConfigChannel+0x1b2>
 8003116:	e007      	b.n	8003128 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012400 	.word	0x40012400
 8003140:	20000000 	.word	0x20000000
 8003144:	431bde83 	.word	0x431bde83

08003148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d040      	beq.n	80031e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003176:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <ADC_Enable+0xac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1f      	ldr	r2, [pc, #124]	@ (80031f8 <ADC_Enable+0xb0>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003184:	e002      	b.n	800318c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003192:	f7ff fc23 	bl	80029dc <HAL_GetTick>
 8003196:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003198:	e01f      	b.n	80031da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800319a:	f7ff fc1f 	bl	80029dc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d918      	bls.n	80031da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d011      	beq.n	80031da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e007      	b.n	80031ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d1d8      	bne.n	800319a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000
 80031f8:	431bde83 	.word	0x431bde83

080031fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d12e      	bne.n	8003274 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003226:	f7ff fbd9 	bl	80029dc <HAL_GetTick>
 800322a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800322c:	e01b      	b.n	8003266 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800322e:	f7ff fbd5 	bl	80029dc <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d914      	bls.n	8003266 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10d      	bne.n	8003266 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e007      	b.n	8003276 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d0dc      	beq.n	800322e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003294:	2b00      	cmp	r3, #0
 8003296:	d127      	bne.n	80032e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80032ae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80032b2:	d115      	bne.n	80032e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d111      	bne.n	80032e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7fe fb65 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80032e6:	e004      	b.n	80032f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff fe0a 	bl	8002f22 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f043 0204 	orr.w	r2, r3, #4
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fe02 	bl	8002f46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADCEx_Calibration_Start+0x1e>
 8003366:	2302      	movs	r3, #2
 8003368:	e097      	b.n	800349a <HAL_ADCEx_Calibration_Start+0x14e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff42 	bl	80031fc <ADC_ConversionStop_Disable>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fee3 	bl	8003148 <ADC_Enable>
 8003382:	4603      	mov	r3, r0
 8003384:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f040 8081 	bne.w	8003490 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003396:	f023 0302 	bic.w	r3, r3, #2
 800339a:	f043 0202 	orr.w	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033a2:	4b40      	ldr	r3, [pc, #256]	@ (80034a4 <HAL_ADCEx_Calibration_Start+0x158>)
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	2002      	movs	r0, #2
 80033a8:	f002 fb1a 	bl	80059e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80033ac:	4603      	mov	r3, r0
 80033ae:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80033b2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80033b4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80033b6:	e002      	b.n	80033be <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80033d4:	f7ff fb02 	bl	80029dc <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033da:	e01b      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033dc:	f7ff fafe 	bl	80029dc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b0a      	cmp	r3, #10
 80033e8:	d914      	bls.n	8003414 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	f023 0312 	bic.w	r3, r3, #18
 8003400:	f043 0210 	orr.w	r2, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e042      	b.n	800349a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1dc      	bne.n	80033dc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0204 	orr.w	r2, r2, #4
 8003430:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003432:	f7ff fad3 	bl	80029dc <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003438:	e01b      	b.n	8003472 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800343a:	f7ff facf 	bl	80029dc <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b0a      	cmp	r3, #10
 8003446:	d914      	bls.n	8003472 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	f023 0312 	bic.w	r3, r3, #18
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e013      	b.n	800349a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1dc      	bne.n	800343a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
}
 800349a:	4618      	mov	r0, r3
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
	...

080034bc <__NVIC_SetPriorityGrouping>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4906      	ldr	r1, [pc, #24]	@ (8003554 <__NVIC_EnableIRQ+0x34>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	@ (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <SysTick_Config>:
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003620:	d301      	bcc.n	8003626 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003622:	2301      	movs	r3, #1
 8003624:	e00f      	b.n	8003646 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003626:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <SysTick_Config+0x40>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362e:	210f      	movs	r1, #15
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f7ff ff90 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <SysTick_Config+0x40>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363e:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <SysTick_Config+0x40>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000e010 	.word	0xe000e010

08003654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff2d 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800367c:	f7ff ff42 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7ff ff90 	bl	80035ac <NVIC_EncodePriority>
 800368c:	4602      	mov	r2, r0
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff5f 	bl	8003558 <__NVIC_SetPriority>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff35 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ffa2 	bl	8003610 <SysTick_Config>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e043      	b.n	8003776 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <HAL_DMA_Init+0xa8>)
 80036f6:	4413      	add	r3, r2
 80036f8:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <HAL_DMA_Init+0xac>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	009a      	lsls	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <HAL_DMA_Init+0xb0>)
 800370a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003722:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003726:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003730:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	bffdfff8 	.word	0xbffdfff8
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	40020000 	.word	0x40020000

0800378c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Start_IT+0x20>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e04b      	b.n	8003844 <HAL_DMA_Start_IT+0xb8>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d13a      	bne.n	8003836 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f9eb 	bl	8003bc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 020e 	orr.w	r2, r2, #14
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e00f      	b.n	8003824 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 020a 	orr.w	r2, r2, #10
 8003822:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e005      	b.n	8003842 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e020      	b.n	80038b8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 020e 	bic.w	r2, r2, #14
 8003884:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d005      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e051      	b.n	800398c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Abort_IT+0xd4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d029      	beq.n	8003966 <HAL_DMA_Abort_IT+0xa2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <HAL_DMA_Abort_IT+0xd8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_Abort_IT+0x9e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_DMA_Abort_IT+0xdc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01a      	beq.n	800395c <HAL_DMA_Abort_IT+0x98>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <HAL_DMA_Abort_IT+0xe0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d012      	beq.n	8003956 <HAL_DMA_Abort_IT+0x92>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_DMA_Abort_IT+0xe4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x8c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_DMA_Abort_IT+0xe8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d102      	bne.n	800394a <HAL_DMA_Abort_IT+0x86>
 8003944:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003948:	e00e      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 800394a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800394e:	e00b      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003954:	e008      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800395a:	e005      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 800395c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003960:	e002      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003962:	2310      	movs	r3, #16
 8003964:	e000      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003966:	2301      	movs	r3, #1
 8003968:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <HAL_DMA_Abort_IT+0xec>)
 800396a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    } 
  }
  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40020008 	.word	0x40020008
 800399c:	4002001c 	.word	0x4002001c
 80039a0:	40020030 	.word	0x40020030
 80039a4:	40020044 	.word	0x40020044
 80039a8:	40020058 	.word	0x40020058
 80039ac:	4002006c 	.word	0x4002006c
 80039b0:	40020000 	.word	0x40020000

080039b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	2204      	movs	r2, #4
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d04f      	beq.n	8003a7c <HAL_DMA_IRQHandler+0xc8>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d04a      	beq.n	8003a7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a66      	ldr	r2, [pc, #408]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d029      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xae>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a65      	ldr	r2, [pc, #404]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1f4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xaa>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a63      	ldr	r2, [pc, #396]	@ (8003bac <HAL_DMA_IRQHandler+0x1f8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0xa4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a62      	ldr	r2, [pc, #392]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d012      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x9e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a60      	ldr	r2, [pc, #384]	@ (8003bb4 <HAL_DMA_IRQHandler+0x200>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00a      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x98>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb8 <HAL_DMA_IRQHandler+0x204>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d102      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x92>
 8003a40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a44:	e00e      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a4a:	e00b      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a50:	e008      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a56:	e005      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a5c:	e002      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a5e:	2340      	movs	r3, #64	@ 0x40
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a62:	2304      	movs	r3, #4
 8003a64:	4a55      	ldr	r2, [pc, #340]	@ (8003bbc <HAL_DMA_IRQHandler+0x208>)
 8003a66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8094 	beq.w	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a7a:	e08e      	b.n	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2202      	movs	r2, #2
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d056      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x186>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d051      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020a 	bic.w	r2, r2, #10
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a38      	ldr	r2, [pc, #224]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d029      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x166>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x162>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <HAL_DMA_IRQHandler+0x1f8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x15c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a34      	ldr	r2, [pc, #208]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1fc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d012      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x156>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	@ (8003bb4 <HAL_DMA_IRQHandler+0x200>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x150>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a31      	ldr	r2, [pc, #196]	@ (8003bb8 <HAL_DMA_IRQHandler+0x204>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <HAL_DMA_IRQHandler+0x14a>
 8003af8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003afc:	e00e      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b02:	e00b      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b08:	e008      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b0e:	e005      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b14:	e002      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b16:	2320      	movs	r3, #32
 8003b18:	e000      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	4a27      	ldr	r2, [pc, #156]	@ (8003bbc <HAL_DMA_IRQHandler+0x208>)
 8003b1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d034      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b38:	e02f      	b.n	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2208      	movs	r2, #8
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d028      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1e8>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d023      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020e 	bic.w	r2, r2, #14
 8003b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
    }
  }
  return;
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
}
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40020008 	.word	0x40020008
 8003ba8:	4002001c 	.word	0x4002001c
 8003bac:	40020030 	.word	0x40020030
 8003bb0:	40020044 	.word	0x40020044
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	4002006c 	.word	0x4002006c
 8003bbc:	40020000 	.word	0x40020000

08003bc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d108      	bne.n	8003c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bfe:	e007      	b.n	8003c10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b08b      	sub	sp, #44	@ 0x2c
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c2e:	e169      	b.n	8003f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c30:	2201      	movs	r2, #1
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	f040 8158 	bne.w	8003efe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a9a      	ldr	r2, [pc, #616]	@ (8003ebc <HAL_GPIO_Init+0x2a0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d05e      	beq.n	8003d16 <HAL_GPIO_Init+0xfa>
 8003c58:	4a98      	ldr	r2, [pc, #608]	@ (8003ebc <HAL_GPIO_Init+0x2a0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d875      	bhi.n	8003d4a <HAL_GPIO_Init+0x12e>
 8003c5e:	4a98      	ldr	r2, [pc, #608]	@ (8003ec0 <HAL_GPIO_Init+0x2a4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d058      	beq.n	8003d16 <HAL_GPIO_Init+0xfa>
 8003c64:	4a96      	ldr	r2, [pc, #600]	@ (8003ec0 <HAL_GPIO_Init+0x2a4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d86f      	bhi.n	8003d4a <HAL_GPIO_Init+0x12e>
 8003c6a:	4a96      	ldr	r2, [pc, #600]	@ (8003ec4 <HAL_GPIO_Init+0x2a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d052      	beq.n	8003d16 <HAL_GPIO_Init+0xfa>
 8003c70:	4a94      	ldr	r2, [pc, #592]	@ (8003ec4 <HAL_GPIO_Init+0x2a8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d869      	bhi.n	8003d4a <HAL_GPIO_Init+0x12e>
 8003c76:	4a94      	ldr	r2, [pc, #592]	@ (8003ec8 <HAL_GPIO_Init+0x2ac>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04c      	beq.n	8003d16 <HAL_GPIO_Init+0xfa>
 8003c7c:	4a92      	ldr	r2, [pc, #584]	@ (8003ec8 <HAL_GPIO_Init+0x2ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d863      	bhi.n	8003d4a <HAL_GPIO_Init+0x12e>
 8003c82:	4a92      	ldr	r2, [pc, #584]	@ (8003ecc <HAL_GPIO_Init+0x2b0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d046      	beq.n	8003d16 <HAL_GPIO_Init+0xfa>
 8003c88:	4a90      	ldr	r2, [pc, #576]	@ (8003ecc <HAL_GPIO_Init+0x2b0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d85d      	bhi.n	8003d4a <HAL_GPIO_Init+0x12e>
 8003c8e:	2b12      	cmp	r3, #18
 8003c90:	d82a      	bhi.n	8003ce8 <HAL_GPIO_Init+0xcc>
 8003c92:	2b12      	cmp	r3, #18
 8003c94:	d859      	bhi.n	8003d4a <HAL_GPIO_Init+0x12e>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <HAL_GPIO_Init+0x80>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003d17 	.word	0x08003d17
 8003ca0:	08003cf1 	.word	0x08003cf1
 8003ca4:	08003d03 	.word	0x08003d03
 8003ca8:	08003d45 	.word	0x08003d45
 8003cac:	08003d4b 	.word	0x08003d4b
 8003cb0:	08003d4b 	.word	0x08003d4b
 8003cb4:	08003d4b 	.word	0x08003d4b
 8003cb8:	08003d4b 	.word	0x08003d4b
 8003cbc:	08003d4b 	.word	0x08003d4b
 8003cc0:	08003d4b 	.word	0x08003d4b
 8003cc4:	08003d4b 	.word	0x08003d4b
 8003cc8:	08003d4b 	.word	0x08003d4b
 8003ccc:	08003d4b 	.word	0x08003d4b
 8003cd0:	08003d4b 	.word	0x08003d4b
 8003cd4:	08003d4b 	.word	0x08003d4b
 8003cd8:	08003d4b 	.word	0x08003d4b
 8003cdc:	08003d4b 	.word	0x08003d4b
 8003ce0:	08003cf9 	.word	0x08003cf9
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	4a79      	ldr	r2, [pc, #484]	@ (8003ed0 <HAL_GPIO_Init+0x2b4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cee:	e02c      	b.n	8003d4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	623b      	str	r3, [r7, #32]
          break;
 8003cf6:	e029      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	623b      	str	r3, [r7, #32]
          break;
 8003d00:	e024      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	3308      	adds	r3, #8
 8003d08:	623b      	str	r3, [r7, #32]
          break;
 8003d0a:	e01f      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	330c      	adds	r3, #12
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	e01a      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d1e:	2304      	movs	r3, #4
 8003d20:	623b      	str	r3, [r7, #32]
          break;
 8003d22:	e013      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	611a      	str	r2, [r3, #16]
          break;
 8003d36:	e009      	b.n	8003d4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d38:	2308      	movs	r3, #8
 8003d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	615a      	str	r2, [r3, #20]
          break;
 8003d42:	e003      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d44:	2300      	movs	r3, #0
 8003d46:	623b      	str	r3, [r7, #32]
          break;
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x130>
          break;
 8003d4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2bff      	cmp	r3, #255	@ 0xff
 8003d50:	d801      	bhi.n	8003d56 <HAL_GPIO_Init+0x13a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	e001      	b.n	8003d5a <HAL_GPIO_Init+0x13e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2bff      	cmp	r3, #255	@ 0xff
 8003d60:	d802      	bhi.n	8003d68 <HAL_GPIO_Init+0x14c>
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	e002      	b.n	8003d6e <HAL_GPIO_Init+0x152>
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	3b08      	subs	r3, #8
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	210f      	movs	r1, #15
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	401a      	ands	r2, r3
 8003d80:	6a39      	ldr	r1, [r7, #32]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80b1 	beq.w	8003efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ed4 <HAL_GPIO_Init+0x2b8>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4a4c      	ldr	r2, [pc, #304]	@ (8003ed4 <HAL_GPIO_Init+0x2b8>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6193      	str	r3, [r2, #24]
 8003da8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <HAL_GPIO_Init+0x2b8>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003db4:	4a48      	ldr	r2, [pc, #288]	@ (8003ed8 <HAL_GPIO_Init+0x2bc>)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	3302      	adds	r3, #2
 8003dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	220f      	movs	r2, #15
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a40      	ldr	r2, [pc, #256]	@ (8003edc <HAL_GPIO_Init+0x2c0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_GPIO_Init+0x1ec>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee0 <HAL_GPIO_Init+0x2c4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00d      	beq.n	8003e04 <HAL_GPIO_Init+0x1e8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ee4 <HAL_GPIO_Init+0x2c8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_Init+0x1e4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ee8 <HAL_GPIO_Init+0x2cc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_GPIO_Init+0x1e0>
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <HAL_GPIO_Init+0x1ee>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e004      	b.n	8003e0a <HAL_GPIO_Init+0x1ee>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e002      	b.n	8003e0a <HAL_GPIO_Init+0x1ee>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_GPIO_Init+0x1ee>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0c:	f002 0203 	and.w	r2, r2, #3
 8003e10:	0092      	lsls	r2, r2, #2
 8003e12:	4093      	lsls	r3, r2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e1a:	492f      	ldr	r1, [pc, #188]	@ (8003ed8 <HAL_GPIO_Init+0x2bc>)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e34:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	492c      	ldr	r1, [pc, #176]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
 8003e40:	e006      	b.n	8003e50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e42:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	4928      	ldr	r1, [pc, #160]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d006      	beq.n	8003e6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e5c:	4b23      	ldr	r3, [pc, #140]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	4922      	ldr	r1, [pc, #136]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60cb      	str	r3, [r1, #12]
 8003e68:	e006      	b.n	8003e78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	491e      	ldr	r1, [pc, #120]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4918      	ldr	r1, [pc, #96]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e92:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	4914      	ldr	r1, [pc, #80]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d021      	beq.n	8003ef0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eac:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	490e      	ldr	r1, [pc, #56]	@ (8003eec <HAL_GPIO_Init+0x2d0>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e021      	b.n	8003efe <HAL_GPIO_Init+0x2e2>
 8003eba:	bf00      	nop
 8003ebc:	10320000 	.word	0x10320000
 8003ec0:	10310000 	.word	0x10310000
 8003ec4:	10220000 	.word	0x10220000
 8003ec8:	10210000 	.word	0x10210000
 8003ecc:	10120000 	.word	0x10120000
 8003ed0:	10110000 	.word	0x10110000
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40010800 	.word	0x40010800
 8003ee0:	40010c00 	.word	0x40010c00
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	40011400 	.word	0x40011400
 8003eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	4909      	ldr	r1, [pc, #36]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	3301      	adds	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f47f ae8e 	bne.w	8003c30 <HAL_GPIO_Init+0x14>
  }
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	372c      	adds	r7, #44	@ 0x2c
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40010400 	.word	0x40010400

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	611a      	str	r2, [r3, #16]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43d9      	mvns	r1, r3
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	400b      	ands	r3, r1
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e12b      	b.n	80041f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe fa98 	bl	80024e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fec:	f001 fbfc 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 8003ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4a81      	ldr	r2, [pc, #516]	@ (80041fc <HAL_I2C_Init+0x274>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d807      	bhi.n	800400c <HAL_I2C_Init+0x84>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a80      	ldr	r2, [pc, #512]	@ (8004200 <HAL_I2C_Init+0x278>)
 8004000:	4293      	cmp	r3, r2
 8004002:	bf94      	ite	ls
 8004004:	2301      	movls	r3, #1
 8004006:	2300      	movhi	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e006      	b.n	800401a <HAL_I2C_Init+0x92>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a7d      	ldr	r2, [pc, #500]	@ (8004204 <HAL_I2C_Init+0x27c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	bf94      	ite	ls
 8004014:	2301      	movls	r3, #1
 8004016:	2300      	movhi	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0e7      	b.n	80041f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a78      	ldr	r2, [pc, #480]	@ (8004208 <HAL_I2C_Init+0x280>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0c9b      	lsrs	r3, r3, #18
 800402c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a6a      	ldr	r2, [pc, #424]	@ (80041fc <HAL_I2C_Init+0x274>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d802      	bhi.n	800405c <HAL_I2C_Init+0xd4>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3301      	adds	r3, #1
 800405a:	e009      	b.n	8004070 <HAL_I2C_Init+0xe8>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	4a69      	ldr	r2, [pc, #420]	@ (800420c <HAL_I2C_Init+0x284>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	3301      	adds	r3, #1
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	430b      	orrs	r3, r1
 8004076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	495c      	ldr	r1, [pc, #368]	@ (80041fc <HAL_I2C_Init+0x274>)
 800408c:	428b      	cmp	r3, r1
 800408e:	d819      	bhi.n	80040c4 <HAL_I2C_Init+0x13c>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1e59      	subs	r1, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	fbb1 f3f3 	udiv	r3, r1, r3
 800409e:	1c59      	adds	r1, r3, #1
 80040a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040a4:	400b      	ands	r3, r1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_I2C_Init+0x138>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1e59      	subs	r1, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	e051      	b.n	8004164 <HAL_I2C_Init+0x1dc>
 80040c0:	2304      	movs	r3, #4
 80040c2:	e04f      	b.n	8004164 <HAL_I2C_Init+0x1dc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d111      	bne.n	80040f0 <HAL_I2C_Init+0x168>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1e58      	subs	r0, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	440b      	add	r3, r1
 80040da:	fbb0 f3f3 	udiv	r3, r0, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e012      	b.n	8004116 <HAL_I2C_Init+0x18e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e58      	subs	r0, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	0099      	lsls	r1, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	fbb0 f3f3 	udiv	r3, r0, r3
 8004106:	3301      	adds	r3, #1
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Init+0x196>
 800411a:	2301      	movs	r3, #1
 800411c:	e022      	b.n	8004164 <HAL_I2C_Init+0x1dc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10e      	bne.n	8004144 <HAL_I2C_Init+0x1bc>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1e58      	subs	r0, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	440b      	add	r3, r1
 8004134:	fbb0 f3f3 	udiv	r3, r0, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004142:	e00f      	b.n	8004164 <HAL_I2C_Init+0x1dc>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	0099      	lsls	r1, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	fbb0 f3f3 	udiv	r3, r0, r3
 800415a:	3301      	adds	r3, #1
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	6809      	ldr	r1, [r1, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6911      	ldr	r1, [r2, #16]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68d2      	ldr	r2, [r2, #12]
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	000186a0 	.word	0x000186a0
 8004200:	001e847f 	.word	0x001e847f
 8004204:	003d08ff 	.word	0x003d08ff
 8004208:	431bde83 	.word	0x431bde83
 800420c:	10624dd3 	.word	0x10624dd3

08004210 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4603      	mov	r3, r0
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	460b      	mov	r3, r1
 8004224:	813b      	strh	r3, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422a:	f7fe fbd7 	bl	80029dc <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	f040 80d9 	bne.w	80043f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2319      	movs	r3, #25
 8004244:	2201      	movs	r2, #1
 8004246:	496d      	ldr	r1, [pc, #436]	@ (80043fc <HAL_I2C_Mem_Write+0x1ec>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fccd 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	e0cc      	b.n	80043f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_I2C_Mem_Write+0x56>
 8004262:	2302      	movs	r3, #2
 8004264:	e0c5      	b.n	80043f2 <HAL_I2C_Mem_Write+0x1e2>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d007      	beq.n	800428c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2221      	movs	r2, #33	@ 0x21
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a4d      	ldr	r2, [pc, #308]	@ (8004400 <HAL_I2C_Mem_Write+0x1f0>)
 80042cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ce:	88f8      	ldrh	r0, [r7, #6]
 80042d0:	893a      	ldrh	r2, [r7, #8]
 80042d2:	8979      	ldrh	r1, [r7, #10]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4603      	mov	r3, r0
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fb04 	bl	80048ec <I2C_RequestMemoryWrite>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d052      	beq.n	8004390 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e081      	b.n	80043f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fd92 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	2b04      	cmp	r3, #4
 8004304:	d107      	bne.n	8004316 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004314:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06b      	b.n	80043f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b04      	cmp	r3, #4
 8004356:	d11b      	bne.n	8004390 <HAL_I2C_Mem_Write+0x180>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d017      	beq.n	8004390 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1aa      	bne.n	80042ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fd85 	bl	8004eac <I2C_WaitOnBTFFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d107      	bne.n	80043c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e016      	b.n	80043f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	00100002 	.word	0x00100002
 8004400:	ffff0000 	.word	0xffff0000

08004404 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	@ 0x30
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	4603      	mov	r3, r0
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	460b      	mov	r3, r1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004422:	f7fe fadb 	bl	80029dc <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	f040 8250 	bne.w	80048d6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2319      	movs	r3, #25
 800443c:	2201      	movs	r2, #1
 800443e:	4982      	ldr	r1, [pc, #520]	@ (8004648 <HAL_I2C_Mem_Read+0x244>)
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fbd1 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
 800444e:	e243      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_I2C_Mem_Read+0x5a>
 800445a:	2302      	movs	r3, #2
 800445c:	e23c      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	@ 0x22
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2240      	movs	r2, #64	@ 0x40
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a62      	ldr	r2, [pc, #392]	@ (800464c <HAL_I2C_Mem_Read+0x248>)
 80044c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c6:	88f8      	ldrh	r0, [r7, #6]
 80044c8:	893a      	ldrh	r2, [r7, #8]
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	4603      	mov	r3, r0
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa9e 	bl	8004a18 <I2C_RequestMemoryRead>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1f8      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	61fb      	str	r3, [r7, #28]
 8004502:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e1cc      	b.n	80048b0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d11e      	bne.n	800455c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800452e:	b672      	cpsid	i
}
 8004530:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004556:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004558:	b662      	cpsie	i
}
 800455a:	e035      	b.n	80045c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	d11e      	bne.n	80045a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004572:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004574:	b672      	cpsid	i
}
 8004576:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800459e:	b662      	cpsie	i
}
 80045a0:	e012      	b.n	80045c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045c8:	e172      	b.n	80048b0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	f200 811f 	bhi.w	8004812 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d123      	bne.n	8004624 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fcab 	bl	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e173      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004622:	e145      	b.n	80048b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004628:	2b02      	cmp	r3, #2
 800462a:	d152      	bne.n	80046d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004632:	2200      	movs	r2, #0
 8004634:	4906      	ldr	r1, [pc, #24]	@ (8004650 <HAL_I2C_Mem_Read+0x24c>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fad6 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e148      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
 8004646:	bf00      	nop
 8004648:	00100002 	.word	0x00100002
 800464c:	ffff0000 	.word	0xffff0000
 8004650:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004654:	b672      	cpsid	i
}
 8004656:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800469a:	b662      	cpsie	i
}
 800469c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046d0:	e0ee      	b.n	80048b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	2200      	movs	r2, #0
 80046da:	4981      	ldr	r1, [pc, #516]	@ (80048e0 <HAL_I2C_Mem_Read+0x4dc>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fa83 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0f5      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046fc:	b672      	cpsid	i
}
 80046fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004732:	4b6c      	ldr	r3, [pc, #432]	@ (80048e4 <HAL_I2C_Mem_Read+0x4e0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	4a6b      	ldr	r2, [pc, #428]	@ (80048e8 <HAL_I2C_Mem_Read+0x4e4>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0a1a      	lsrs	r2, r3, #8
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	3b01      	subs	r3, #1
 8004750:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d118      	bne.n	800478a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800477a:	b662      	cpsie	i
}
 800477c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0a6      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d1d9      	bne.n	800474c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047da:	b662      	cpsie	i
}
 80047dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004810:	e04e      	b.n	80048b0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004814:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fb90 	bl	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e058      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d124      	bne.n	80048b0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f ae88 	bne.w	80045ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
  }
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	00010004 	.word	0x00010004
 80048e4:	20000000 	.word	0x20000000
 80048e8:	14f8b589 	.word	0x14f8b589

080048ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	817b      	strh	r3, [r7, #10]
 80048fe:	460b      	mov	r3, r1
 8004900:	813b      	strh	r3, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2200      	movs	r2, #0
 800491e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f960 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493c:	d103      	bne.n	8004946 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004944:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e05f      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	492d      	ldr	r1, [pc, #180]	@ (8004a14 <I2C_RequestMemoryWrite+0x128>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f9bb 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04c      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004988:	6a39      	ldr	r1, [r7, #32]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa46 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	2b04      	cmp	r3, #4
 800499c:	d107      	bne.n	80049ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e02b      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	611a      	str	r2, [r3, #16]
 80049c2:	e021      	b.n	8004a08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049c4:	893b      	ldrh	r3, [r7, #8]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fa20 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d107      	bne.n	80049fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e005      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049fe:	893b      	ldrh	r3, [r7, #8]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	00010002 	.word	0x00010002

08004a18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8c2 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a78:	d103      	bne.n	8004a82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e0aa      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	4952      	ldr	r1, [pc, #328]	@ (8004be4 <I2C_RequestMemoryRead+0x1cc>)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f91d 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e097      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	6a39      	ldr	r1, [r7, #32]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f9a8 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d107      	bne.n	8004aea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e076      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	611a      	str	r2, [r3, #16]
 8004afe:	e021      	b.n	8004b44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b00:	893b      	ldrh	r3, [r7, #8]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f982 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d107      	bne.n	8004b36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e050      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b3a:	893b      	ldrh	r3, [r7, #8]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	6a39      	ldr	r1, [r7, #32]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f967 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e035      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f82b 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba6:	d103      	bne.n	8004bb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e013      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bb4:	897b      	ldrh	r3, [r7, #10]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	4906      	ldr	r1, [pc, #24]	@ (8004be4 <I2C_RequestMemoryRead+0x1cc>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f886 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	00010002 	.word	0x00010002

08004be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf8:	e048      	b.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d044      	beq.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fd feeb 	bl	80029dc <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d139      	bne.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10d      	bne.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	e00c      	b.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d116      	bne.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e023      	b.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10d      	bne.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	e00c      	b.n	8004ccc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d093      	beq.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cea:	e071      	b.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfa:	d123      	bne.n	8004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	f043 0204 	orr.w	r2, r3, #4
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e067      	b.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d041      	beq.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	f7fd fe46 	bl	80029dc <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d136      	bne.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d10c      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	43da      	mvns	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	e00b      	b.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	43da      	mvns	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e021      	b.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d10c      	bne.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e00b      	b.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	43da      	mvns	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f47f af6d 	bne.w	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e28:	e034      	b.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f8e3 	bl	8004ff6 <I2C_IsAcknowledgeFailed>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d028      	beq.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fd fdcb 	bl	80029dc <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11d      	bne.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	d016      	beq.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	f043 0220 	orr.w	r2, r3, #32
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e007      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ea0:	d1c3      	bne.n	8004e2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eb8:	e034      	b.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f89b 	bl	8004ff6 <I2C_IsAcknowledgeFailed>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d028      	beq.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fd fd83 	bl	80029dc <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11d      	bne.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d016      	beq.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e007      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d1c3      	bne.n	8004eba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f48:	e049      	b.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d119      	bne.n	8004f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e030      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7fd fd26 	bl	80029dc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11d      	bne.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d016      	beq.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e007      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d1ae      	bne.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d11b      	bne.n	8005046 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005016:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
	...

08005054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e272      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8087 	beq.w	8005182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005074:	4b92      	ldr	r3, [pc, #584]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b04      	cmp	r3, #4
 800507e:	d00c      	beq.n	800509a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005080:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d112      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5e>
 800508c:	4b8c      	ldr	r3, [pc, #560]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d10b      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509a:	4b89      	ldr	r3, [pc, #548]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d06c      	beq.n	8005180 <HAL_RCC_OscConfig+0x12c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d168      	bne.n	8005180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e24c      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x76>
 80050bc:	4b80      	ldr	r3, [pc, #512]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7f      	ldr	r2, [pc, #508]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e02e      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b7b      	ldr	r3, [pc, #492]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7a      	ldr	r2, [pc, #488]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b78      	ldr	r3, [pc, #480]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a77      	ldr	r2, [pc, #476]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0xbc>
 80050f6:	4b72      	ldr	r3, [pc, #456]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a71      	ldr	r2, [pc, #452]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b6f      	ldr	r3, [pc, #444]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6e      	ldr	r2, [pc, #440]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 8005110:	4b6b      	ldr	r3, [pc, #428]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6a      	ldr	r2, [pc, #424]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b68      	ldr	r3, [pc, #416]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a67      	ldr	r2, [pc, #412]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fd fc54 	bl	80029dc <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fd fc50 	bl	80029dc <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e200      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b5d      	ldr	r3, [pc, #372]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xe4>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd fc40 	bl	80029dc <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fd fc3c 	bl	80029dc <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	@ 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1ec      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b53      	ldr	r3, [pc, #332]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x10c>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518e:	4b4c      	ldr	r3, [pc, #304]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800519a:	4b49      	ldr	r3, [pc, #292]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x18c>
 80051a6:	4b46      	ldr	r3, [pc, #280]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b43      	ldr	r3, [pc, #268]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x176>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e1c0      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b3d      	ldr	r3, [pc, #244]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4939      	ldr	r1, [pc, #228]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <HAL_RCC_OscConfig+0x270>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7fd fbf5 	bl	80029dc <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fd fbf1 	bl	80029dc <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1a1      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b2d      	ldr	r3, [pc, #180]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b2a      	ldr	r3, [pc, #168]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4927      	ldr	r1, [pc, #156]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <HAL_RCC_OscConfig+0x270>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fd fbd4 	bl	80029dc <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005238:	f7fd fbd0 	bl	80029dc <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e180      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b1d      	ldr	r3, [pc, #116]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03a      	beq.n	80052d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <HAL_RCC_OscConfig+0x274>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005270:	f7fd fbb4 	bl	80029dc <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fd fbb0 	bl	80029dc <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e160      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005296:	2001      	movs	r0, #1
 8005298:	f000 face 	bl	8005838 <RCC_Delay>
 800529c:	e01c      	b.n	80052d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529e:	4b0a      	ldr	r3, [pc, #40]	@ (80052c8 <HAL_RCC_OscConfig+0x274>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a4:	f7fd fb9a 	bl	80029dc <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052aa:	e00f      	b.n	80052cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ac:	f7fd fb96 	bl	80029dc <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d908      	bls.n	80052cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e146      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	42420000 	.word	0x42420000
 80052c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	4b92      	ldr	r3, [pc, #584]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e9      	bne.n	80052ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a6 	beq.w	8005432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b88      	ldr	r3, [pc, #544]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4a87      	ldr	r2, [pc, #540]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005300:	61d3      	str	r3, [r2, #28]
 8005302:	4b85      	ldr	r3, [pc, #532]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005312:	4b82      	ldr	r3, [pc, #520]	@ (800551c <HAL_RCC_OscConfig+0x4c8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d118      	bne.n	8005350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531e:	4b7f      	ldr	r3, [pc, #508]	@ (800551c <HAL_RCC_OscConfig+0x4c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7e      	ldr	r2, [pc, #504]	@ (800551c <HAL_RCC_OscConfig+0x4c8>)
 8005324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532a:	f7fd fb57 	bl	80029dc <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fd fb53 	bl	80029dc <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b64      	cmp	r3, #100	@ 0x64
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e103      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	4b75      	ldr	r3, [pc, #468]	@ (800551c <HAL_RCC_OscConfig+0x4c8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <HAL_RCC_OscConfig+0x312>
 8005358:	4b6f      	ldr	r3, [pc, #444]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4a6e      	ldr	r2, [pc, #440]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6213      	str	r3, [r2, #32]
 8005364:	e02d      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x334>
 800536e:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4a69      	ldr	r2, [pc, #420]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	6213      	str	r3, [r2, #32]
 800537a:	4b67      	ldr	r3, [pc, #412]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4a66      	ldr	r2, [pc, #408]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6213      	str	r3, [r2, #32]
 8005386:	e01c      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b05      	cmp	r3, #5
 800538e:	d10c      	bne.n	80053aa <HAL_RCC_OscConfig+0x356>
 8005390:	4b61      	ldr	r3, [pc, #388]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4a60      	ldr	r2, [pc, #384]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005396:	f043 0304 	orr.w	r3, r3, #4
 800539a:	6213      	str	r3, [r2, #32]
 800539c:	4b5e      	ldr	r3, [pc, #376]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6213      	str	r3, [r2, #32]
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 80053aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4a5a      	ldr	r2, [pc, #360]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	6213      	str	r3, [r2, #32]
 80053b6:	4b58      	ldr	r3, [pc, #352]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4a57      	ldr	r2, [pc, #348]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d015      	beq.n	80053f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ca:	f7fd fb07 	bl	80029dc <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fd fb03 	bl	80029dc <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0b1      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ee      	beq.n	80053d2 <HAL_RCC_OscConfig+0x37e>
 80053f4:	e014      	b.n	8005420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fd faf1 	bl	80029dc <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd faed 	bl	80029dc <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e09b      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005414:	4b40      	ldr	r3, [pc, #256]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ee      	bne.n	80053fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4b3c      	ldr	r3, [pc, #240]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4a3b      	ldr	r2, [pc, #236]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005430:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8087 	beq.w	800554a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800543c:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d061      	beq.n	800550c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d146      	bne.n	80054de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005450:	4b33      	ldr	r3, [pc, #204]	@ (8005520 <HAL_RCC_OscConfig+0x4cc>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fd fac1 	bl	80029dc <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545e:	f7fd fabd 	bl	80029dc <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e06d      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005470:	4b29      	ldr	r3, [pc, #164]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005484:	d108      	bne.n	8005498 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005486:	4b24      	ldr	r3, [pc, #144]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4921      	ldr	r1, [pc, #132]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005498:	4b1f      	ldr	r3, [pc, #124]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a19      	ldr	r1, [r3, #32]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	430b      	orrs	r3, r1
 80054aa:	491b      	ldr	r1, [pc, #108]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <HAL_RCC_OscConfig+0x4cc>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7fd fa91 	bl	80029dc <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054be:	f7fd fa8d 	bl	80029dc <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e03d      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x46a>
 80054dc:	e035      	b.n	800554a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b10      	ldr	r3, [pc, #64]	@ (8005520 <HAL_RCC_OscConfig+0x4cc>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fd fa7a 	bl	80029dc <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fd fa76 	bl	80029dc <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e026      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_RCC_OscConfig+0x4c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x498>
 800550a:	e01e      	b.n	800554a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e019      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
 8005518:	40021000 	.word	0x40021000
 800551c:	40007000 	.word	0x40007000
 8005520:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005524:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <HAL_RCC_OscConfig+0x500>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	429a      	cmp	r2, r3
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d001      	beq.n	800554a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40021000 	.word	0x40021000

08005558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0d0      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800556c:	4b6a      	ldr	r3, [pc, #424]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d910      	bls.n	800559c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b67      	ldr	r3, [pc, #412]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 0207 	bic.w	r2, r3, #7
 8005582:	4965      	ldr	r1, [pc, #404]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b63      	ldr	r3, [pc, #396]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0b8      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d020      	beq.n	80055ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b4:	4b59      	ldr	r3, [pc, #356]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a58      	ldr	r2, [pc, #352]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80055ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055cc:	4b53      	ldr	r3, [pc, #332]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a52      	ldr	r2, [pc, #328]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80055d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d8:	4b50      	ldr	r3, [pc, #320]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	494d      	ldr	r1, [pc, #308]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d040      	beq.n	8005678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d107      	bne.n	800560e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	4b47      	ldr	r3, [pc, #284]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d115      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e07f      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d107      	bne.n	8005626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005616:	4b41      	ldr	r3, [pc, #260]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e073      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	4b3d      	ldr	r3, [pc, #244]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06b      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005636:	4b39      	ldr	r3, [pc, #228]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4936      	ldr	r1, [pc, #216]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	4313      	orrs	r3, r2
 8005646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005648:	f7fd f9c8 	bl	80029dc <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fd f9c4 	bl	80029dc <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e053      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 020c 	and.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	429a      	cmp	r2, r3
 8005676:	d1eb      	bne.n	8005650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005678:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d210      	bcs.n	80056a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 0207 	bic.w	r2, r3, #7
 800568e:	4922      	ldr	r1, [pc, #136]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005696:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e032      	b.n	800570e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b4:	4b19      	ldr	r3, [pc, #100]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4916      	ldr	r1, [pc, #88]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056d2:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	490e      	ldr	r1, [pc, #56]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056e6:	f000 f821 	bl	800572c <HAL_RCC_GetSysClockFreq>
 80056ea:	4602      	mov	r2, r0
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	490a      	ldr	r1, [pc, #40]	@ (8005720 <HAL_RCC_ClockConfig+0x1c8>)
 80056f8:	5ccb      	ldrb	r3, [r1, r3]
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	4a09      	ldr	r2, [pc, #36]	@ (8005724 <HAL_RCC_ClockConfig+0x1cc>)
 8005700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005702:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <HAL_RCC_ClockConfig+0x1d0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fd f926 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40022000 	.word	0x40022000
 800571c:	40021000 	.word	0x40021000
 8005720:	08009548 	.word	0x08009548
 8005724:	20000000 	.word	0x20000000
 8005728:	20000004 	.word	0x20000004

0800572c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005746:	4b1e      	ldr	r3, [pc, #120]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b04      	cmp	r3, #4
 8005754:	d002      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x30>
 8005756:	2b08      	cmp	r3, #8
 8005758:	d003      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x36>
 800575a:	e027      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800575c:	4b19      	ldr	r3, [pc, #100]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800575e:	613b      	str	r3, [r7, #16]
      break;
 8005760:	e027      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	0c9b      	lsrs	r3, r3, #18
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	4a17      	ldr	r2, [pc, #92]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800576c:	5cd3      	ldrb	r3, [r2, r3]
 800576e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d010      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800577a:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	0c5b      	lsrs	r3, r3, #17
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	4a11      	ldr	r2, [pc, #68]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005786:	5cd3      	ldrb	r3, [r2, r3]
 8005788:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a0d      	ldr	r2, [pc, #52]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800578e:	fb03 f202 	mul.w	r2, r3, r2
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e004      	b.n	80057a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a0c      	ldr	r2, [pc, #48]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	613b      	str	r3, [r7, #16]
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80057ae:	613b      	str	r3, [r7, #16]
      break;
 80057b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b2:	693b      	ldr	r3, [r7, #16]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	007a1200 	.word	0x007a1200
 80057c8:	08009560 	.word	0x08009560
 80057cc:	08009570 	.word	0x08009570
 80057d0:	003d0900 	.word	0x003d0900

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d8:	4b02      	ldr	r3, [pc, #8]	@ (80057e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	20000000 	.word	0x20000000

080057e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057ec:	f7ff fff2 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4903      	ldr	r1, [pc, #12]	@ (800580c <HAL_RCC_GetPCLK1Freq+0x24>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40021000 	.word	0x40021000
 800580c:	08009558 	.word	0x08009558

08005810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005814:	f7ff ffde 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	0adb      	lsrs	r3, r3, #11
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4903      	ldr	r1, [pc, #12]	@ (8005834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000
 8005834:	08009558 	.word	0x08009558

08005838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005840:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <RCC_Delay+0x34>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a0a      	ldr	r2, [pc, #40]	@ (8005870 <RCC_Delay+0x38>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	0a5b      	lsrs	r3, r3, #9
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005854:	bf00      	nop
  }
  while (Delay --);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	60fa      	str	r2, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f9      	bne.n	8005854 <RCC_Delay+0x1c>
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr
 800586c:	20000000 	.word	0x20000000
 8005870:	10624dd3 	.word	0x10624dd3

08005874 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d07d      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005894:	4b4f      	ldr	r3, [pc, #316]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	4b4c      	ldr	r3, [pc, #304]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	4a4b      	ldr	r2, [pc, #300]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	61d3      	str	r3, [r2, #28]
 80058ac:	4b49      	ldr	r3, [pc, #292]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b46      	ldr	r3, [pc, #280]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d118      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c8:	4b43      	ldr	r3, [pc, #268]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a42      	ldr	r2, [pc, #264]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d4:	f7fd f882 	bl	80029dc <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058da:	e008      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058dc:	f7fd f87e 	bl	80029dc <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b64      	cmp	r3, #100	@ 0x64
 80058e8:	d901      	bls.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e06d      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058fa:	4b36      	ldr	r3, [pc, #216]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005902:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d02e      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d027      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005918:	4b2e      	ldr	r3, [pc, #184]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005920:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005922:	4b2e      	ldr	r3, [pc, #184]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005924:	2201      	movs	r2, #1
 8005926:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005928:	4b2c      	ldr	r3, [pc, #176]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800592e:	4a29      	ldr	r2, [pc, #164]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d014      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fd f84d 	bl	80029dc <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	e00a      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005946:	f7fd f849 	bl	80029dc <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005954:	4293      	cmp	r3, r2
 8005956:	d901      	bls.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e036      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595c:	4b1d      	ldr	r3, [pc, #116]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ee      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005968:	4b1a      	ldr	r3, [pc, #104]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4917      	ldr	r1, [pc, #92]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005976:	4313      	orrs	r3, r2
 8005978:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d105      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005980:	4b14      	ldr	r3, [pc, #80]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	4a13      	ldr	r2, [pc, #76]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800598a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005998:	4b0e      	ldr	r3, [pc, #56]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	490b      	ldr	r1, [pc, #44]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b6:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	4904      	ldr	r1, [pc, #16]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40007000 	.word	0x40007000
 80059dc:	42420440 	.word	0x42420440

080059e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	f200 808a 	bhi.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d045      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d075      	beq.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a16:	e082      	b.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005a18:	4b46      	ldr	r3, [pc, #280]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a1e:	4b45      	ldr	r3, [pc, #276]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d07b      	beq.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	0c9b      	lsrs	r3, r3, #18
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	4a41      	ldr	r2, [pc, #260]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a34:	5cd3      	ldrb	r3, [r2, r3]
 8005a36:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d015      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a42:	4b3c      	ldr	r3, [pc, #240]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	0c5b      	lsrs	r3, r3, #17
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a4e:	5cd3      	ldrb	r3, [r2, r3]
 8005a50:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a5c:	4a38      	ldr	r2, [pc, #224]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4a34      	ldr	r2, [pc, #208]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a78:	4b2e      	ldr	r3, [pc, #184]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a84:	d102      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	61bb      	str	r3, [r7, #24]
      break;
 8005a8a:	e04a      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	61bb      	str	r3, [r7, #24]
      break;
 8005a9a:	e042      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005a9c:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aac:	d108      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005ab8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e01f      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aca:	d109      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ad8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e00f      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aea:	d11c      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005aec:	4b11      	ldr	r3, [pc, #68]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d016      	beq.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005af8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005afc:	61bb      	str	r3, [r7, #24]
      break;
 8005afe:	e012      	b.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b00:	e011      	b.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b02:	f7ff fe85 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	0b9b      	lsrs	r3, r3, #14
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	3301      	adds	r3, #1
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1a:	61bb      	str	r3, [r7, #24]
      break;
 8005b1c:	e004      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b26:	bf00      	nop
    }
  }
  return (frequency);
 8005b28:	69bb      	ldr	r3, [r7, #24]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3720      	adds	r7, #32
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000
 8005b38:	08009574 	.word	0x08009574
 8005b3c:	08009584 	.word	0x08009584
 8005b40:	007a1200 	.word	0x007a1200
 8005b44:	003d0900 	.word	0x003d0900
 8005b48:	aaaaaaab 	.word	0xaaaaaaab

08005b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e041      	b.n	8005be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fc fcf4 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f000 fc10 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e03a      	b.n	8005c7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	@ (8005c84 <HAL_TIM_Base_Start_IT+0x98>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x58>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x58>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a14      	ldr	r2, [pc, #80]	@ (8005c88 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x58>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d111      	bne.n	8005c68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b06      	cmp	r3, #6
 8005c54:	d010      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	e007      	b.n	8005c78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800

08005c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e041      	b.n	8005d26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fc fc76 	bl	80025a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f000 fb6e 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_TIM_PWM_Start+0x24>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e022      	b.n	8005d9a <HAL_TIM_PWM_Start+0x6a>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d109      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x3e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e015      	b.n	8005d9a <HAL_TIM_PWM_Start+0x6a>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d109      	bne.n	8005d88 <HAL_TIM_PWM_Start+0x58>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e008      	b.n	8005d9a <HAL_TIM_PWM_Start+0x6a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e05e      	b.n	8005e60 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_PWM_Start+0x82>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005db0:	e013      	b.n	8005dda <HAL_TIM_PWM_Start+0xaa>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_PWM_Start+0x92>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc0:	e00b      	b.n	8005dda <HAL_TIM_PWM_Start+0xaa>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0xa2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd0:	e003      	b.n	8005dda <HAL_TIM_PWM_Start+0xaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2201      	movs	r2, #1
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fd70 	bl	80068c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <HAL_TIM_PWM_Start+0x138>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d107      	bne.n	8005e02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a18      	ldr	r2, [pc, #96]	@ (8005e68 <HAL_TIM_PWM_Start+0x138>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIM_PWM_Start+0xfa>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e14:	d009      	beq.n	8005e2a <HAL_TIM_PWM_Start+0xfa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a14      	ldr	r2, [pc, #80]	@ (8005e6c <HAL_TIM_PWM_Start+0x13c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIM_PWM_Start+0xfa>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a12      	ldr	r2, [pc, #72]	@ (8005e70 <HAL_TIM_PWM_Start+0x140>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b06      	cmp	r3, #6
 8005e3a:	d010      	beq.n	8005e5e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	e007      	b.n	8005e5e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800

08005e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d020      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0202 	mvn.w	r2, #2
 8005ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa5a 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa4d 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fa5c 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d020      	beq.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0204 	mvn.w	r2, #4
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa34 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa27 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa36 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0208 	mvn.w	r2, #8
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2204      	movs	r2, #4
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa0e 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa01 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fa10 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0210 	mvn.w	r2, #16
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2208      	movs	r2, #8
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9e8 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9db 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9ea 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0201 	mvn.w	r2, #1
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fc f8e8 	bl	80021b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fced 	bl	80069de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f9ba 	bl	800639c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0220 	mvn.w	r2, #32
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fcc0 	bl	80069cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800606e:	2302      	movs	r3, #2
 8006070:	e0ae      	b.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	f200 809f 	bhi.w	80061c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080061c1 	.word	0x080061c1
 8006090:	080061c1 	.word	0x080061c1
 8006094:	080061c1 	.word	0x080061c1
 8006098:	080060fd 	.word	0x080060fd
 800609c:	080061c1 	.word	0x080061c1
 80060a0:	080061c1 	.word	0x080061c1
 80060a4:	080061c1 	.word	0x080061c1
 80060a8:	0800613f 	.word	0x0800613f
 80060ac:	080061c1 	.word	0x080061c1
 80060b0:	080061c1 	.word	0x080061c1
 80060b4:	080061c1 	.word	0x080061c1
 80060b8:	0800617f 	.word	0x0800617f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 f9e2 	bl	800648c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6999      	ldr	r1, [r3, #24]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	619a      	str	r2, [r3, #24]
      break;
 80060fa:	e064      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fa28 	bl	8006558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	619a      	str	r2, [r3, #24]
      break;
 800613c:	e043      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fa71 	bl	800662c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0208 	orr.w	r2, r2, #8
 8006158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0204 	bic.w	r2, r2, #4
 8006168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69d9      	ldr	r1, [r3, #28]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	61da      	str	r2, [r3, #28]
      break;
 800617c:	e023      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fabb 	bl	8006700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69d9      	ldr	r1, [r3, #28]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	021a      	lsls	r2, r3, #8
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	61da      	str	r2, [r3, #28]
      break;
 80061be:	e002      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
      break;
 80061c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIM_ConfigClockSource+0x1c>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e0b4      	b.n	800635e <HAL_TIM_ConfigClockSource+0x186>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800621a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800622c:	d03e      	beq.n	80062ac <HAL_TIM_ConfigClockSource+0xd4>
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006232:	f200 8087 	bhi.w	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623a:	f000 8086 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x172>
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006242:	d87f      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006244:	2b70      	cmp	r3, #112	@ 0x70
 8006246:	d01a      	beq.n	800627e <HAL_TIM_ConfigClockSource+0xa6>
 8006248:	2b70      	cmp	r3, #112	@ 0x70
 800624a:	d87b      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 800624c:	2b60      	cmp	r3, #96	@ 0x60
 800624e:	d050      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006250:	2b60      	cmp	r3, #96	@ 0x60
 8006252:	d877      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006254:	2b50      	cmp	r3, #80	@ 0x50
 8006256:	d03c      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006258:	2b50      	cmp	r3, #80	@ 0x50
 800625a:	d873      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b40      	cmp	r3, #64	@ 0x40
 800625e:	d058      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x13a>
 8006260:	2b40      	cmp	r3, #64	@ 0x40
 8006262:	d86f      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b30      	cmp	r3, #48	@ 0x30
 8006266:	d064      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 8006268:	2b30      	cmp	r3, #48	@ 0x30
 800626a:	d86b      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b20      	cmp	r3, #32
 800626e:	d060      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d867      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d05c      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 8006278:	2b10      	cmp	r3, #16
 800627a:	d05a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 800627c:	e062      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800628e:	f000 fafc 	bl	800688a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	609a      	str	r2, [r3, #8]
      break;
 80062aa:	e04f      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062bc:	f000 fae5 	bl	800688a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ce:	609a      	str	r2, [r3, #8]
      break;
 80062d0:	e03c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	461a      	mov	r2, r3
 80062e0:	f000 fa5c 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2150      	movs	r1, #80	@ 0x50
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fab3 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 80062f0:	e02c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fe:	461a      	mov	r2, r3
 8006300:	f000 fa7a 	bl	80067f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2160      	movs	r1, #96	@ 0x60
 800630a:	4618      	mov	r0, r3
 800630c:	f000 faa3 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 8006310:	e01c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	461a      	mov	r2, r3
 8006320:	f000 fa3c 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2140      	movs	r1, #64	@ 0x40
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fa93 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 8006330:	e00c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f000 fa8a 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 8006342:	e003      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
      break;
 8006348:	e000      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800634a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr
	...

080063b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006480 <TIM_Base_SetConfig+0xd0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ce:	d007      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006484 <TIM_Base_SetConfig+0xd4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2b      	ldr	r2, [pc, #172]	@ (8006488 <TIM_Base_SetConfig+0xd8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a22      	ldr	r2, [pc, #136]	@ (8006480 <TIM_Base_SetConfig+0xd0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006400:	d007      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1f      	ldr	r2, [pc, #124]	@ (8006484 <TIM_Base_SetConfig+0xd4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1e      	ldr	r2, [pc, #120]	@ (8006488 <TIM_Base_SetConfig+0xd8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d108      	bne.n	8006424 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a0d      	ldr	r2, [pc, #52]	@ (8006480 <TIM_Base_SetConfig+0xd0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d103      	bne.n	8006458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]
  }
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800

0800648c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f023 0201 	bic.w	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0302 	bic.w	r3, r3, #2
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006554 <TIM_OC1_SetConfig+0xc8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10c      	bne.n	8006502 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0308 	bic.w	r3, r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a13      	ldr	r2, [pc, #76]	@ (8006554 <TIM_OC1_SetConfig+0xc8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00

08006558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f023 0210 	bic.w	r2, r3, #16
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <TIM_OC2_SetConfig+0xd0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <TIM_OC2_SetConfig+0xd0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d113      	bne.n	8006604 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00

0800662c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <TIM_OC3_SetConfig+0xd0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d10d      	bne.n	80066a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a14      	ldr	r2, [pc, #80]	@ (80066fc <TIM_OC3_SetConfig+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d113      	bne.n	80066d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00

08006700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800674a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	031b      	lsls	r3, r3, #12
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a0f      	ldr	r2, [pc, #60]	@ (8006798 <TIM_OC4_SetConfig+0x98>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d109      	bne.n	8006774 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	019b      	lsls	r3, r3, #6
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00

0800679c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0210 	bic.w	r2, r3, #16
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	031b      	lsls	r3, r3, #12
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006834:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	f043 0307 	orr.w	r3, r3, #7
 8006878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	021a      	lsls	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	609a      	str	r2, [r3, #8]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2201      	movs	r2, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1a      	ldr	r2, [r3, #32]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	401a      	ands	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e046      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a12      	ldr	r2, [pc, #72]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a10      	ldr	r2, [pc, #64]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800

080069cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e042      	b.n	8006a88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fe30 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2224      	movs	r2, #36	@ 0x24
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fe23 	bl	8007680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695a      	ldr	r2, [r3, #20]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	@ 0x28
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d175      	bne.n	8006b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_UART_Transmit+0x2c>
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e06e      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2221      	movs	r2, #33	@ 0x21
 8006aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ace:	f7fb ff85 	bl	80029dc <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae8:	d108      	bne.n	8006afc <HAL_UART_Transmit+0x6c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e003      	b.n	8006b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b04:	e02e      	b.n	8006b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2180      	movs	r1, #128	@ 0x80
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fb88 	bl	8007226 <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e03a      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	3302      	adds	r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e007      	b.n	8006b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1cb      	bne.n	8006b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2140      	movs	r1, #64	@ 0x40
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fb54 	bl	8007226 <UART_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e006      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d121      	bne.n	8006c04 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UART_Transmit_IT+0x26>
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e01a      	b.n	8006c06 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2221      	movs	r2, #33	@ 0x21
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bfe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	@ 0x30
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d14a      	bne.n	8006cc0 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e043      	b.n	8006cc2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fb43 	bl	80072d8 <UART_Start_Receive_IT>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006c58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d12c      	bne.n	8006cba <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d125      	bne.n	8006cb4 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f043 0310 	orr.w	r3, r3, #16
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ca0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6a39      	ldr	r1, [r7, #32]
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006cb2:	e002      	b.n	8006cba <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006cba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cbe:	e000      	b.n	8006cc2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3730      	adds	r7, #48	@ 0x30
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0ba      	sub	sp, #232	@ 0xe8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fbea 	bl	8007504 <UART_Receive_IT>
      return;
 8006d30:	e25b      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80de 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80d1 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	f043 0202 	orr.w	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dea:	f043 0208 	orr.w	r2, r3, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 81f2 	beq.w	80071e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb75 	bl	8007504 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_UART_IRQHandler+0x17a>
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d04f      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa7f 	bl	800734a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d041      	beq.n	8006ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d9      	bne.n	8006e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80070ac <HAL_UART_IRQHandler+0x3e0>)
 8006eb4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fc fd02 	bl	80038c4 <HAL_DMA_Abort_IT>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	e00e      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f99c 	bl	8007214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	e00a      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f998 	bl	8007214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e006      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f994 	bl	8007214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ef2:	e175      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	bf00      	nop
    return;
 8006ef6:	e173      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 814f 	bne.w	80071a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8148 	beq.w	80071a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8141 	beq.w	80071a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80b6 	beq.w	80070b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8145 	beq.w	80071e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f080 813e 	bcs.w	80071e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	f000 8088 	beq.w	800708c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fa8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1d9      	bne.n	8006f7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006fd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ff0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ffe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e1      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800701a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007028:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800702a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800702e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007036:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e3      	bne.n	8007004 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800705a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800705c:	f023 0310 	bic.w	r3, r3, #16
 8007060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800706e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007070:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800707c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e3      	bne.n	800704a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	4618      	mov	r0, r3
 8007088:	f7fc fbe0 	bl	800384c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800709a:	b29b      	uxth	r3, r3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fb f8e2 	bl	800226c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070a8:	e09c      	b.n	80071e4 <HAL_UART_IRQHandler+0x518>
 80070aa:	bf00      	nop
 80070ac:	0800740f 	.word	0x0800740f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 808e 	beq.w	80071e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8089 	beq.w	80071e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80070fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80070fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e3      	bne.n	80070d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3314      	adds	r3, #20
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	623b      	str	r3, [r7, #32]
   return(result);
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3314      	adds	r3, #20
 800712e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007132:	633a      	str	r2, [r7, #48]	@ 0x30
 8007134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	60fb      	str	r3, [r7, #12]
   return(result);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007178:	61fa      	str	r2, [r7, #28]
 800717a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	69b9      	ldr	r1, [r7, #24]
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	617b      	str	r3, [r7, #20]
   return(result);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e3      	bne.n	8007154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fb f867 	bl	800226c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800719e:	e023      	b.n	80071e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d009      	beq.n	80071c0 <HAL_UART_IRQHandler+0x4f4>
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f93c 	bl	8007436 <UART_Transmit_IT>
    return;
 80071be:	e014      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00e      	beq.n	80071ea <HAL_UART_IRQHandler+0x51e>
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f97b 	bl	80074d4 <UART_EndTransmit_IT>
    return;
 80071de:	e004      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
    return;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
      return;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
      return;
 80071e8:	bf00      	nop
  }
}
 80071ea:	37e8      	adds	r7, #232	@ 0xe8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr

08007214 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr

08007226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b086      	sub	sp, #24
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007236:	e03b      	b.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d037      	beq.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007240:	f7fb fbcc 	bl	80029dc <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	6a3a      	ldr	r2, [r7, #32]
 800724c:	429a      	cmp	r2, r3
 800724e:	d302      	bcc.n	8007256 <UART_WaitOnFlagUntilTimeout+0x30>
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e03a      	b.n	80072d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d023      	beq.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b80      	cmp	r3, #128	@ 0x80
 800726c:	d020      	beq.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b40      	cmp	r3, #64	@ 0x40
 8007272:	d01d      	beq.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b08      	cmp	r3, #8
 8007280:	d116      	bne.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f856 	bl	800734a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2208      	movs	r2, #8
 80072a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e00f      	b.n	80072d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	4013      	ands	r3, r2
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	429a      	cmp	r2, r3
 80072be:	bf0c      	ite	eq
 80072c0:	2301      	moveq	r3, #1
 80072c2:	2300      	movne	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d0b4      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	88fa      	ldrh	r2, [r7, #6]
 80072f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2222      	movs	r2, #34	@ 0x22
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800731c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	695a      	ldr	r2, [r3, #20]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0201 	orr.w	r2, r2, #1
 800732c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0220 	orr.w	r2, r2, #32
 800733c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800734a:	b480      	push	{r7}
 800734c:	b095      	sub	sp, #84	@ 0x54
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007372:	643a      	str	r2, [r7, #64]	@ 0x40
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3314      	adds	r3, #20
 800738c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	61fb      	str	r3, [r7, #28]
   return(result);
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d119      	bne.n	80073f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 0310 	bic.w	r3, r3, #16
 80073d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073e2:	61ba      	str	r2, [r7, #24]
 80073e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6979      	ldr	r1, [r7, #20]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	613b      	str	r3, [r7, #16]
   return(result);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e5      	bne.n	80073c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007404:	bf00      	nop
 8007406:	3754      	adds	r7, #84	@ 0x54
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr

0800740e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff fef3 	bl	8007214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b21      	cmp	r3, #33	@ 0x21
 8007448:	d13e      	bne.n	80074c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007452:	d114      	bne.n	800747e <UART_Transmit_IT+0x48>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d110      	bne.n	800747e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007470:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	621a      	str	r2, [r3, #32]
 800747c:	e008      	b.n	8007490 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	1c59      	adds	r1, r3, #1
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6211      	str	r1, [r2, #32]
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29b      	uxth	r3, r3
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	4619      	mov	r1, r3
 800749e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10f      	bne.n	80074c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e000      	b.n	80074ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
  }
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fe7b 	bl	80071f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08c      	sub	sp, #48	@ 0x30
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b22      	cmp	r3, #34	@ 0x22
 8007516:	f040 80ae 	bne.w	8007676 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007522:	d117      	bne.n	8007554 <UART_Receive_IT+0x50>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d113      	bne.n	8007554 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	b29a      	uxth	r2, r3
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	629a      	str	r2, [r3, #40]	@ 0x28
 8007552:	e026      	b.n	80075a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007566:	d007      	beq.n	8007578 <UART_Receive_IT+0x74>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <UART_Receive_IT+0x82>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e008      	b.n	8007598 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007592:	b2da      	uxtb	r2, r3
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d15d      	bne.n	8007672 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0220 	bic.w	r2, r2, #32
 80075c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d135      	bne.n	8007668 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	613b      	str	r3, [r7, #16]
   return(result);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f023 0310 	bic.w	r3, r3, #16
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007622:	623a      	str	r2, [r7, #32]
 8007624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	69f9      	ldr	r1, [r7, #28]
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e5      	bne.n	8007602 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b10      	cmp	r3, #16
 8007642:	d10a      	bne.n	800765a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fa fe03 	bl	800226c <HAL_UARTEx_RxEventCallback>
 8007666:	e002      	b.n	800766e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fdca 	bl	8007202 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e002      	b.n	8007678 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007676:	2302      	movs	r3, #2
  }
}
 8007678:	4618      	mov	r0, r3
 800767a:	3730      	adds	r7, #48	@ 0x30
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80076ba:	f023 030c 	bic.w	r3, r3, #12
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	430b      	orrs	r3, r1
 80076c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007794 <UART_SetConfig+0x114>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d103      	bne.n	80076f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80076e8:	f7fe f892 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	e002      	b.n	80076f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80076f0:	f7fe f87a 	bl	80057e8 <HAL_RCC_GetPCLK1Freq>
 80076f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009a      	lsls	r2, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	4a22      	ldr	r2, [pc, #136]	@ (8007798 <UART_SetConfig+0x118>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	0119      	lsls	r1, r3, #4
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009a      	lsls	r2, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	fbb2 f2f3 	udiv	r2, r2, r3
 800772c:	4b1a      	ldr	r3, [pc, #104]	@ (8007798 <UART_SetConfig+0x118>)
 800772e:	fba3 0302 	umull	r0, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	2064      	movs	r0, #100	@ 0x64
 8007736:	fb00 f303 	mul.w	r3, r0, r3
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	3332      	adds	r3, #50	@ 0x32
 8007740:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <UART_SetConfig+0x118>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800774c:	4419      	add	r1, r3
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009a      	lsls	r2, r3, #2
 8007758:	441a      	add	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	fbb2 f2f3 	udiv	r2, r2, r3
 8007764:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <UART_SetConfig+0x118>)
 8007766:	fba3 0302 	umull	r0, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	2064      	movs	r0, #100	@ 0x64
 800776e:	fb00 f303 	mul.w	r3, r0, r3
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	3332      	adds	r3, #50	@ 0x32
 8007778:	4a07      	ldr	r2, [pc, #28]	@ (8007798 <UART_SetConfig+0x118>)
 800777a:	fba2 2303 	umull	r2, r3, r2, r3
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	f003 020f 	and.w	r2, r3, #15
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	440a      	add	r2, r1
 800778a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40013800 	.word	0x40013800
 8007798:	51eb851f 	.word	0x51eb851f

0800779c <std>:
 800779c:	2300      	movs	r3, #0
 800779e:	b510      	push	{r4, lr}
 80077a0:	4604      	mov	r4, r0
 80077a2:	e9c0 3300 	strd	r3, r3, [r0]
 80077a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077aa:	6083      	str	r3, [r0, #8]
 80077ac:	8181      	strh	r1, [r0, #12]
 80077ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80077b0:	81c2      	strh	r2, [r0, #14]
 80077b2:	6183      	str	r3, [r0, #24]
 80077b4:	4619      	mov	r1, r3
 80077b6:	2208      	movs	r2, #8
 80077b8:	305c      	adds	r0, #92	@ 0x5c
 80077ba:	f000 fa2f 	bl	8007c1c <memset>
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <std+0x58>)
 80077c0:	6224      	str	r4, [r4, #32]
 80077c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <std+0x5c>)
 80077c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077c8:	4b0c      	ldr	r3, [pc, #48]	@ (80077fc <std+0x60>)
 80077ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <std+0x64>)
 80077ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <std+0x68>)
 80077d2:	429c      	cmp	r4, r3
 80077d4:	d006      	beq.n	80077e4 <std+0x48>
 80077d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077da:	4294      	cmp	r4, r2
 80077dc:	d002      	beq.n	80077e4 <std+0x48>
 80077de:	33d0      	adds	r3, #208	@ 0xd0
 80077e0:	429c      	cmp	r4, r3
 80077e2:	d105      	bne.n	80077f0 <std+0x54>
 80077e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f000 ba8e 	b.w	8007d0c <__retarget_lock_init_recursive>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	bf00      	nop
 80077f4:	08007a6d 	.word	0x08007a6d
 80077f8:	08007a8f 	.word	0x08007a8f
 80077fc:	08007ac7 	.word	0x08007ac7
 8007800:	08007aeb 	.word	0x08007aeb
 8007804:	200002ec 	.word	0x200002ec

08007808 <stdio_exit_handler>:
 8007808:	4a02      	ldr	r2, [pc, #8]	@ (8007814 <stdio_exit_handler+0xc>)
 800780a:	4903      	ldr	r1, [pc, #12]	@ (8007818 <stdio_exit_handler+0x10>)
 800780c:	4803      	ldr	r0, [pc, #12]	@ (800781c <stdio_exit_handler+0x14>)
 800780e:	f000 b869 	b.w	80078e4 <_fwalk_sglue>
 8007812:	bf00      	nop
 8007814:	2000000c 	.word	0x2000000c
 8007818:	0800886d 	.word	0x0800886d
 800781c:	2000001c 	.word	0x2000001c

08007820 <cleanup_stdio>:
 8007820:	6841      	ldr	r1, [r0, #4]
 8007822:	4b0c      	ldr	r3, [pc, #48]	@ (8007854 <cleanup_stdio+0x34>)
 8007824:	b510      	push	{r4, lr}
 8007826:	4299      	cmp	r1, r3
 8007828:	4604      	mov	r4, r0
 800782a:	d001      	beq.n	8007830 <cleanup_stdio+0x10>
 800782c:	f001 f81e 	bl	800886c <_fflush_r>
 8007830:	68a1      	ldr	r1, [r4, #8]
 8007832:	4b09      	ldr	r3, [pc, #36]	@ (8007858 <cleanup_stdio+0x38>)
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <cleanup_stdio+0x1e>
 8007838:	4620      	mov	r0, r4
 800783a:	f001 f817 	bl	800886c <_fflush_r>
 800783e:	68e1      	ldr	r1, [r4, #12]
 8007840:	4b06      	ldr	r3, [pc, #24]	@ (800785c <cleanup_stdio+0x3c>)
 8007842:	4299      	cmp	r1, r3
 8007844:	d004      	beq.n	8007850 <cleanup_stdio+0x30>
 8007846:	4620      	mov	r0, r4
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	f001 b80e 	b.w	800886c <_fflush_r>
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	200002ec 	.word	0x200002ec
 8007858:	20000354 	.word	0x20000354
 800785c:	200003bc 	.word	0x200003bc

08007860 <global_stdio_init.part.0>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4b0b      	ldr	r3, [pc, #44]	@ (8007890 <global_stdio_init.part.0+0x30>)
 8007864:	4c0b      	ldr	r4, [pc, #44]	@ (8007894 <global_stdio_init.part.0+0x34>)
 8007866:	4a0c      	ldr	r2, [pc, #48]	@ (8007898 <global_stdio_init.part.0+0x38>)
 8007868:	4620      	mov	r0, r4
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	2104      	movs	r1, #4
 800786e:	2200      	movs	r2, #0
 8007870:	f7ff ff94 	bl	800779c <std>
 8007874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007878:	2201      	movs	r2, #1
 800787a:	2109      	movs	r1, #9
 800787c:	f7ff ff8e 	bl	800779c <std>
 8007880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007884:	2202      	movs	r2, #2
 8007886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788a:	2112      	movs	r1, #18
 800788c:	f7ff bf86 	b.w	800779c <std>
 8007890:	20000424 	.word	0x20000424
 8007894:	200002ec 	.word	0x200002ec
 8007898:	08007809 	.word	0x08007809

0800789c <__sfp_lock_acquire>:
 800789c:	4801      	ldr	r0, [pc, #4]	@ (80078a4 <__sfp_lock_acquire+0x8>)
 800789e:	f000 ba36 	b.w	8007d0e <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	2000042d 	.word	0x2000042d

080078a8 <__sfp_lock_release>:
 80078a8:	4801      	ldr	r0, [pc, #4]	@ (80078b0 <__sfp_lock_release+0x8>)
 80078aa:	f000 ba31 	b.w	8007d10 <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	2000042d 	.word	0x2000042d

080078b4 <__sinit>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4604      	mov	r4, r0
 80078b8:	f7ff fff0 	bl	800789c <__sfp_lock_acquire>
 80078bc:	6a23      	ldr	r3, [r4, #32]
 80078be:	b11b      	cbz	r3, 80078c8 <__sinit+0x14>
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	f7ff bff0 	b.w	80078a8 <__sfp_lock_release>
 80078c8:	4b04      	ldr	r3, [pc, #16]	@ (80078dc <__sinit+0x28>)
 80078ca:	6223      	str	r3, [r4, #32]
 80078cc:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <__sinit+0x2c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f5      	bne.n	80078c0 <__sinit+0xc>
 80078d4:	f7ff ffc4 	bl	8007860 <global_stdio_init.part.0>
 80078d8:	e7f2      	b.n	80078c0 <__sinit+0xc>
 80078da:	bf00      	nop
 80078dc:	08007821 	.word	0x08007821
 80078e0:	20000424 	.word	0x20000424

080078e4 <_fwalk_sglue>:
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	4607      	mov	r7, r0
 80078ea:	4688      	mov	r8, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	2600      	movs	r6, #0
 80078f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078f4:	f1b9 0901 	subs.w	r9, r9, #1
 80078f8:	d505      	bpl.n	8007906 <_fwalk_sglue+0x22>
 80078fa:	6824      	ldr	r4, [r4, #0]
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d1f7      	bne.n	80078f0 <_fwalk_sglue+0xc>
 8007900:	4630      	mov	r0, r6
 8007902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d907      	bls.n	800791c <_fwalk_sglue+0x38>
 800790c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007910:	3301      	adds	r3, #1
 8007912:	d003      	beq.n	800791c <_fwalk_sglue+0x38>
 8007914:	4629      	mov	r1, r5
 8007916:	4638      	mov	r0, r7
 8007918:	47c0      	blx	r8
 800791a:	4306      	orrs	r6, r0
 800791c:	3568      	adds	r5, #104	@ 0x68
 800791e:	e7e9      	b.n	80078f4 <_fwalk_sglue+0x10>

08007920 <iprintf>:
 8007920:	b40f      	push	{r0, r1, r2, r3}
 8007922:	b507      	push	{r0, r1, r2, lr}
 8007924:	4906      	ldr	r1, [pc, #24]	@ (8007940 <iprintf+0x20>)
 8007926:	ab04      	add	r3, sp, #16
 8007928:	6808      	ldr	r0, [r1, #0]
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	6881      	ldr	r1, [r0, #8]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f000 fc73 	bl	800821c <_vfiprintf_r>
 8007936:	b003      	add	sp, #12
 8007938:	f85d eb04 	ldr.w	lr, [sp], #4
 800793c:	b004      	add	sp, #16
 800793e:	4770      	bx	lr
 8007940:	20000018 	.word	0x20000018

08007944 <_puts_r>:
 8007944:	6a03      	ldr	r3, [r0, #32]
 8007946:	b570      	push	{r4, r5, r6, lr}
 8007948:	4605      	mov	r5, r0
 800794a:	460e      	mov	r6, r1
 800794c:	6884      	ldr	r4, [r0, #8]
 800794e:	b90b      	cbnz	r3, 8007954 <_puts_r+0x10>
 8007950:	f7ff ffb0 	bl	80078b4 <__sinit>
 8007954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007956:	07db      	lsls	r3, r3, #31
 8007958:	d405      	bmi.n	8007966 <_puts_r+0x22>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	0598      	lsls	r0, r3, #22
 800795e:	d402      	bmi.n	8007966 <_puts_r+0x22>
 8007960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007962:	f000 f9d4 	bl	8007d0e <__retarget_lock_acquire_recursive>
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	0719      	lsls	r1, r3, #28
 800796a:	d502      	bpl.n	8007972 <_puts_r+0x2e>
 800796c:	6923      	ldr	r3, [r4, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d135      	bne.n	80079de <_puts_r+0x9a>
 8007972:	4621      	mov	r1, r4
 8007974:	4628      	mov	r0, r5
 8007976:	f000 f8fb 	bl	8007b70 <__swsetup_r>
 800797a:	b380      	cbz	r0, 80079de <_puts_r+0x9a>
 800797c:	f04f 35ff 	mov.w	r5, #4294967295
 8007980:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007982:	07da      	lsls	r2, r3, #31
 8007984:	d405      	bmi.n	8007992 <_puts_r+0x4e>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	059b      	lsls	r3, r3, #22
 800798a:	d402      	bmi.n	8007992 <_puts_r+0x4e>
 800798c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800798e:	f000 f9bf 	bl	8007d10 <__retarget_lock_release_recursive>
 8007992:	4628      	mov	r0, r5
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	2b00      	cmp	r3, #0
 8007998:	da04      	bge.n	80079a4 <_puts_r+0x60>
 800799a:	69a2      	ldr	r2, [r4, #24]
 800799c:	429a      	cmp	r2, r3
 800799e:	dc17      	bgt.n	80079d0 <_puts_r+0x8c>
 80079a0:	290a      	cmp	r1, #10
 80079a2:	d015      	beq.n	80079d0 <_puts_r+0x8c>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	7019      	strb	r1, [r3, #0]
 80079ac:	68a3      	ldr	r3, [r4, #8]
 80079ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079b2:	3b01      	subs	r3, #1
 80079b4:	60a3      	str	r3, [r4, #8]
 80079b6:	2900      	cmp	r1, #0
 80079b8:	d1ed      	bne.n	8007996 <_puts_r+0x52>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	da11      	bge.n	80079e2 <_puts_r+0x9e>
 80079be:	4622      	mov	r2, r4
 80079c0:	210a      	movs	r1, #10
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f895 	bl	8007af2 <__swbuf_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d0d7      	beq.n	800797c <_puts_r+0x38>
 80079cc:	250a      	movs	r5, #10
 80079ce:	e7d7      	b.n	8007980 <_puts_r+0x3c>
 80079d0:	4622      	mov	r2, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f88d 	bl	8007af2 <__swbuf_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d1e7      	bne.n	80079ac <_puts_r+0x68>
 80079dc:	e7ce      	b.n	800797c <_puts_r+0x38>
 80079de:	3e01      	subs	r6, #1
 80079e0:	e7e4      	b.n	80079ac <_puts_r+0x68>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	6022      	str	r2, [r4, #0]
 80079e8:	220a      	movs	r2, #10
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e7ee      	b.n	80079cc <_puts_r+0x88>
	...

080079f0 <puts>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <puts+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f7ff bfa5 	b.w	8007944 <_puts_r>
 80079fa:	bf00      	nop
 80079fc:	20000018 	.word	0x20000018

08007a00 <sniprintf>:
 8007a00:	b40c      	push	{r2, r3}
 8007a02:	b530      	push	{r4, r5, lr}
 8007a04:	4b18      	ldr	r3, [pc, #96]	@ (8007a68 <sniprintf+0x68>)
 8007a06:	1e0c      	subs	r4, r1, #0
 8007a08:	681d      	ldr	r5, [r3, #0]
 8007a0a:	b09d      	sub	sp, #116	@ 0x74
 8007a0c:	da08      	bge.n	8007a20 <sniprintf+0x20>
 8007a0e:	238b      	movs	r3, #139	@ 0x8b
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	602b      	str	r3, [r5, #0]
 8007a16:	b01d      	add	sp, #116	@ 0x74
 8007a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a1c:	b002      	add	sp, #8
 8007a1e:	4770      	bx	lr
 8007a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007a2e:	bf0c      	ite	eq
 8007a30:	4623      	moveq	r3, r4
 8007a32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	9307      	str	r3, [sp, #28]
 8007a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a3e:	9002      	str	r0, [sp, #8]
 8007a40:	9006      	str	r0, [sp, #24]
 8007a42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a46:	4628      	mov	r0, r5
 8007a48:	ab21      	add	r3, sp, #132	@ 0x84
 8007a4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a4c:	a902      	add	r1, sp, #8
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f000 fac0 	bl	8007fd4 <_svfiprintf_r>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	bfbc      	itt	lt
 8007a58:	238b      	movlt	r3, #139	@ 0x8b
 8007a5a:	602b      	strlt	r3, [r5, #0]
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	d0da      	beq.n	8007a16 <sniprintf+0x16>
 8007a60:	2200      	movs	r2, #0
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e7d6      	b.n	8007a16 <sniprintf+0x16>
 8007a68:	20000018 	.word	0x20000018

08007a6c <__sread>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a74:	f000 f8fc 	bl	8007c70 <_read_r>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	bfab      	itete	ge
 8007a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a80:	181b      	addge	r3, r3, r0
 8007a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a86:	bfac      	ite	ge
 8007a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a8a:	81a3      	strhlt	r3, [r4, #12]
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <__swrite>:
 8007a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	461f      	mov	r7, r3
 8007a94:	898b      	ldrh	r3, [r1, #12]
 8007a96:	4605      	mov	r5, r0
 8007a98:	05db      	lsls	r3, r3, #23
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	d505      	bpl.n	8007aac <__swrite+0x1e>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	f000 f8d0 	bl	8007c4c <_lseek_r>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	4632      	mov	r2, r6
 8007ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	463b      	mov	r3, r7
 8007aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	f000 b8e7 	b.w	8007c94 <_write_r>

08007ac6 <__sseek>:
 8007ac6:	b510      	push	{r4, lr}
 8007ac8:	460c      	mov	r4, r1
 8007aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ace:	f000 f8bd 	bl	8007c4c <_lseek_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	bf15      	itete	ne
 8007ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ae2:	81a3      	strheq	r3, [r4, #12]
 8007ae4:	bf18      	it	ne
 8007ae6:	81a3      	strhne	r3, [r4, #12]
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <__sclose>:
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 b89d 	b.w	8007c2c <_close_r>

08007af2 <__swbuf_r>:
 8007af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af4:	460e      	mov	r6, r1
 8007af6:	4614      	mov	r4, r2
 8007af8:	4605      	mov	r5, r0
 8007afa:	b118      	cbz	r0, 8007b04 <__swbuf_r+0x12>
 8007afc:	6a03      	ldr	r3, [r0, #32]
 8007afe:	b90b      	cbnz	r3, 8007b04 <__swbuf_r+0x12>
 8007b00:	f7ff fed8 	bl	80078b4 <__sinit>
 8007b04:	69a3      	ldr	r3, [r4, #24]
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	071a      	lsls	r2, r3, #28
 8007b0c:	d501      	bpl.n	8007b12 <__swbuf_r+0x20>
 8007b0e:	6923      	ldr	r3, [r4, #16]
 8007b10:	b943      	cbnz	r3, 8007b24 <__swbuf_r+0x32>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 f82b 	bl	8007b70 <__swsetup_r>
 8007b1a:	b118      	cbz	r0, 8007b24 <__swbuf_r+0x32>
 8007b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b20:	4638      	mov	r0, r7
 8007b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	6922      	ldr	r2, [r4, #16]
 8007b28:	b2f6      	uxtb	r6, r6
 8007b2a:	1a98      	subs	r0, r3, r2
 8007b2c:	6963      	ldr	r3, [r4, #20]
 8007b2e:	4637      	mov	r7, r6
 8007b30:	4283      	cmp	r3, r0
 8007b32:	dc05      	bgt.n	8007b40 <__swbuf_r+0x4e>
 8007b34:	4621      	mov	r1, r4
 8007b36:	4628      	mov	r0, r5
 8007b38:	f000 fe98 	bl	800886c <_fflush_r>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d1ed      	bne.n	8007b1c <__swbuf_r+0x2a>
 8007b40:	68a3      	ldr	r3, [r4, #8]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	701e      	strb	r6, [r3, #0]
 8007b4e:	6962      	ldr	r2, [r4, #20]
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d004      	beq.n	8007b60 <__swbuf_r+0x6e>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	07db      	lsls	r3, r3, #31
 8007b5a:	d5e1      	bpl.n	8007b20 <__swbuf_r+0x2e>
 8007b5c:	2e0a      	cmp	r6, #10
 8007b5e:	d1df      	bne.n	8007b20 <__swbuf_r+0x2e>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 fe82 	bl	800886c <_fflush_r>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0d9      	beq.n	8007b20 <__swbuf_r+0x2e>
 8007b6c:	e7d6      	b.n	8007b1c <__swbuf_r+0x2a>
	...

08007b70 <__swsetup_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4b29      	ldr	r3, [pc, #164]	@ (8007c18 <__swsetup_r+0xa8>)
 8007b74:	4605      	mov	r5, r0
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	460c      	mov	r4, r1
 8007b7a:	b118      	cbz	r0, 8007b84 <__swsetup_r+0x14>
 8007b7c:	6a03      	ldr	r3, [r0, #32]
 8007b7e:	b90b      	cbnz	r3, 8007b84 <__swsetup_r+0x14>
 8007b80:	f7ff fe98 	bl	80078b4 <__sinit>
 8007b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d422      	bmi.n	8007bd2 <__swsetup_r+0x62>
 8007b8c:	06da      	lsls	r2, r3, #27
 8007b8e:	d407      	bmi.n	8007ba0 <__swsetup_r+0x30>
 8007b90:	2209      	movs	r2, #9
 8007b92:	602a      	str	r2, [r5, #0]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	e033      	b.n	8007c08 <__swsetup_r+0x98>
 8007ba0:	0758      	lsls	r0, r3, #29
 8007ba2:	d512      	bpl.n	8007bca <__swsetup_r+0x5a>
 8007ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ba6:	b141      	cbz	r1, 8007bba <__swsetup_r+0x4a>
 8007ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bac:	4299      	cmp	r1, r3
 8007bae:	d002      	beq.n	8007bb6 <__swsetup_r+0x46>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f8bd 	bl	8007d30 <_free_r>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6063      	str	r3, [r4, #4]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0308 	orr.w	r3, r3, #8
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	b94b      	cbnz	r3, 8007bea <__swsetup_r+0x7a>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be0:	d003      	beq.n	8007bea <__swsetup_r+0x7a>
 8007be2:	4621      	mov	r1, r4
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 fe8e 	bl	8008906 <__smakebuf_r>
 8007bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bee:	f013 0201 	ands.w	r2, r3, #1
 8007bf2:	d00a      	beq.n	8007c0a <__swsetup_r+0x9a>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	60a2      	str	r2, [r4, #8]
 8007bf8:	6962      	ldr	r2, [r4, #20]
 8007bfa:	4252      	negs	r2, r2
 8007bfc:	61a2      	str	r2, [r4, #24]
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	b942      	cbnz	r2, 8007c14 <__swsetup_r+0xa4>
 8007c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c06:	d1c5      	bne.n	8007b94 <__swsetup_r+0x24>
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	0799      	lsls	r1, r3, #30
 8007c0c:	bf58      	it	pl
 8007c0e:	6962      	ldrpl	r2, [r4, #20]
 8007c10:	60a2      	str	r2, [r4, #8]
 8007c12:	e7f4      	b.n	8007bfe <__swsetup_r+0x8e>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e7f7      	b.n	8007c08 <__swsetup_r+0x98>
 8007c18:	20000018 	.word	0x20000018

08007c1c <memset>:
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	4402      	add	r2, r0
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d100      	bne.n	8007c26 <memset+0xa>
 8007c24:	4770      	bx	lr
 8007c26:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2a:	e7f9      	b.n	8007c20 <memset+0x4>

08007c2c <_close_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4d05      	ldr	r5, [pc, #20]	@ (8007c48 <_close_r+0x1c>)
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fa fde5 	bl	8002806 <_close>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_close_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_close_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20000428 	.word	0x20000428

08007c4c <_lseek_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	4611      	mov	r1, r2
 8007c54:	2200      	movs	r2, #0
 8007c56:	4d05      	ldr	r5, [pc, #20]	@ (8007c6c <_lseek_r+0x20>)
 8007c58:	602a      	str	r2, [r5, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f7fa fdf7 	bl	800284e <_lseek>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_lseek_r+0x1e>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_lseek_r+0x1e>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20000428 	.word	0x20000428

08007c70 <_read_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4d05      	ldr	r5, [pc, #20]	@ (8007c90 <_read_r+0x20>)
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f7fa fda4 	bl	80027cc <_read>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_read_r+0x1e>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_read_r+0x1e>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20000428 	.word	0x20000428

08007c94 <_write_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4604      	mov	r4, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4d05      	ldr	r5, [pc, #20]	@ (8007cb4 <_write_r+0x20>)
 8007ca0:	602a      	str	r2, [r5, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fa fa68 	bl	8002178 <_write>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_write_r+0x1e>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_write_r+0x1e>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20000428 	.word	0x20000428

08007cb8 <__errno>:
 8007cb8:	4b01      	ldr	r3, [pc, #4]	@ (8007cc0 <__errno+0x8>)
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20000018 	.word	0x20000018

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	4d0c      	ldr	r5, [pc, #48]	@ (8007cfc <__libc_init_array+0x38>)
 8007cca:	4c0d      	ldr	r4, [pc, #52]	@ (8007d00 <__libc_init_array+0x3c>)
 8007ccc:	1b64      	subs	r4, r4, r5
 8007cce:	10a4      	asrs	r4, r4, #2
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	f001 fb76 	bl	80093c4 <_init>
 8007cd8:	2600      	movs	r6, #0
 8007cda:	4d0a      	ldr	r5, [pc, #40]	@ (8007d04 <__libc_init_array+0x40>)
 8007cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8007d08 <__libc_init_array+0x44>)
 8007cde:	1b64      	subs	r4, r4, r5
 8007ce0:	10a4      	asrs	r4, r4, #2
 8007ce2:	42a6      	cmp	r6, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cec:	4798      	blx	r3
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf6:	4798      	blx	r3
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	08009618 	.word	0x08009618
 8007d00:	08009618 	.word	0x08009618
 8007d04:	08009618 	.word	0x08009618
 8007d08:	0800961c 	.word	0x0800961c

08007d0c <__retarget_lock_init_recursive>:
 8007d0c:	4770      	bx	lr

08007d0e <__retarget_lock_acquire_recursive>:
 8007d0e:	4770      	bx	lr

08007d10 <__retarget_lock_release_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <memcpy>:
 8007d12:	440a      	add	r2, r1
 8007d14:	4291      	cmp	r1, r2
 8007d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d1a:	d100      	bne.n	8007d1e <memcpy+0xc>
 8007d1c:	4770      	bx	lr
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d24:	4291      	cmp	r1, r2
 8007d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2a:	d1f9      	bne.n	8007d20 <memcpy+0xe>
 8007d2c:	bd10      	pop	{r4, pc}
	...

08007d30 <_free_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d040      	beq.n	8007dba <_free_r+0x8a>
 8007d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3c:	1f0c      	subs	r4, r1, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfb8      	it	lt
 8007d42:	18e4      	addlt	r4, r4, r3
 8007d44:	f000 f8de 	bl	8007f04 <__malloc_lock>
 8007d48:	4a1c      	ldr	r2, [pc, #112]	@ (8007dbc <_free_r+0x8c>)
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	b933      	cbnz	r3, 8007d5c <_free_r+0x2c>
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	4628      	mov	r0, r5
 8007d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d58:	f000 b8da 	b.w	8007f10 <__malloc_unlock>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d908      	bls.n	8007d72 <_free_r+0x42>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	1821      	adds	r1, r4, r0
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf01      	itttt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	1809      	addeq	r1, r1, r0
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	e7ed      	b.n	8007d4e <_free_r+0x1e>
 8007d72:	461a      	mov	r2, r3
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b10b      	cbz	r3, 8007d7c <_free_r+0x4c>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x42>
 8007d7c:	6811      	ldr	r1, [r2, #0]
 8007d7e:	1850      	adds	r0, r2, r1
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x6c>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4401      	add	r1, r0
 8007d88:	1850      	adds	r0, r2, r1
 8007d8a:	4283      	cmp	r3, r0
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	d1e0      	bne.n	8007d52 <_free_r+0x22>
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4408      	add	r0, r1
 8007d96:	6010      	str	r0, [r2, #0]
 8007d98:	6053      	str	r3, [r2, #4]
 8007d9a:	e7da      	b.n	8007d52 <_free_r+0x22>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x74>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	e7d6      	b.n	8007d52 <_free_r+0x22>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	1821      	adds	r1, r4, r0
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf01      	itttt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	1809      	addeq	r1, r1, r0
 8007db2:	6021      	streq	r1, [r4, #0]
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	6054      	str	r4, [r2, #4]
 8007db8:	e7cb      	b.n	8007d52 <_free_r+0x22>
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20000434 	.word	0x20000434

08007dc0 <sbrk_aligned>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8007e00 <sbrk_aligned+0x40>)
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	6831      	ldr	r1, [r6, #0]
 8007dc8:	4605      	mov	r5, r0
 8007dca:	b911      	cbnz	r1, 8007dd2 <sbrk_aligned+0x12>
 8007dcc:	f000 fe14 	bl	80089f8 <_sbrk_r>
 8007dd0:	6030      	str	r0, [r6, #0]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f000 fe0f 	bl	80089f8 <_sbrk_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d103      	bne.n	8007de6 <sbrk_aligned+0x26>
 8007dde:	f04f 34ff 	mov.w	r4, #4294967295
 8007de2:	4620      	mov	r0, r4
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	1cc4      	adds	r4, r0, #3
 8007de8:	f024 0403 	bic.w	r4, r4, #3
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d0f8      	beq.n	8007de2 <sbrk_aligned+0x22>
 8007df0:	1a21      	subs	r1, r4, r0
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 fe00 	bl	80089f8 <_sbrk_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d1f2      	bne.n	8007de2 <sbrk_aligned+0x22>
 8007dfc:	e7ef      	b.n	8007dde <sbrk_aligned+0x1e>
 8007dfe:	bf00      	nop
 8007e00:	20000430 	.word	0x20000430

08007e04 <_malloc_r>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	1ccd      	adds	r5, r1, #3
 8007e0a:	f025 0503 	bic.w	r5, r5, #3
 8007e0e:	3508      	adds	r5, #8
 8007e10:	2d0c      	cmp	r5, #12
 8007e12:	bf38      	it	cc
 8007e14:	250c      	movcc	r5, #12
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	4606      	mov	r6, r0
 8007e1a:	db01      	blt.n	8007e20 <_malloc_r+0x1c>
 8007e1c:	42a9      	cmp	r1, r5
 8007e1e:	d904      	bls.n	8007e2a <_malloc_r+0x26>
 8007e20:	230c      	movs	r3, #12
 8007e22:	6033      	str	r3, [r6, #0]
 8007e24:	2000      	movs	r0, #0
 8007e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f00 <_malloc_r+0xfc>
 8007e2e:	f000 f869 	bl	8007f04 <__malloc_lock>
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	461c      	mov	r4, r3
 8007e38:	bb44      	cbnz	r4, 8007e8c <_malloc_r+0x88>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7ff ffbf 	bl	8007dc0 <sbrk_aligned>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	4604      	mov	r4, r0
 8007e46:	d158      	bne.n	8007efa <_malloc_r+0xf6>
 8007e48:	f8d8 4000 	ldr.w	r4, [r8]
 8007e4c:	4627      	mov	r7, r4
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	d143      	bne.n	8007eda <_malloc_r+0xd6>
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	d04b      	beq.n	8007eee <_malloc_r+0xea>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	4639      	mov	r1, r7
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	eb04 0903 	add.w	r9, r4, r3
 8007e60:	f000 fdca 	bl	80089f8 <_sbrk_r>
 8007e64:	4581      	cmp	r9, r0
 8007e66:	d142      	bne.n	8007eee <_malloc_r+0xea>
 8007e68:	6821      	ldr	r1, [r4, #0]
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	1a6d      	subs	r5, r5, r1
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7ff ffa6 	bl	8007dc0 <sbrk_aligned>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d03a      	beq.n	8007eee <_malloc_r+0xea>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	442b      	add	r3, r5
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	bb62      	cbnz	r2, 8007ee0 <_malloc_r+0xdc>
 8007e86:	f8c8 7000 	str.w	r7, [r8]
 8007e8a:	e00f      	b.n	8007eac <_malloc_r+0xa8>
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	1b52      	subs	r2, r2, r5
 8007e90:	d420      	bmi.n	8007ed4 <_malloc_r+0xd0>
 8007e92:	2a0b      	cmp	r2, #11
 8007e94:	d917      	bls.n	8007ec6 <_malloc_r+0xc2>
 8007e96:	1961      	adds	r1, r4, r5
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	bf18      	it	ne
 8007e9e:	6059      	strne	r1, [r3, #4]
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	bf08      	it	eq
 8007ea4:	f8c8 1000 	streq.w	r1, [r8]
 8007ea8:	5162      	str	r2, [r4, r5]
 8007eaa:	604b      	str	r3, [r1, #4]
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f82f 	bl	8007f10 <__malloc_unlock>
 8007eb2:	f104 000b 	add.w	r0, r4, #11
 8007eb6:	1d23      	adds	r3, r4, #4
 8007eb8:	f020 0007 	bic.w	r0, r0, #7
 8007ebc:	1ac2      	subs	r2, r0, r3
 8007ebe:	bf1c      	itt	ne
 8007ec0:	1a1b      	subne	r3, r3, r0
 8007ec2:	50a3      	strne	r3, [r4, r2]
 8007ec4:	e7af      	b.n	8007e26 <_malloc_r+0x22>
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	bf0c      	ite	eq
 8007ecc:	f8c8 2000 	streq.w	r2, [r8]
 8007ed0:	605a      	strne	r2, [r3, #4]
 8007ed2:	e7eb      	b.n	8007eac <_malloc_r+0xa8>
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	6864      	ldr	r4, [r4, #4]
 8007ed8:	e7ae      	b.n	8007e38 <_malloc_r+0x34>
 8007eda:	463c      	mov	r4, r7
 8007edc:	687f      	ldr	r7, [r7, #4]
 8007ede:	e7b6      	b.n	8007e4e <_malloc_r+0x4a>
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d1fb      	bne.n	8007ee0 <_malloc_r+0xdc>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6053      	str	r3, [r2, #4]
 8007eec:	e7de      	b.n	8007eac <_malloc_r+0xa8>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	6033      	str	r3, [r6, #0]
 8007ef4:	f000 f80c 	bl	8007f10 <__malloc_unlock>
 8007ef8:	e794      	b.n	8007e24 <_malloc_r+0x20>
 8007efa:	6005      	str	r5, [r0, #0]
 8007efc:	e7d6      	b.n	8007eac <_malloc_r+0xa8>
 8007efe:	bf00      	nop
 8007f00:	20000434 	.word	0x20000434

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__malloc_lock+0x8>)
 8007f06:	f7ff bf02 	b.w	8007d0e <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	2000042c 	.word	0x2000042c

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f7ff befd 	b.w	8007d10 <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000042c 	.word	0x2000042c

08007f1c <__ssputs_r>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	461f      	mov	r7, r3
 8007f22:	688e      	ldr	r6, [r1, #8]
 8007f24:	4682      	mov	sl, r0
 8007f26:	42be      	cmp	r6, r7
 8007f28:	460c      	mov	r4, r1
 8007f2a:	4690      	mov	r8, r2
 8007f2c:	680b      	ldr	r3, [r1, #0]
 8007f2e:	d82d      	bhi.n	8007f8c <__ssputs_r+0x70>
 8007f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f38:	d026      	beq.n	8007f88 <__ssputs_r+0x6c>
 8007f3a:	6965      	ldr	r5, [r4, #20]
 8007f3c:	6909      	ldr	r1, [r1, #16]
 8007f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f42:	eba3 0901 	sub.w	r9, r3, r1
 8007f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f4a:	1c7b      	adds	r3, r7, #1
 8007f4c:	444b      	add	r3, r9
 8007f4e:	106d      	asrs	r5, r5, #1
 8007f50:	429d      	cmp	r5, r3
 8007f52:	bf38      	it	cc
 8007f54:	461d      	movcc	r5, r3
 8007f56:	0553      	lsls	r3, r2, #21
 8007f58:	d527      	bpl.n	8007faa <__ssputs_r+0x8e>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7ff ff52 	bl	8007e04 <_malloc_r>
 8007f60:	4606      	mov	r6, r0
 8007f62:	b360      	cbz	r0, 8007fbe <__ssputs_r+0xa2>
 8007f64:	464a      	mov	r2, r9
 8007f66:	6921      	ldr	r1, [r4, #16]
 8007f68:	f7ff fed3 	bl	8007d12 <memcpy>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	6126      	str	r6, [r4, #16]
 8007f7a:	444e      	add	r6, r9
 8007f7c:	6026      	str	r6, [r4, #0]
 8007f7e:	463e      	mov	r6, r7
 8007f80:	6165      	str	r5, [r4, #20]
 8007f82:	eba5 0509 	sub.w	r5, r5, r9
 8007f86:	60a5      	str	r5, [r4, #8]
 8007f88:	42be      	cmp	r6, r7
 8007f8a:	d900      	bls.n	8007f8e <__ssputs_r+0x72>
 8007f8c:	463e      	mov	r6, r7
 8007f8e:	4632      	mov	r2, r6
 8007f90:	4641      	mov	r1, r8
 8007f92:	6820      	ldr	r0, [r4, #0]
 8007f94:	f000 fcf3 	bl	800897e <memmove>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	68a3      	ldr	r3, [r4, #8]
 8007f9c:	1b9b      	subs	r3, r3, r6
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	4433      	add	r3, r6
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	462a      	mov	r2, r5
 8007fac:	f000 fd42 	bl	8008a34 <_realloc_r>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d1e0      	bne.n	8007f78 <__ssputs_r+0x5c>
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	6921      	ldr	r1, [r4, #16]
 8007fba:	f7ff feb9 	bl	8007d30 <_free_r>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	f8ca 3000 	str.w	r3, [sl]
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	e7e9      	b.n	8007fa6 <__ssputs_r+0x8a>
	...

08007fd4 <_svfiprintf_r>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4698      	mov	r8, r3
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	4607      	mov	r7, r0
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	460d      	mov	r5, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	b09d      	sub	sp, #116	@ 0x74
 8007fe6:	d510      	bpl.n	800800a <_svfiprintf_r+0x36>
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b973      	cbnz	r3, 800800a <_svfiprintf_r+0x36>
 8007fec:	2140      	movs	r1, #64	@ 0x40
 8007fee:	f7ff ff09 	bl	8007e04 <_malloc_r>
 8007ff2:	6028      	str	r0, [r5, #0]
 8007ff4:	6128      	str	r0, [r5, #16]
 8007ff6:	b930      	cbnz	r0, 8008006 <_svfiprintf_r+0x32>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b01d      	add	sp, #116	@ 0x74
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	2340      	movs	r3, #64	@ 0x40
 8008008:	616b      	str	r3, [r5, #20]
 800800a:	2300      	movs	r3, #0
 800800c:	9309      	str	r3, [sp, #36]	@ 0x24
 800800e:	2320      	movs	r3, #32
 8008010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008014:	2330      	movs	r3, #48	@ 0x30
 8008016:	f04f 0901 	mov.w	r9, #1
 800801a:	f8cd 800c 	str.w	r8, [sp, #12]
 800801e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80081b8 <_svfiprintf_r+0x1e4>
 8008022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008026:	4623      	mov	r3, r4
 8008028:	469a      	mov	sl, r3
 800802a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802e:	b10a      	cbz	r2, 8008034 <_svfiprintf_r+0x60>
 8008030:	2a25      	cmp	r2, #37	@ 0x25
 8008032:	d1f9      	bne.n	8008028 <_svfiprintf_r+0x54>
 8008034:	ebba 0b04 	subs.w	fp, sl, r4
 8008038:	d00b      	beq.n	8008052 <_svfiprintf_r+0x7e>
 800803a:	465b      	mov	r3, fp
 800803c:	4622      	mov	r2, r4
 800803e:	4629      	mov	r1, r5
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ff6b 	bl	8007f1c <__ssputs_r>
 8008046:	3001      	adds	r0, #1
 8008048:	f000 80a7 	beq.w	800819a <_svfiprintf_r+0x1c6>
 800804c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800804e:	445a      	add	r2, fp
 8008050:	9209      	str	r2, [sp, #36]	@ 0x24
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 809f 	beq.w	800819a <_svfiprintf_r+0x1c6>
 800805c:	2300      	movs	r3, #0
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008066:	f10a 0a01 	add.w	sl, sl, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008072:	931a      	str	r3, [sp, #104]	@ 0x68
 8008074:	4654      	mov	r4, sl
 8008076:	2205      	movs	r2, #5
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	484e      	ldr	r0, [pc, #312]	@ (80081b8 <_svfiprintf_r+0x1e4>)
 800807e:	f000 fccb 	bl	8008a18 <memchr>
 8008082:	9a04      	ldr	r2, [sp, #16]
 8008084:	b9d8      	cbnz	r0, 80080be <_svfiprintf_r+0xea>
 8008086:	06d0      	lsls	r0, r2, #27
 8008088:	bf44      	itt	mi
 800808a:	2320      	movmi	r3, #32
 800808c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008090:	0711      	lsls	r1, r2, #28
 8008092:	bf44      	itt	mi
 8008094:	232b      	movmi	r3, #43	@ 0x2b
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809a:	f89a 3000 	ldrb.w	r3, [sl]
 800809e:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a0:	d015      	beq.n	80080ce <_svfiprintf_r+0xfa>
 80080a2:	4654      	mov	r4, sl
 80080a4:	2000      	movs	r0, #0
 80080a6:	f04f 0c0a 	mov.w	ip, #10
 80080aa:	9a07      	ldr	r2, [sp, #28]
 80080ac:	4621      	mov	r1, r4
 80080ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b2:	3b30      	subs	r3, #48	@ 0x30
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	d94b      	bls.n	8008150 <_svfiprintf_r+0x17c>
 80080b8:	b1b0      	cbz	r0, 80080e8 <_svfiprintf_r+0x114>
 80080ba:	9207      	str	r2, [sp, #28]
 80080bc:	e014      	b.n	80080e8 <_svfiprintf_r+0x114>
 80080be:	eba0 0308 	sub.w	r3, r0, r8
 80080c2:	fa09 f303 	lsl.w	r3, r9, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	46a2      	mov	sl, r4
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	e7d2      	b.n	8008074 <_svfiprintf_r+0xa0>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	1d19      	adds	r1, r3, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	9103      	str	r1, [sp, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfbb      	ittet	lt
 80080da:	425b      	neglt	r3, r3
 80080dc:	f042 0202 	orrlt.w	r2, r2, #2
 80080e0:	9307      	strge	r3, [sp, #28]
 80080e2:	9307      	strlt	r3, [sp, #28]
 80080e4:	bfb8      	it	lt
 80080e6:	9204      	strlt	r2, [sp, #16]
 80080e8:	7823      	ldrb	r3, [r4, #0]
 80080ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80080ec:	d10a      	bne.n	8008104 <_svfiprintf_r+0x130>
 80080ee:	7863      	ldrb	r3, [r4, #1]
 80080f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f2:	d132      	bne.n	800815a <_svfiprintf_r+0x186>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	3402      	adds	r4, #2
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	9203      	str	r2, [sp, #12]
 80080fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80081bc <_svfiprintf_r+0x1e8>
 8008108:	2203      	movs	r2, #3
 800810a:	4650      	mov	r0, sl
 800810c:	7821      	ldrb	r1, [r4, #0]
 800810e:	f000 fc83 	bl	8008a18 <memchr>
 8008112:	b138      	cbz	r0, 8008124 <_svfiprintf_r+0x150>
 8008114:	2240      	movs	r2, #64	@ 0x40
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	eba0 000a 	sub.w	r0, r0, sl
 800811c:	4082      	lsls	r2, r0
 800811e:	4313      	orrs	r3, r2
 8008120:	3401      	adds	r4, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	2206      	movs	r2, #6
 800812a:	4825      	ldr	r0, [pc, #148]	@ (80081c0 <_svfiprintf_r+0x1ec>)
 800812c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008130:	f000 fc72 	bl	8008a18 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d036      	beq.n	80081a6 <_svfiprintf_r+0x1d2>
 8008138:	4b22      	ldr	r3, [pc, #136]	@ (80081c4 <_svfiprintf_r+0x1f0>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_svfiprintf_r+0x1b0>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814a:	4433      	add	r3, r6
 800814c:	9309      	str	r3, [sp, #36]	@ 0x24
 800814e:	e76a      	b.n	8008026 <_svfiprintf_r+0x52>
 8008150:	460c      	mov	r4, r1
 8008152:	2001      	movs	r0, #1
 8008154:	fb0c 3202 	mla	r2, ip, r2, r3
 8008158:	e7a8      	b.n	80080ac <_svfiprintf_r+0xd8>
 800815a:	2300      	movs	r3, #0
 800815c:	f04f 0c0a 	mov.w	ip, #10
 8008160:	4619      	mov	r1, r3
 8008162:	3401      	adds	r4, #1
 8008164:	9305      	str	r3, [sp, #20]
 8008166:	4620      	mov	r0, r4
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	@ 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_svfiprintf_r+0x1a6>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c6      	beq.n	8008104 <_svfiprintf_r+0x130>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c4      	b.n	8008104 <_svfiprintf_r+0x130>
 800817a:	4604      	mov	r4, r0
 800817c:	2301      	movs	r3, #1
 800817e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008182:	e7f0      	b.n	8008166 <_svfiprintf_r+0x192>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	462a      	mov	r2, r5
 800818a:	4638      	mov	r0, r7
 800818c:	4b0e      	ldr	r3, [pc, #56]	@ (80081c8 <_svfiprintf_r+0x1f4>)
 800818e:	a904      	add	r1, sp, #16
 8008190:	f3af 8000 	nop.w
 8008194:	1c42      	adds	r2, r0, #1
 8008196:	4606      	mov	r6, r0
 8008198:	d1d6      	bne.n	8008148 <_svfiprintf_r+0x174>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	065b      	lsls	r3, r3, #25
 800819e:	f53f af2d 	bmi.w	8007ffc <_svfiprintf_r+0x28>
 80081a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a4:	e72c      	b.n	8008000 <_svfiprintf_r+0x2c>
 80081a6:	ab03      	add	r3, sp, #12
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4638      	mov	r0, r7
 80081ae:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <_svfiprintf_r+0x1f4>)
 80081b0:	a904      	add	r1, sp, #16
 80081b2:	f000 f9bd 	bl	8008530 <_printf_i>
 80081b6:	e7ed      	b.n	8008194 <_svfiprintf_r+0x1c0>
 80081b8:	08009586 	.word	0x08009586
 80081bc:	0800958c 	.word	0x0800958c
 80081c0:	08009590 	.word	0x08009590
 80081c4:	00000000 	.word	0x00000000
 80081c8:	08007f1d 	.word	0x08007f1d

080081cc <__sfputc_r>:
 80081cc:	6893      	ldr	r3, [r2, #8]
 80081ce:	b410      	push	{r4}
 80081d0:	3b01      	subs	r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	6093      	str	r3, [r2, #8]
 80081d6:	da07      	bge.n	80081e8 <__sfputc_r+0x1c>
 80081d8:	6994      	ldr	r4, [r2, #24]
 80081da:	42a3      	cmp	r3, r4
 80081dc:	db01      	blt.n	80081e2 <__sfputc_r+0x16>
 80081de:	290a      	cmp	r1, #10
 80081e0:	d102      	bne.n	80081e8 <__sfputc_r+0x1c>
 80081e2:	bc10      	pop	{r4}
 80081e4:	f7ff bc85 	b.w	8007af2 <__swbuf_r>
 80081e8:	6813      	ldr	r3, [r2, #0]
 80081ea:	1c58      	adds	r0, r3, #1
 80081ec:	6010      	str	r0, [r2, #0]
 80081ee:	7019      	strb	r1, [r3, #0]
 80081f0:	4608      	mov	r0, r1
 80081f2:	bc10      	pop	{r4}
 80081f4:	4770      	bx	lr

080081f6 <__sfputs_r>:
 80081f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f8:	4606      	mov	r6, r0
 80081fa:	460f      	mov	r7, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	18d5      	adds	r5, r2, r3
 8008200:	42ac      	cmp	r4, r5
 8008202:	d101      	bne.n	8008208 <__sfputs_r+0x12>
 8008204:	2000      	movs	r0, #0
 8008206:	e007      	b.n	8008218 <__sfputs_r+0x22>
 8008208:	463a      	mov	r2, r7
 800820a:	4630      	mov	r0, r6
 800820c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008210:	f7ff ffdc 	bl	80081cc <__sfputc_r>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d1f3      	bne.n	8008200 <__sfputs_r+0xa>
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800821c <_vfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	4614      	mov	r4, r2
 8008224:	4698      	mov	r8, r3
 8008226:	4606      	mov	r6, r0
 8008228:	b09d      	sub	sp, #116	@ 0x74
 800822a:	b118      	cbz	r0, 8008234 <_vfiprintf_r+0x18>
 800822c:	6a03      	ldr	r3, [r0, #32]
 800822e:	b90b      	cbnz	r3, 8008234 <_vfiprintf_r+0x18>
 8008230:	f7ff fb40 	bl	80078b4 <__sinit>
 8008234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008236:	07d9      	lsls	r1, r3, #31
 8008238:	d405      	bmi.n	8008246 <_vfiprintf_r+0x2a>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	059a      	lsls	r2, r3, #22
 800823e:	d402      	bmi.n	8008246 <_vfiprintf_r+0x2a>
 8008240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008242:	f7ff fd64 	bl	8007d0e <__retarget_lock_acquire_recursive>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	071b      	lsls	r3, r3, #28
 800824a:	d501      	bpl.n	8008250 <_vfiprintf_r+0x34>
 800824c:	692b      	ldr	r3, [r5, #16]
 800824e:	b99b      	cbnz	r3, 8008278 <_vfiprintf_r+0x5c>
 8008250:	4629      	mov	r1, r5
 8008252:	4630      	mov	r0, r6
 8008254:	f7ff fc8c 	bl	8007b70 <__swsetup_r>
 8008258:	b170      	cbz	r0, 8008278 <_vfiprintf_r+0x5c>
 800825a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800825c:	07dc      	lsls	r4, r3, #31
 800825e:	d504      	bpl.n	800826a <_vfiprintf_r+0x4e>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	b01d      	add	sp, #116	@ 0x74
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	0598      	lsls	r0, r3, #22
 800826e:	d4f7      	bmi.n	8008260 <_vfiprintf_r+0x44>
 8008270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008272:	f7ff fd4d 	bl	8007d10 <__retarget_lock_release_recursive>
 8008276:	e7f3      	b.n	8008260 <_vfiprintf_r+0x44>
 8008278:	2300      	movs	r3, #0
 800827a:	9309      	str	r3, [sp, #36]	@ 0x24
 800827c:	2320      	movs	r3, #32
 800827e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008282:	2330      	movs	r3, #48	@ 0x30
 8008284:	f04f 0901 	mov.w	r9, #1
 8008288:	f8cd 800c 	str.w	r8, [sp, #12]
 800828c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008438 <_vfiprintf_r+0x21c>
 8008290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008294:	4623      	mov	r3, r4
 8008296:	469a      	mov	sl, r3
 8008298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800829c:	b10a      	cbz	r2, 80082a2 <_vfiprintf_r+0x86>
 800829e:	2a25      	cmp	r2, #37	@ 0x25
 80082a0:	d1f9      	bne.n	8008296 <_vfiprintf_r+0x7a>
 80082a2:	ebba 0b04 	subs.w	fp, sl, r4
 80082a6:	d00b      	beq.n	80082c0 <_vfiprintf_r+0xa4>
 80082a8:	465b      	mov	r3, fp
 80082aa:	4622      	mov	r2, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ffa1 	bl	80081f6 <__sfputs_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	f000 80a7 	beq.w	8008408 <_vfiprintf_r+0x1ec>
 80082ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082bc:	445a      	add	r2, fp
 80082be:	9209      	str	r2, [sp, #36]	@ 0x24
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 809f 	beq.w	8008408 <_vfiprintf_r+0x1ec>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295
 80082d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d4:	f10a 0a01 	add.w	sl, sl, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80082e2:	4654      	mov	r4, sl
 80082e4:	2205      	movs	r2, #5
 80082e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ea:	4853      	ldr	r0, [pc, #332]	@ (8008438 <_vfiprintf_r+0x21c>)
 80082ec:	f000 fb94 	bl	8008a18 <memchr>
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	b9d8      	cbnz	r0, 800832c <_vfiprintf_r+0x110>
 80082f4:	06d1      	lsls	r1, r2, #27
 80082f6:	bf44      	itt	mi
 80082f8:	2320      	movmi	r3, #32
 80082fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082fe:	0713      	lsls	r3, r2, #28
 8008300:	bf44      	itt	mi
 8008302:	232b      	movmi	r3, #43	@ 0x2b
 8008304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008308:	f89a 3000 	ldrb.w	r3, [sl]
 800830c:	2b2a      	cmp	r3, #42	@ 0x2a
 800830e:	d015      	beq.n	800833c <_vfiprintf_r+0x120>
 8008310:	4654      	mov	r4, sl
 8008312:	2000      	movs	r0, #0
 8008314:	f04f 0c0a 	mov.w	ip, #10
 8008318:	9a07      	ldr	r2, [sp, #28]
 800831a:	4621      	mov	r1, r4
 800831c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008320:	3b30      	subs	r3, #48	@ 0x30
 8008322:	2b09      	cmp	r3, #9
 8008324:	d94b      	bls.n	80083be <_vfiprintf_r+0x1a2>
 8008326:	b1b0      	cbz	r0, 8008356 <_vfiprintf_r+0x13a>
 8008328:	9207      	str	r2, [sp, #28]
 800832a:	e014      	b.n	8008356 <_vfiprintf_r+0x13a>
 800832c:	eba0 0308 	sub.w	r3, r0, r8
 8008330:	fa09 f303 	lsl.w	r3, r9, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	46a2      	mov	sl, r4
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	e7d2      	b.n	80082e2 <_vfiprintf_r+0xc6>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d19      	adds	r1, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9103      	str	r1, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfbb      	ittet	lt
 8008348:	425b      	neglt	r3, r3
 800834a:	f042 0202 	orrlt.w	r2, r2, #2
 800834e:	9307      	strge	r3, [sp, #28]
 8008350:	9307      	strlt	r3, [sp, #28]
 8008352:	bfb8      	it	lt
 8008354:	9204      	strlt	r2, [sp, #16]
 8008356:	7823      	ldrb	r3, [r4, #0]
 8008358:	2b2e      	cmp	r3, #46	@ 0x2e
 800835a:	d10a      	bne.n	8008372 <_vfiprintf_r+0x156>
 800835c:	7863      	ldrb	r3, [r4, #1]
 800835e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008360:	d132      	bne.n	80083c8 <_vfiprintf_r+0x1ac>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	3402      	adds	r4, #2
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	9203      	str	r2, [sp, #12]
 800836c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800843c <_vfiprintf_r+0x220>
 8008376:	2203      	movs	r2, #3
 8008378:	4650      	mov	r0, sl
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	f000 fb4c 	bl	8008a18 <memchr>
 8008380:	b138      	cbz	r0, 8008392 <_vfiprintf_r+0x176>
 8008382:	2240      	movs	r2, #64	@ 0x40
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	eba0 000a 	sub.w	r0, r0, sl
 800838a:	4082      	lsls	r2, r0
 800838c:	4313      	orrs	r3, r2
 800838e:	3401      	adds	r4, #1
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008396:	2206      	movs	r2, #6
 8008398:	4829      	ldr	r0, [pc, #164]	@ (8008440 <_vfiprintf_r+0x224>)
 800839a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800839e:	f000 fb3b 	bl	8008a18 <memchr>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d03f      	beq.n	8008426 <_vfiprintf_r+0x20a>
 80083a6:	4b27      	ldr	r3, [pc, #156]	@ (8008444 <_vfiprintf_r+0x228>)
 80083a8:	bb1b      	cbnz	r3, 80083f2 <_vfiprintf_r+0x1d6>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	3307      	adds	r3, #7
 80083ae:	f023 0307 	bic.w	r3, r3, #7
 80083b2:	3308      	adds	r3, #8
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	443b      	add	r3, r7
 80083ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80083bc:	e76a      	b.n	8008294 <_vfiprintf_r+0x78>
 80083be:	460c      	mov	r4, r1
 80083c0:	2001      	movs	r0, #1
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	e7a8      	b.n	800831a <_vfiprintf_r+0xfe>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f04f 0c0a 	mov.w	ip, #10
 80083ce:	4619      	mov	r1, r3
 80083d0:	3401      	adds	r4, #1
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083da:	3a30      	subs	r2, #48	@ 0x30
 80083dc:	2a09      	cmp	r2, #9
 80083de:	d903      	bls.n	80083e8 <_vfiprintf_r+0x1cc>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c6      	beq.n	8008372 <_vfiprintf_r+0x156>
 80083e4:	9105      	str	r1, [sp, #20]
 80083e6:	e7c4      	b.n	8008372 <_vfiprintf_r+0x156>
 80083e8:	4604      	mov	r4, r0
 80083ea:	2301      	movs	r3, #1
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	e7f0      	b.n	80083d4 <_vfiprintf_r+0x1b8>
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	462a      	mov	r2, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	4b13      	ldr	r3, [pc, #76]	@ (8008448 <_vfiprintf_r+0x22c>)
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	f3af 8000 	nop.w
 8008402:	4607      	mov	r7, r0
 8008404:	1c78      	adds	r0, r7, #1
 8008406:	d1d6      	bne.n	80083b6 <_vfiprintf_r+0x19a>
 8008408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	d405      	bmi.n	800841a <_vfiprintf_r+0x1fe>
 800840e:	89ab      	ldrh	r3, [r5, #12]
 8008410:	059a      	lsls	r2, r3, #22
 8008412:	d402      	bmi.n	800841a <_vfiprintf_r+0x1fe>
 8008414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008416:	f7ff fc7b 	bl	8007d10 <__retarget_lock_release_recursive>
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	065b      	lsls	r3, r3, #25
 800841e:	f53f af1f 	bmi.w	8008260 <_vfiprintf_r+0x44>
 8008422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008424:	e71e      	b.n	8008264 <_vfiprintf_r+0x48>
 8008426:	ab03      	add	r3, sp, #12
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	462a      	mov	r2, r5
 800842c:	4630      	mov	r0, r6
 800842e:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <_vfiprintf_r+0x22c>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	f000 f87d 	bl	8008530 <_printf_i>
 8008436:	e7e4      	b.n	8008402 <_vfiprintf_r+0x1e6>
 8008438:	08009586 	.word	0x08009586
 800843c:	0800958c 	.word	0x0800958c
 8008440:	08009590 	.word	0x08009590
 8008444:	00000000 	.word	0x00000000
 8008448:	080081f7 	.word	0x080081f7

0800844c <_printf_common>:
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	4616      	mov	r6, r2
 8008452:	4698      	mov	r8, r3
 8008454:	688a      	ldr	r2, [r1, #8]
 8008456:	690b      	ldr	r3, [r1, #16]
 8008458:	4607      	mov	r7, r0
 800845a:	4293      	cmp	r3, r2
 800845c:	bfb8      	it	lt
 800845e:	4613      	movlt	r3, r2
 8008460:	6033      	str	r3, [r6, #0]
 8008462:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008466:	460c      	mov	r4, r1
 8008468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800846c:	b10a      	cbz	r2, 8008472 <_printf_common+0x26>
 800846e:	3301      	adds	r3, #1
 8008470:	6033      	str	r3, [r6, #0]
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	0699      	lsls	r1, r3, #26
 8008476:	bf42      	ittt	mi
 8008478:	6833      	ldrmi	r3, [r6, #0]
 800847a:	3302      	addmi	r3, #2
 800847c:	6033      	strmi	r3, [r6, #0]
 800847e:	6825      	ldr	r5, [r4, #0]
 8008480:	f015 0506 	ands.w	r5, r5, #6
 8008484:	d106      	bne.n	8008494 <_printf_common+0x48>
 8008486:	f104 0a19 	add.w	sl, r4, #25
 800848a:	68e3      	ldr	r3, [r4, #12]
 800848c:	6832      	ldr	r2, [r6, #0]
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	42ab      	cmp	r3, r5
 8008492:	dc2b      	bgt.n	80084ec <_printf_common+0xa0>
 8008494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	3b00      	subs	r3, #0
 800849c:	bf18      	it	ne
 800849e:	2301      	movne	r3, #1
 80084a0:	0692      	lsls	r2, r2, #26
 80084a2:	d430      	bmi.n	8008506 <_printf_common+0xba>
 80084a4:	4641      	mov	r1, r8
 80084a6:	4638      	mov	r0, r7
 80084a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084ac:	47c8      	blx	r9
 80084ae:	3001      	adds	r0, #1
 80084b0:	d023      	beq.n	80084fa <_printf_common+0xae>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	6922      	ldr	r2, [r4, #16]
 80084b6:	f003 0306 	and.w	r3, r3, #6
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	bf14      	ite	ne
 80084be:	2500      	movne	r5, #0
 80084c0:	6833      	ldreq	r3, [r6, #0]
 80084c2:	f04f 0600 	mov.w	r6, #0
 80084c6:	bf08      	it	eq
 80084c8:	68e5      	ldreq	r5, [r4, #12]
 80084ca:	f104 041a 	add.w	r4, r4, #26
 80084ce:	bf08      	it	eq
 80084d0:	1aed      	subeq	r5, r5, r3
 80084d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80084d6:	bf08      	it	eq
 80084d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084dc:	4293      	cmp	r3, r2
 80084de:	bfc4      	itt	gt
 80084e0:	1a9b      	subgt	r3, r3, r2
 80084e2:	18ed      	addgt	r5, r5, r3
 80084e4:	42b5      	cmp	r5, r6
 80084e6:	d11a      	bne.n	800851e <_printf_common+0xd2>
 80084e8:	2000      	movs	r0, #0
 80084ea:	e008      	b.n	80084fe <_printf_common+0xb2>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4652      	mov	r2, sl
 80084f0:	4641      	mov	r1, r8
 80084f2:	4638      	mov	r0, r7
 80084f4:	47c8      	blx	r9
 80084f6:	3001      	adds	r0, #1
 80084f8:	d103      	bne.n	8008502 <_printf_common+0xb6>
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008502:	3501      	adds	r5, #1
 8008504:	e7c1      	b.n	800848a <_printf_common+0x3e>
 8008506:	2030      	movs	r0, #48	@ 0x30
 8008508:	18e1      	adds	r1, r4, r3
 800850a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008514:	4422      	add	r2, r4
 8008516:	3302      	adds	r3, #2
 8008518:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800851c:	e7c2      	b.n	80084a4 <_printf_common+0x58>
 800851e:	2301      	movs	r3, #1
 8008520:	4622      	mov	r2, r4
 8008522:	4641      	mov	r1, r8
 8008524:	4638      	mov	r0, r7
 8008526:	47c8      	blx	r9
 8008528:	3001      	adds	r0, #1
 800852a:	d0e6      	beq.n	80084fa <_printf_common+0xae>
 800852c:	3601      	adds	r6, #1
 800852e:	e7d9      	b.n	80084e4 <_printf_common+0x98>

08008530 <_printf_i>:
 8008530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	7e0f      	ldrb	r7, [r1, #24]
 8008536:	4691      	mov	r9, r2
 8008538:	2f78      	cmp	r7, #120	@ 0x78
 800853a:	4680      	mov	r8, r0
 800853c:	460c      	mov	r4, r1
 800853e:	469a      	mov	sl, r3
 8008540:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008546:	d807      	bhi.n	8008558 <_printf_i+0x28>
 8008548:	2f62      	cmp	r7, #98	@ 0x62
 800854a:	d80a      	bhi.n	8008562 <_printf_i+0x32>
 800854c:	2f00      	cmp	r7, #0
 800854e:	f000 80d1 	beq.w	80086f4 <_printf_i+0x1c4>
 8008552:	2f58      	cmp	r7, #88	@ 0x58
 8008554:	f000 80b8 	beq.w	80086c8 <_printf_i+0x198>
 8008558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800855c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008560:	e03a      	b.n	80085d8 <_printf_i+0xa8>
 8008562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008566:	2b15      	cmp	r3, #21
 8008568:	d8f6      	bhi.n	8008558 <_printf_i+0x28>
 800856a:	a101      	add	r1, pc, #4	@ (adr r1, 8008570 <_printf_i+0x40>)
 800856c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008570:	080085c9 	.word	0x080085c9
 8008574:	080085dd 	.word	0x080085dd
 8008578:	08008559 	.word	0x08008559
 800857c:	08008559 	.word	0x08008559
 8008580:	08008559 	.word	0x08008559
 8008584:	08008559 	.word	0x08008559
 8008588:	080085dd 	.word	0x080085dd
 800858c:	08008559 	.word	0x08008559
 8008590:	08008559 	.word	0x08008559
 8008594:	08008559 	.word	0x08008559
 8008598:	08008559 	.word	0x08008559
 800859c:	080086db 	.word	0x080086db
 80085a0:	08008607 	.word	0x08008607
 80085a4:	08008695 	.word	0x08008695
 80085a8:	08008559 	.word	0x08008559
 80085ac:	08008559 	.word	0x08008559
 80085b0:	080086fd 	.word	0x080086fd
 80085b4:	08008559 	.word	0x08008559
 80085b8:	08008607 	.word	0x08008607
 80085bc:	08008559 	.word	0x08008559
 80085c0:	08008559 	.word	0x08008559
 80085c4:	0800869d 	.word	0x0800869d
 80085c8:	6833      	ldr	r3, [r6, #0]
 80085ca:	1d1a      	adds	r2, r3, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6032      	str	r2, [r6, #0]
 80085d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085d8:	2301      	movs	r3, #1
 80085da:	e09c      	b.n	8008716 <_printf_i+0x1e6>
 80085dc:	6833      	ldr	r3, [r6, #0]
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	1d19      	adds	r1, r3, #4
 80085e2:	6031      	str	r1, [r6, #0]
 80085e4:	0606      	lsls	r6, r0, #24
 80085e6:	d501      	bpl.n	80085ec <_printf_i+0xbc>
 80085e8:	681d      	ldr	r5, [r3, #0]
 80085ea:	e003      	b.n	80085f4 <_printf_i+0xc4>
 80085ec:	0645      	lsls	r5, r0, #25
 80085ee:	d5fb      	bpl.n	80085e8 <_printf_i+0xb8>
 80085f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085f4:	2d00      	cmp	r5, #0
 80085f6:	da03      	bge.n	8008600 <_printf_i+0xd0>
 80085f8:	232d      	movs	r3, #45	@ 0x2d
 80085fa:	426d      	negs	r5, r5
 80085fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008600:	230a      	movs	r3, #10
 8008602:	4858      	ldr	r0, [pc, #352]	@ (8008764 <_printf_i+0x234>)
 8008604:	e011      	b.n	800862a <_printf_i+0xfa>
 8008606:	6821      	ldr	r1, [r4, #0]
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	0608      	lsls	r0, r1, #24
 800860c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008610:	d402      	bmi.n	8008618 <_printf_i+0xe8>
 8008612:	0649      	lsls	r1, r1, #25
 8008614:	bf48      	it	mi
 8008616:	b2ad      	uxthmi	r5, r5
 8008618:	2f6f      	cmp	r7, #111	@ 0x6f
 800861a:	6033      	str	r3, [r6, #0]
 800861c:	bf14      	ite	ne
 800861e:	230a      	movne	r3, #10
 8008620:	2308      	moveq	r3, #8
 8008622:	4850      	ldr	r0, [pc, #320]	@ (8008764 <_printf_i+0x234>)
 8008624:	2100      	movs	r1, #0
 8008626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800862a:	6866      	ldr	r6, [r4, #4]
 800862c:	2e00      	cmp	r6, #0
 800862e:	60a6      	str	r6, [r4, #8]
 8008630:	db05      	blt.n	800863e <_printf_i+0x10e>
 8008632:	6821      	ldr	r1, [r4, #0]
 8008634:	432e      	orrs	r6, r5
 8008636:	f021 0104 	bic.w	r1, r1, #4
 800863a:	6021      	str	r1, [r4, #0]
 800863c:	d04b      	beq.n	80086d6 <_printf_i+0x1a6>
 800863e:	4616      	mov	r6, r2
 8008640:	fbb5 f1f3 	udiv	r1, r5, r3
 8008644:	fb03 5711 	mls	r7, r3, r1, r5
 8008648:	5dc7      	ldrb	r7, [r0, r7]
 800864a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800864e:	462f      	mov	r7, r5
 8008650:	42bb      	cmp	r3, r7
 8008652:	460d      	mov	r5, r1
 8008654:	d9f4      	bls.n	8008640 <_printf_i+0x110>
 8008656:	2b08      	cmp	r3, #8
 8008658:	d10b      	bne.n	8008672 <_printf_i+0x142>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	07df      	lsls	r7, r3, #31
 800865e:	d508      	bpl.n	8008672 <_printf_i+0x142>
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	6861      	ldr	r1, [r4, #4]
 8008664:	4299      	cmp	r1, r3
 8008666:	bfde      	ittt	le
 8008668:	2330      	movle	r3, #48	@ 0x30
 800866a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800866e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008672:	1b92      	subs	r2, r2, r6
 8008674:	6122      	str	r2, [r4, #16]
 8008676:	464b      	mov	r3, r9
 8008678:	4621      	mov	r1, r4
 800867a:	4640      	mov	r0, r8
 800867c:	f8cd a000 	str.w	sl, [sp]
 8008680:	aa03      	add	r2, sp, #12
 8008682:	f7ff fee3 	bl	800844c <_printf_common>
 8008686:	3001      	adds	r0, #1
 8008688:	d14a      	bne.n	8008720 <_printf_i+0x1f0>
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	b004      	add	sp, #16
 8008690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	f043 0320 	orr.w	r3, r3, #32
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	2778      	movs	r7, #120	@ 0x78
 800869e:	4832      	ldr	r0, [pc, #200]	@ (8008768 <_printf_i+0x238>)
 80086a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	6831      	ldr	r1, [r6, #0]
 80086a8:	061f      	lsls	r7, r3, #24
 80086aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80086ae:	d402      	bmi.n	80086b6 <_printf_i+0x186>
 80086b0:	065f      	lsls	r7, r3, #25
 80086b2:	bf48      	it	mi
 80086b4:	b2ad      	uxthmi	r5, r5
 80086b6:	6031      	str	r1, [r6, #0]
 80086b8:	07d9      	lsls	r1, r3, #31
 80086ba:	bf44      	itt	mi
 80086bc:	f043 0320 	orrmi.w	r3, r3, #32
 80086c0:	6023      	strmi	r3, [r4, #0]
 80086c2:	b11d      	cbz	r5, 80086cc <_printf_i+0x19c>
 80086c4:	2310      	movs	r3, #16
 80086c6:	e7ad      	b.n	8008624 <_printf_i+0xf4>
 80086c8:	4826      	ldr	r0, [pc, #152]	@ (8008764 <_printf_i+0x234>)
 80086ca:	e7e9      	b.n	80086a0 <_printf_i+0x170>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	f023 0320 	bic.w	r3, r3, #32
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	e7f6      	b.n	80086c4 <_printf_i+0x194>
 80086d6:	4616      	mov	r6, r2
 80086d8:	e7bd      	b.n	8008656 <_printf_i+0x126>
 80086da:	6833      	ldr	r3, [r6, #0]
 80086dc:	6825      	ldr	r5, [r4, #0]
 80086de:	1d18      	adds	r0, r3, #4
 80086e0:	6961      	ldr	r1, [r4, #20]
 80086e2:	6030      	str	r0, [r6, #0]
 80086e4:	062e      	lsls	r6, r5, #24
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	d501      	bpl.n	80086ee <_printf_i+0x1be>
 80086ea:	6019      	str	r1, [r3, #0]
 80086ec:	e002      	b.n	80086f4 <_printf_i+0x1c4>
 80086ee:	0668      	lsls	r0, r5, #25
 80086f0:	d5fb      	bpl.n	80086ea <_printf_i+0x1ba>
 80086f2:	8019      	strh	r1, [r3, #0]
 80086f4:	2300      	movs	r3, #0
 80086f6:	4616      	mov	r6, r2
 80086f8:	6123      	str	r3, [r4, #16]
 80086fa:	e7bc      	b.n	8008676 <_printf_i+0x146>
 80086fc:	6833      	ldr	r3, [r6, #0]
 80086fe:	2100      	movs	r1, #0
 8008700:	1d1a      	adds	r2, r3, #4
 8008702:	6032      	str	r2, [r6, #0]
 8008704:	681e      	ldr	r6, [r3, #0]
 8008706:	6862      	ldr	r2, [r4, #4]
 8008708:	4630      	mov	r0, r6
 800870a:	f000 f985 	bl	8008a18 <memchr>
 800870e:	b108      	cbz	r0, 8008714 <_printf_i+0x1e4>
 8008710:	1b80      	subs	r0, r0, r6
 8008712:	6060      	str	r0, [r4, #4]
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	6123      	str	r3, [r4, #16]
 8008718:	2300      	movs	r3, #0
 800871a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800871e:	e7aa      	b.n	8008676 <_printf_i+0x146>
 8008720:	4632      	mov	r2, r6
 8008722:	4649      	mov	r1, r9
 8008724:	4640      	mov	r0, r8
 8008726:	6923      	ldr	r3, [r4, #16]
 8008728:	47d0      	blx	sl
 800872a:	3001      	adds	r0, #1
 800872c:	d0ad      	beq.n	800868a <_printf_i+0x15a>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	079b      	lsls	r3, r3, #30
 8008732:	d413      	bmi.n	800875c <_printf_i+0x22c>
 8008734:	68e0      	ldr	r0, [r4, #12]
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	4298      	cmp	r0, r3
 800873a:	bfb8      	it	lt
 800873c:	4618      	movlt	r0, r3
 800873e:	e7a6      	b.n	800868e <_printf_i+0x15e>
 8008740:	2301      	movs	r3, #1
 8008742:	4632      	mov	r2, r6
 8008744:	4649      	mov	r1, r9
 8008746:	4640      	mov	r0, r8
 8008748:	47d0      	blx	sl
 800874a:	3001      	adds	r0, #1
 800874c:	d09d      	beq.n	800868a <_printf_i+0x15a>
 800874e:	3501      	adds	r5, #1
 8008750:	68e3      	ldr	r3, [r4, #12]
 8008752:	9903      	ldr	r1, [sp, #12]
 8008754:	1a5b      	subs	r3, r3, r1
 8008756:	42ab      	cmp	r3, r5
 8008758:	dcf2      	bgt.n	8008740 <_printf_i+0x210>
 800875a:	e7eb      	b.n	8008734 <_printf_i+0x204>
 800875c:	2500      	movs	r5, #0
 800875e:	f104 0619 	add.w	r6, r4, #25
 8008762:	e7f5      	b.n	8008750 <_printf_i+0x220>
 8008764:	08009597 	.word	0x08009597
 8008768:	080095a8 	.word	0x080095a8

0800876c <__sflush_r>:
 800876c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	0716      	lsls	r6, r2, #28
 8008774:	4605      	mov	r5, r0
 8008776:	460c      	mov	r4, r1
 8008778:	d454      	bmi.n	8008824 <__sflush_r+0xb8>
 800877a:	684b      	ldr	r3, [r1, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dc02      	bgt.n	8008786 <__sflush_r+0x1a>
 8008780:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd48      	ble.n	8008818 <__sflush_r+0xac>
 8008786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008788:	2e00      	cmp	r6, #0
 800878a:	d045      	beq.n	8008818 <__sflush_r+0xac>
 800878c:	2300      	movs	r3, #0
 800878e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008792:	682f      	ldr	r7, [r5, #0]
 8008794:	6a21      	ldr	r1, [r4, #32]
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	d030      	beq.n	80087fc <__sflush_r+0x90>
 800879a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	0759      	lsls	r1, r3, #29
 80087a0:	d505      	bpl.n	80087ae <__sflush_r+0x42>
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087a8:	b10b      	cbz	r3, 80087ae <__sflush_r+0x42>
 80087aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087ac:	1ad2      	subs	r2, r2, r3
 80087ae:	2300      	movs	r3, #0
 80087b0:	4628      	mov	r0, r5
 80087b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087b4:	6a21      	ldr	r1, [r4, #32]
 80087b6:	47b0      	blx	r6
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	d106      	bne.n	80087cc <__sflush_r+0x60>
 80087be:	6829      	ldr	r1, [r5, #0]
 80087c0:	291d      	cmp	r1, #29
 80087c2:	d82b      	bhi.n	800881c <__sflush_r+0xb0>
 80087c4:	4a28      	ldr	r2, [pc, #160]	@ (8008868 <__sflush_r+0xfc>)
 80087c6:	40ca      	lsrs	r2, r1
 80087c8:	07d6      	lsls	r6, r2, #31
 80087ca:	d527      	bpl.n	800881c <__sflush_r+0xb0>
 80087cc:	2200      	movs	r2, #0
 80087ce:	6062      	str	r2, [r4, #4]
 80087d0:	6922      	ldr	r2, [r4, #16]
 80087d2:	04d9      	lsls	r1, r3, #19
 80087d4:	6022      	str	r2, [r4, #0]
 80087d6:	d504      	bpl.n	80087e2 <__sflush_r+0x76>
 80087d8:	1c42      	adds	r2, r0, #1
 80087da:	d101      	bne.n	80087e0 <__sflush_r+0x74>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b903      	cbnz	r3, 80087e2 <__sflush_r+0x76>
 80087e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80087e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087e4:	602f      	str	r7, [r5, #0]
 80087e6:	b1b9      	cbz	r1, 8008818 <__sflush_r+0xac>
 80087e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087ec:	4299      	cmp	r1, r3
 80087ee:	d002      	beq.n	80087f6 <__sflush_r+0x8a>
 80087f0:	4628      	mov	r0, r5
 80087f2:	f7ff fa9d 	bl	8007d30 <_free_r>
 80087f6:	2300      	movs	r3, #0
 80087f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80087fa:	e00d      	b.n	8008818 <__sflush_r+0xac>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4628      	mov	r0, r5
 8008800:	47b0      	blx	r6
 8008802:	4602      	mov	r2, r0
 8008804:	1c50      	adds	r0, r2, #1
 8008806:	d1c9      	bne.n	800879c <__sflush_r+0x30>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0c6      	beq.n	800879c <__sflush_r+0x30>
 800880e:	2b1d      	cmp	r3, #29
 8008810:	d001      	beq.n	8008816 <__sflush_r+0xaa>
 8008812:	2b16      	cmp	r3, #22
 8008814:	d11d      	bne.n	8008852 <__sflush_r+0xe6>
 8008816:	602f      	str	r7, [r5, #0]
 8008818:	2000      	movs	r0, #0
 800881a:	e021      	b.n	8008860 <__sflush_r+0xf4>
 800881c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008820:	b21b      	sxth	r3, r3
 8008822:	e01a      	b.n	800885a <__sflush_r+0xee>
 8008824:	690f      	ldr	r7, [r1, #16]
 8008826:	2f00      	cmp	r7, #0
 8008828:	d0f6      	beq.n	8008818 <__sflush_r+0xac>
 800882a:	0793      	lsls	r3, r2, #30
 800882c:	bf18      	it	ne
 800882e:	2300      	movne	r3, #0
 8008830:	680e      	ldr	r6, [r1, #0]
 8008832:	bf08      	it	eq
 8008834:	694b      	ldreq	r3, [r1, #20]
 8008836:	1bf6      	subs	r6, r6, r7
 8008838:	600f      	str	r7, [r1, #0]
 800883a:	608b      	str	r3, [r1, #8]
 800883c:	2e00      	cmp	r6, #0
 800883e:	ddeb      	ble.n	8008818 <__sflush_r+0xac>
 8008840:	4633      	mov	r3, r6
 8008842:	463a      	mov	r2, r7
 8008844:	4628      	mov	r0, r5
 8008846:	6a21      	ldr	r1, [r4, #32]
 8008848:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800884c:	47e0      	blx	ip
 800884e:	2800      	cmp	r0, #0
 8008850:	dc07      	bgt.n	8008862 <__sflush_r+0xf6>
 8008852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800885a:	f04f 30ff 	mov.w	r0, #4294967295
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008862:	4407      	add	r7, r0
 8008864:	1a36      	subs	r6, r6, r0
 8008866:	e7e9      	b.n	800883c <__sflush_r+0xd0>
 8008868:	20400001 	.word	0x20400001

0800886c <_fflush_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	4605      	mov	r5, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b913      	cbnz	r3, 800887c <_fflush_r+0x10>
 8008876:	2500      	movs	r5, #0
 8008878:	4628      	mov	r0, r5
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	b118      	cbz	r0, 8008886 <_fflush_r+0x1a>
 800887e:	6a03      	ldr	r3, [r0, #32]
 8008880:	b90b      	cbnz	r3, 8008886 <_fflush_r+0x1a>
 8008882:	f7ff f817 	bl	80078b4 <__sinit>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0f3      	beq.n	8008876 <_fflush_r+0xa>
 800888e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008890:	07d0      	lsls	r0, r2, #31
 8008892:	d404      	bmi.n	800889e <_fflush_r+0x32>
 8008894:	0599      	lsls	r1, r3, #22
 8008896:	d402      	bmi.n	800889e <_fflush_r+0x32>
 8008898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800889a:	f7ff fa38 	bl	8007d0e <__retarget_lock_acquire_recursive>
 800889e:	4628      	mov	r0, r5
 80088a0:	4621      	mov	r1, r4
 80088a2:	f7ff ff63 	bl	800876c <__sflush_r>
 80088a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a8:	4605      	mov	r5, r0
 80088aa:	07da      	lsls	r2, r3, #31
 80088ac:	d4e4      	bmi.n	8008878 <_fflush_r+0xc>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	059b      	lsls	r3, r3, #22
 80088b2:	d4e1      	bmi.n	8008878 <_fflush_r+0xc>
 80088b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088b6:	f7ff fa2b 	bl	8007d10 <__retarget_lock_release_recursive>
 80088ba:	e7dd      	b.n	8008878 <_fflush_r+0xc>

080088bc <__swhatbuf_r>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	460c      	mov	r4, r1
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	4615      	mov	r5, r2
 80088c6:	2900      	cmp	r1, #0
 80088c8:	461e      	mov	r6, r3
 80088ca:	b096      	sub	sp, #88	@ 0x58
 80088cc:	da0c      	bge.n	80088e8 <__swhatbuf_r+0x2c>
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	2100      	movs	r1, #0
 80088d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088d6:	bf14      	ite	ne
 80088d8:	2340      	movne	r3, #64	@ 0x40
 80088da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088de:	2000      	movs	r0, #0
 80088e0:	6031      	str	r1, [r6, #0]
 80088e2:	602b      	str	r3, [r5, #0]
 80088e4:	b016      	add	sp, #88	@ 0x58
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	466a      	mov	r2, sp
 80088ea:	f000 f863 	bl	80089b4 <_fstat_r>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	dbed      	blt.n	80088ce <__swhatbuf_r+0x12>
 80088f2:	9901      	ldr	r1, [sp, #4]
 80088f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088fc:	4259      	negs	r1, r3
 80088fe:	4159      	adcs	r1, r3
 8008900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008904:	e7eb      	b.n	80088de <__swhatbuf_r+0x22>

08008906 <__smakebuf_r>:
 8008906:	898b      	ldrh	r3, [r1, #12]
 8008908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800890a:	079d      	lsls	r5, r3, #30
 800890c:	4606      	mov	r6, r0
 800890e:	460c      	mov	r4, r1
 8008910:	d507      	bpl.n	8008922 <__smakebuf_r+0x1c>
 8008912:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	2301      	movs	r3, #1
 800891c:	6163      	str	r3, [r4, #20]
 800891e:	b003      	add	sp, #12
 8008920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008922:	466a      	mov	r2, sp
 8008924:	ab01      	add	r3, sp, #4
 8008926:	f7ff ffc9 	bl	80088bc <__swhatbuf_r>
 800892a:	9f00      	ldr	r7, [sp, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	4639      	mov	r1, r7
 8008930:	4630      	mov	r0, r6
 8008932:	f7ff fa67 	bl	8007e04 <_malloc_r>
 8008936:	b948      	cbnz	r0, 800894c <__smakebuf_r+0x46>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	059a      	lsls	r2, r3, #22
 800893e:	d4ee      	bmi.n	800891e <__smakebuf_r+0x18>
 8008940:	f023 0303 	bic.w	r3, r3, #3
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e7e2      	b.n	8008912 <__smakebuf_r+0xc>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	6020      	str	r0, [r4, #0]
 800895c:	b15b      	cbz	r3, 8008976 <__smakebuf_r+0x70>
 800895e:	4630      	mov	r0, r6
 8008960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008964:	f000 f838 	bl	80089d8 <_isatty_r>
 8008968:	b128      	cbz	r0, 8008976 <__smakebuf_r+0x70>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	431d      	orrs	r5, r3
 800897a:	81a5      	strh	r5, [r4, #12]
 800897c:	e7cf      	b.n	800891e <__smakebuf_r+0x18>

0800897e <memmove>:
 800897e:	4288      	cmp	r0, r1
 8008980:	b510      	push	{r4, lr}
 8008982:	eb01 0402 	add.w	r4, r1, r2
 8008986:	d902      	bls.n	800898e <memmove+0x10>
 8008988:	4284      	cmp	r4, r0
 800898a:	4623      	mov	r3, r4
 800898c:	d807      	bhi.n	800899e <memmove+0x20>
 800898e:	1e43      	subs	r3, r0, #1
 8008990:	42a1      	cmp	r1, r4
 8008992:	d008      	beq.n	80089a6 <memmove+0x28>
 8008994:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008998:	f803 2f01 	strb.w	r2, [r3, #1]!
 800899c:	e7f8      	b.n	8008990 <memmove+0x12>
 800899e:	4601      	mov	r1, r0
 80089a0:	4402      	add	r2, r0
 80089a2:	428a      	cmp	r2, r1
 80089a4:	d100      	bne.n	80089a8 <memmove+0x2a>
 80089a6:	bd10      	pop	{r4, pc}
 80089a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089b0:	e7f7      	b.n	80089a2 <memmove+0x24>
	...

080089b4 <_fstat_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	2300      	movs	r3, #0
 80089b8:	4d06      	ldr	r5, [pc, #24]	@ (80089d4 <_fstat_r+0x20>)
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	4611      	mov	r1, r2
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f7f9 ff2b 	bl	800281c <_fstat>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	d102      	bne.n	80089d0 <_fstat_r+0x1c>
 80089ca:	682b      	ldr	r3, [r5, #0]
 80089cc:	b103      	cbz	r3, 80089d0 <_fstat_r+0x1c>
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop
 80089d4:	20000428 	.word	0x20000428

080089d8 <_isatty_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	2300      	movs	r3, #0
 80089dc:	4d05      	ldr	r5, [pc, #20]	@ (80089f4 <_isatty_r+0x1c>)
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 ff29 	bl	800283a <_isatty>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_isatty_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_isatty_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000428 	.word	0x20000428

080089f8 <_sbrk_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	2300      	movs	r3, #0
 80089fc:	4d05      	ldr	r5, [pc, #20]	@ (8008a14 <_sbrk_r+0x1c>)
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	602b      	str	r3, [r5, #0]
 8008a04:	f7f9 ff30 	bl	8002868 <_sbrk>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_sbrk_r+0x1a>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_sbrk_r+0x1a>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20000428 	.word	0x20000428

08008a18 <memchr>:
 8008a18:	4603      	mov	r3, r0
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	b2c9      	uxtb	r1, r1
 8008a1e:	4402      	add	r2, r0
 8008a20:	4293      	cmp	r3, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	d101      	bne.n	8008a2a <memchr+0x12>
 8008a26:	2000      	movs	r0, #0
 8008a28:	e003      	b.n	8008a32 <memchr+0x1a>
 8008a2a:	7804      	ldrb	r4, [r0, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	428c      	cmp	r4, r1
 8008a30:	d1f6      	bne.n	8008a20 <memchr+0x8>
 8008a32:	bd10      	pop	{r4, pc}

08008a34 <_realloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	4607      	mov	r7, r0
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	460d      	mov	r5, r1
 8008a3e:	b921      	cbnz	r1, 8008a4a <_realloc_r+0x16>
 8008a40:	4611      	mov	r1, r2
 8008a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	f7ff b9dd 	b.w	8007e04 <_malloc_r>
 8008a4a:	b92a      	cbnz	r2, 8008a58 <_realloc_r+0x24>
 8008a4c:	f7ff f970 	bl	8007d30 <_free_r>
 8008a50:	4625      	mov	r5, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	f000 f81a 	bl	8008a90 <_malloc_usable_size_r>
 8008a5c:	4284      	cmp	r4, r0
 8008a5e:	4606      	mov	r6, r0
 8008a60:	d802      	bhi.n	8008a68 <_realloc_r+0x34>
 8008a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a66:	d8f4      	bhi.n	8008a52 <_realloc_r+0x1e>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff f9ca 	bl	8007e04 <_malloc_r>
 8008a70:	4680      	mov	r8, r0
 8008a72:	b908      	cbnz	r0, 8008a78 <_realloc_r+0x44>
 8008a74:	4645      	mov	r5, r8
 8008a76:	e7ec      	b.n	8008a52 <_realloc_r+0x1e>
 8008a78:	42b4      	cmp	r4, r6
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	bf28      	it	cs
 8008a80:	4632      	movcs	r2, r6
 8008a82:	f7ff f946 	bl	8007d12 <memcpy>
 8008a86:	4629      	mov	r1, r5
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff f951 	bl	8007d30 <_free_r>
 8008a8e:	e7f1      	b.n	8008a74 <_realloc_r+0x40>

08008a90 <_malloc_usable_size_r>:
 8008a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a94:	1f18      	subs	r0, r3, #4
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbc      	itt	lt
 8008a9a:	580b      	ldrlt	r3, [r1, r0]
 8008a9c:	18c0      	addlt	r0, r0, r3
 8008a9e:	4770      	bx	lr

08008aa0 <asin>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	f000 f9bf 	bl	8008e28 <__ieee754_asin>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7f7 ffb3 	bl	8000a20 <__aeabi_dcmpun>
 8008aba:	b988      	cbnz	r0, 8008ae0 <asin+0x40>
 8008abc:	4620      	mov	r0, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f000 f9a6 	bl	8008e10 <fabs>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4b08      	ldr	r3, [pc, #32]	@ (8008ae8 <asin+0x48>)
 8008ac8:	f7f7 ffa0 	bl	8000a0c <__aeabi_dcmpgt>
 8008acc:	b140      	cbz	r0, 8008ae0 <asin+0x40>
 8008ace:	f7ff f8f3 	bl	8007cb8 <__errno>
 8008ad2:	2321      	movs	r3, #33	@ 0x21
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	4805      	ldr	r0, [pc, #20]	@ (8008aec <asin+0x4c>)
 8008ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008adc:	f000 b99c 	b.w	8008e18 <nan>
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	3ff00000 	.word	0x3ff00000
 8008aec:	0800958b 	.word	0x0800958b

08008af0 <atan>:
 8008af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	4bbc      	ldr	r3, [pc, #752]	@ (8008de8 <atan+0x2f8>)
 8008af6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008afa:	429e      	cmp	r6, r3
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	468b      	mov	fp, r1
 8008b02:	d918      	bls.n	8008b36 <atan+0x46>
 8008b04:	4bb9      	ldr	r3, [pc, #740]	@ (8008dec <atan+0x2fc>)
 8008b06:	429e      	cmp	r6, r3
 8008b08:	d801      	bhi.n	8008b0e <atan+0x1e>
 8008b0a:	d109      	bne.n	8008b20 <atan+0x30>
 8008b0c:	b140      	cbz	r0, 8008b20 <atan+0x30>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	4620      	mov	r0, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7f7 fb33 	bl	8000180 <__adddf3>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	e006      	b.n	8008b2e <atan+0x3e>
 8008b20:	f1bb 0f00 	cmp.w	fp, #0
 8008b24:	f340 8123 	ble.w	8008d6e <atan+0x27e>
 8008b28:	a593      	add	r5, pc, #588	@ (adr r5, 8008d78 <atan+0x288>)
 8008b2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b36:	4bae      	ldr	r3, [pc, #696]	@ (8008df0 <atan+0x300>)
 8008b38:	429e      	cmp	r6, r3
 8008b3a:	d811      	bhi.n	8008b60 <atan+0x70>
 8008b3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008b40:	429e      	cmp	r6, r3
 8008b42:	d80a      	bhi.n	8008b5a <atan+0x6a>
 8008b44:	a38e      	add	r3, pc, #568	@ (adr r3, 8008d80 <atan+0x290>)
 8008b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4a:	f7f7 fb19 	bl	8000180 <__adddf3>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	4ba8      	ldr	r3, [pc, #672]	@ (8008df4 <atan+0x304>)
 8008b52:	f7f7 ff5b 	bl	8000a0c <__aeabi_dcmpgt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1e9      	bne.n	8008b2e <atan+0x3e>
 8008b5a:	f04f 3aff 	mov.w	sl, #4294967295
 8008b5e:	e027      	b.n	8008bb0 <atan+0xc0>
 8008b60:	f000 f956 	bl	8008e10 <fabs>
 8008b64:	4ba4      	ldr	r3, [pc, #656]	@ (8008df8 <atan+0x308>)
 8008b66:	4604      	mov	r4, r0
 8008b68:	429e      	cmp	r6, r3
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	f200 80b8 	bhi.w	8008ce0 <atan+0x1f0>
 8008b70:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008b74:	429e      	cmp	r6, r3
 8008b76:	f200 809c 	bhi.w	8008cb2 <atan+0x1c2>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	f7f7 faff 	bl	8000180 <__adddf3>
 8008b82:	2200      	movs	r2, #0
 8008b84:	4b9b      	ldr	r3, [pc, #620]	@ (8008df4 <atan+0x304>)
 8008b86:	f7f7 faf9 	bl	800017c <__aeabi_dsub>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 faf2 	bl	8000180 <__adddf3>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 fdcc 	bl	8000740 <__aeabi_ddiv>
 8008ba8:	f04f 0a00 	mov.w	sl, #0
 8008bac:	4604      	mov	r4, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	f7f7 fc98 	bl	80004ec <__aeabi_dmul>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	4689      	mov	r9, r1
 8008bc4:	f7f7 fc92 	bl	80004ec <__aeabi_dmul>
 8008bc8:	a36f      	add	r3, pc, #444	@ (adr r3, 8008d88 <atan+0x298>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460f      	mov	r7, r1
 8008bd2:	f7f7 fc8b 	bl	80004ec <__aeabi_dmul>
 8008bd6:	a36e      	add	r3, pc, #440	@ (adr r3, 8008d90 <atan+0x2a0>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 fad0 	bl	8000180 <__adddf3>
 8008be0:	4632      	mov	r2, r6
 8008be2:	463b      	mov	r3, r7
 8008be4:	f7f7 fc82 	bl	80004ec <__aeabi_dmul>
 8008be8:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d98 <atan+0x2a8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 fac7 	bl	8000180 <__adddf3>
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	f7f7 fc79 	bl	80004ec <__aeabi_dmul>
 8008bfa:	a369      	add	r3, pc, #420	@ (adr r3, 8008da0 <atan+0x2b0>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fabe 	bl	8000180 <__adddf3>
 8008c04:	4632      	mov	r2, r6
 8008c06:	463b      	mov	r3, r7
 8008c08:	f7f7 fc70 	bl	80004ec <__aeabi_dmul>
 8008c0c:	a366      	add	r3, pc, #408	@ (adr r3, 8008da8 <atan+0x2b8>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fab5 	bl	8000180 <__adddf3>
 8008c16:	4632      	mov	r2, r6
 8008c18:	463b      	mov	r3, r7
 8008c1a:	f7f7 fc67 	bl	80004ec <__aeabi_dmul>
 8008c1e:	a364      	add	r3, pc, #400	@ (adr r3, 8008db0 <atan+0x2c0>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 faac 	bl	8000180 <__adddf3>
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	f7f7 fc5e 	bl	80004ec <__aeabi_dmul>
 8008c30:	a361      	add	r3, pc, #388	@ (adr r3, 8008db8 <atan+0x2c8>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	4680      	mov	r8, r0
 8008c38:	4689      	mov	r9, r1
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	f7f7 fc55 	bl	80004ec <__aeabi_dmul>
 8008c42:	a35f      	add	r3, pc, #380	@ (adr r3, 8008dc0 <atan+0x2d0>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fa98 	bl	800017c <__aeabi_dsub>
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	463b      	mov	r3, r7
 8008c50:	f7f7 fc4c 	bl	80004ec <__aeabi_dmul>
 8008c54:	a35c      	add	r3, pc, #368	@ (adr r3, 8008dc8 <atan+0x2d8>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f7f7 fa8f 	bl	800017c <__aeabi_dsub>
 8008c5e:	4632      	mov	r2, r6
 8008c60:	463b      	mov	r3, r7
 8008c62:	f7f7 fc43 	bl	80004ec <__aeabi_dmul>
 8008c66:	a35a      	add	r3, pc, #360	@ (adr r3, 8008dd0 <atan+0x2e0>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fa86 	bl	800017c <__aeabi_dsub>
 8008c70:	4632      	mov	r2, r6
 8008c72:	463b      	mov	r3, r7
 8008c74:	f7f7 fc3a 	bl	80004ec <__aeabi_dmul>
 8008c78:	a357      	add	r3, pc, #348	@ (adr r3, 8008dd8 <atan+0x2e8>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fa7d 	bl	800017c <__aeabi_dsub>
 8008c82:	4632      	mov	r2, r6
 8008c84:	463b      	mov	r3, r7
 8008c86:	f7f7 fc31 	bl	80004ec <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 fa75 	bl	8000180 <__adddf3>
 8008c96:	4622      	mov	r2, r4
 8008c98:	462b      	mov	r3, r5
 8008c9a:	f7f7 fc27 	bl	80004ec <__aeabi_dmul>
 8008c9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	d144      	bne.n	8008d32 <atan+0x242>
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 fa66 	bl	800017c <__aeabi_dsub>
 8008cb0:	e733      	b.n	8008b1a <atan+0x2a>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8008df4 <atan+0x304>)
 8008cb6:	f7f7 fa61 	bl	800017c <__aeabi_dsub>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8008df4 <atan+0x304>)
 8008cc6:	f7f7 fa5b 	bl	8000180 <__adddf3>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fd35 	bl	8000740 <__aeabi_ddiv>
 8008cd6:	f04f 0a01 	mov.w	sl, #1
 8008cda:	4604      	mov	r4, r0
 8008cdc:	460d      	mov	r5, r1
 8008cde:	e767      	b.n	8008bb0 <atan+0xc0>
 8008ce0:	4b46      	ldr	r3, [pc, #280]	@ (8008dfc <atan+0x30c>)
 8008ce2:	429e      	cmp	r6, r3
 8008ce4:	d21a      	bcs.n	8008d1c <atan+0x22c>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4b45      	ldr	r3, [pc, #276]	@ (8008e00 <atan+0x310>)
 8008cea:	f7f7 fa47 	bl	800017c <__aeabi_dsub>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4b41      	ldr	r3, [pc, #260]	@ (8008e00 <atan+0x310>)
 8008cfa:	f7f7 fbf7 	bl	80004ec <__aeabi_dmul>
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4b3c      	ldr	r3, [pc, #240]	@ (8008df4 <atan+0x304>)
 8008d02:	f7f7 fa3d 	bl	8000180 <__adddf3>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fd17 	bl	8000740 <__aeabi_ddiv>
 8008d12:	f04f 0a02 	mov.w	sl, #2
 8008d16:	4604      	mov	r4, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	e749      	b.n	8008bb0 <atan+0xc0>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	2000      	movs	r0, #0
 8008d22:	4938      	ldr	r1, [pc, #224]	@ (8008e04 <atan+0x314>)
 8008d24:	f7f7 fd0c 	bl	8000740 <__aeabi_ddiv>
 8008d28:	f04f 0a03 	mov.w	sl, #3
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	460d      	mov	r5, r1
 8008d30:	e73e      	b.n	8008bb0 <atan+0xc0>
 8008d32:	4b35      	ldr	r3, [pc, #212]	@ (8008e08 <atan+0x318>)
 8008d34:	4e35      	ldr	r6, [pc, #212]	@ (8008e0c <atan+0x31c>)
 8008d36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f7f7 fa1d 	bl	800017c <__aeabi_dsub>
 8008d42:	4622      	mov	r2, r4
 8008d44:	462b      	mov	r3, r5
 8008d46:	f7f7 fa19 	bl	800017c <__aeabi_dsub>
 8008d4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008d56:	f7f7 fa11 	bl	800017c <__aeabi_dsub>
 8008d5a:	f1bb 0f00 	cmp.w	fp, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	f6bf aee4 	bge.w	8008b2e <atan+0x3e>
 8008d66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d6a:	461d      	mov	r5, r3
 8008d6c:	e6df      	b.n	8008b2e <atan+0x3e>
 8008d6e:	a51c      	add	r5, pc, #112	@ (adr r5, 8008de0 <atan+0x2f0>)
 8008d70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d74:	e6db      	b.n	8008b2e <atan+0x3e>
 8008d76:	bf00      	nop
 8008d78:	54442d18 	.word	0x54442d18
 8008d7c:	3ff921fb 	.word	0x3ff921fb
 8008d80:	8800759c 	.word	0x8800759c
 8008d84:	7e37e43c 	.word	0x7e37e43c
 8008d88:	e322da11 	.word	0xe322da11
 8008d8c:	3f90ad3a 	.word	0x3f90ad3a
 8008d90:	24760deb 	.word	0x24760deb
 8008d94:	3fa97b4b 	.word	0x3fa97b4b
 8008d98:	a0d03d51 	.word	0xa0d03d51
 8008d9c:	3fb10d66 	.word	0x3fb10d66
 8008da0:	c54c206e 	.word	0xc54c206e
 8008da4:	3fb745cd 	.word	0x3fb745cd
 8008da8:	920083ff 	.word	0x920083ff
 8008dac:	3fc24924 	.word	0x3fc24924
 8008db0:	5555550d 	.word	0x5555550d
 8008db4:	3fd55555 	.word	0x3fd55555
 8008db8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008dbc:	bfa2b444 	.word	0xbfa2b444
 8008dc0:	52defd9a 	.word	0x52defd9a
 8008dc4:	3fadde2d 	.word	0x3fadde2d
 8008dc8:	af749a6d 	.word	0xaf749a6d
 8008dcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008dd0:	fe231671 	.word	0xfe231671
 8008dd4:	3fbc71c6 	.word	0x3fbc71c6
 8008dd8:	9998ebc4 	.word	0x9998ebc4
 8008ddc:	3fc99999 	.word	0x3fc99999
 8008de0:	54442d18 	.word	0x54442d18
 8008de4:	bff921fb 	.word	0xbff921fb
 8008de8:	440fffff 	.word	0x440fffff
 8008dec:	7ff00000 	.word	0x7ff00000
 8008df0:	3fdbffff 	.word	0x3fdbffff
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	3ff2ffff 	.word	0x3ff2ffff
 8008dfc:	40038000 	.word	0x40038000
 8008e00:	3ff80000 	.word	0x3ff80000
 8008e04:	bff00000 	.word	0xbff00000
 8008e08:	080095c0 	.word	0x080095c0
 8008e0c:	080095e0 	.word	0x080095e0

08008e10 <fabs>:
 8008e10:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e14:	4619      	mov	r1, r3
 8008e16:	4770      	bx	lr

08008e18 <nan>:
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4901      	ldr	r1, [pc, #4]	@ (8008e20 <nan+0x8>)
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	7ff80000 	.word	0x7ff80000
 8008e24:	00000000 	.word	0x00000000

08008e28 <__ieee754_asin>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	4bc4      	ldr	r3, [pc, #784]	@ (8009140 <__ieee754_asin+0x318>)
 8008e2e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008e32:	b087      	sub	sp, #28
 8008e34:	429e      	cmp	r6, r3
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	9101      	str	r1, [sp, #4]
 8008e3c:	d929      	bls.n	8008e92 <__ieee754_asin+0x6a>
 8008e3e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008e42:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008e46:	4306      	orrs	r6, r0
 8008e48:	d114      	bne.n	8008e74 <__ieee754_asin+0x4c>
 8008e4a:	a3a3      	add	r3, pc, #652	@ (adr r3, 80090d8 <__ieee754_asin+0x2b0>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fb4c 	bl	80004ec <__aeabi_dmul>
 8008e54:	a3a2      	add	r3, pc, #648	@ (adr r3, 80090e0 <__ieee754_asin+0x2b8>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460f      	mov	r7, r1
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7f7 fb43 	bl	80004ec <__aeabi_dmul>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7f7 f987 	bl	8000180 <__adddf3>
 8008e72:	e007      	b.n	8008e84 <__ieee754_asin+0x5c>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	f7f7 f980 	bl	800017c <__aeabi_dsub>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	f7f7 fc5e 	bl	8000740 <__aeabi_ddiv>
 8008e84:	4604      	mov	r4, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	4620      	mov	r0, r4
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	b007      	add	sp, #28
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	4bac      	ldr	r3, [pc, #688]	@ (8009144 <__ieee754_asin+0x31c>)
 8008e94:	429e      	cmp	r6, r3
 8008e96:	d80e      	bhi.n	8008eb6 <__ieee754_asin+0x8e>
 8008e98:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8008e9c:	f080 80ab 	bcs.w	8008ff6 <__ieee754_asin+0x1ce>
 8008ea0:	a391      	add	r3, pc, #580	@ (adr r3, 80090e8 <__ieee754_asin+0x2c0>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 f96b 	bl	8000180 <__adddf3>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	4ba6      	ldr	r3, [pc, #664]	@ (8009148 <__ieee754_asin+0x320>)
 8008eae:	f7f7 fdad 	bl	8000a0c <__aeabi_dcmpgt>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d1e8      	bne.n	8008e88 <__ieee754_asin+0x60>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7ff ffa9 	bl	8008e10 <fabs>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	49a0      	ldr	r1, [pc, #640]	@ (8009148 <__ieee754_asin+0x320>)
 8008ec6:	f7f7 f959 	bl	800017c <__aeabi_dsub>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4b9f      	ldr	r3, [pc, #636]	@ (800914c <__ieee754_asin+0x324>)
 8008ece:	f7f7 fb0d 	bl	80004ec <__aeabi_dmul>
 8008ed2:	a387      	add	r3, pc, #540	@ (adr r3, 80090f0 <__ieee754_asin+0x2c8>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	f7f7 fb06 	bl	80004ec <__aeabi_dmul>
 8008ee0:	a385      	add	r3, pc, #532	@ (adr r3, 80090f8 <__ieee754_asin+0x2d0>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 f94b 	bl	8000180 <__adddf3>
 8008eea:	4622      	mov	r2, r4
 8008eec:	462b      	mov	r3, r5
 8008eee:	f7f7 fafd 	bl	80004ec <__aeabi_dmul>
 8008ef2:	a383      	add	r3, pc, #524	@ (adr r3, 8009100 <__ieee754_asin+0x2d8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 f940 	bl	800017c <__aeabi_dsub>
 8008efc:	4622      	mov	r2, r4
 8008efe:	462b      	mov	r3, r5
 8008f00:	f7f7 faf4 	bl	80004ec <__aeabi_dmul>
 8008f04:	a380      	add	r3, pc, #512	@ (adr r3, 8009108 <__ieee754_asin+0x2e0>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f939 	bl	8000180 <__adddf3>
 8008f0e:	4622      	mov	r2, r4
 8008f10:	462b      	mov	r3, r5
 8008f12:	f7f7 faeb 	bl	80004ec <__aeabi_dmul>
 8008f16:	a37e      	add	r3, pc, #504	@ (adr r3, 8009110 <__ieee754_asin+0x2e8>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f7f7 f92e 	bl	800017c <__aeabi_dsub>
 8008f20:	4622      	mov	r2, r4
 8008f22:	462b      	mov	r3, r5
 8008f24:	f7f7 fae2 	bl	80004ec <__aeabi_dmul>
 8008f28:	a37b      	add	r3, pc, #492	@ (adr r3, 8009118 <__ieee754_asin+0x2f0>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	f7f7 f927 	bl	8000180 <__adddf3>
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	f7f7 fad9 	bl	80004ec <__aeabi_dmul>
 8008f3a:	a379      	add	r3, pc, #484	@ (adr r3, 8009120 <__ieee754_asin+0x2f8>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fad0 	bl	80004ec <__aeabi_dmul>
 8008f4c:	a376      	add	r3, pc, #472	@ (adr r3, 8009128 <__ieee754_asin+0x300>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 f913 	bl	800017c <__aeabi_dsub>
 8008f56:	4622      	mov	r2, r4
 8008f58:	462b      	mov	r3, r5
 8008f5a:	f7f7 fac7 	bl	80004ec <__aeabi_dmul>
 8008f5e:	a374      	add	r3, pc, #464	@ (adr r3, 8009130 <__ieee754_asin+0x308>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f7f7 f90c 	bl	8000180 <__adddf3>
 8008f68:	4622      	mov	r2, r4
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	f7f7 fabe 	bl	80004ec <__aeabi_dmul>
 8008f70:	a371      	add	r3, pc, #452	@ (adr r3, 8009138 <__ieee754_asin+0x310>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f7f7 f901 	bl	800017c <__aeabi_dsub>
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	f7f7 fab5 	bl	80004ec <__aeabi_dmul>
 8008f82:	4b71      	ldr	r3, [pc, #452]	@ (8009148 <__ieee754_asin+0x320>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	f7f7 f8fb 	bl	8000180 <__adddf3>
 8008f8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f000 f945 	bl	8009220 <__ieee754_sqrt>
 8008f96:	4b6e      	ldr	r3, [pc, #440]	@ (8009150 <__ieee754_asin+0x328>)
 8008f98:	4682      	mov	sl, r0
 8008f9a:	429e      	cmp	r6, r3
 8008f9c:	468b      	mov	fp, r1
 8008f9e:	f240 80d9 	bls.w	8009154 <__ieee754_asin+0x32c>
 8008fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008faa:	f7f7 fbc9 	bl	8000740 <__aeabi_ddiv>
 8008fae:	4652      	mov	r2, sl
 8008fb0:	465b      	mov	r3, fp
 8008fb2:	f7f7 fa9b 	bl	80004ec <__aeabi_dmul>
 8008fb6:	4652      	mov	r2, sl
 8008fb8:	465b      	mov	r3, fp
 8008fba:	f7f7 f8e1 	bl	8000180 <__adddf3>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	f7f7 f8dd 	bl	8000180 <__adddf3>
 8008fc6:	a346      	add	r3, pc, #280	@ (adr r3, 80090e0 <__ieee754_asin+0x2b8>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 f8d6 	bl	800017c <__aeabi_dsub>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	a140      	add	r1, pc, #256	@ (adr r1, 80090d8 <__ieee754_asin+0x2b0>)
 8008fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fda:	f7f7 f8cf 	bl	800017c <__aeabi_dsub>
 8008fde:	9b01      	ldr	r3, [sp, #4]
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bfdc      	itt	le
 8008fe6:	4602      	movle	r2, r0
 8008fe8:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8008fec:	460d      	mov	r5, r1
 8008fee:	bfdc      	itt	le
 8008ff0:	4614      	movle	r4, r2
 8008ff2:	461d      	movle	r5, r3
 8008ff4:	e748      	b.n	8008e88 <__ieee754_asin+0x60>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	f7f7 fa77 	bl	80004ec <__aeabi_dmul>
 8008ffe:	a33c      	add	r3, pc, #240	@ (adr r3, 80090f0 <__ieee754_asin+0x2c8>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	4606      	mov	r6, r0
 8009006:	460f      	mov	r7, r1
 8009008:	f7f7 fa70 	bl	80004ec <__aeabi_dmul>
 800900c:	a33a      	add	r3, pc, #232	@ (adr r3, 80090f8 <__ieee754_asin+0x2d0>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 f8b5 	bl	8000180 <__adddf3>
 8009016:	4632      	mov	r2, r6
 8009018:	463b      	mov	r3, r7
 800901a:	f7f7 fa67 	bl	80004ec <__aeabi_dmul>
 800901e:	a338      	add	r3, pc, #224	@ (adr r3, 8009100 <__ieee754_asin+0x2d8>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f7f7 f8aa 	bl	800017c <__aeabi_dsub>
 8009028:	4632      	mov	r2, r6
 800902a:	463b      	mov	r3, r7
 800902c:	f7f7 fa5e 	bl	80004ec <__aeabi_dmul>
 8009030:	a335      	add	r3, pc, #212	@ (adr r3, 8009108 <__ieee754_asin+0x2e0>)
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	f7f7 f8a3 	bl	8000180 <__adddf3>
 800903a:	4632      	mov	r2, r6
 800903c:	463b      	mov	r3, r7
 800903e:	f7f7 fa55 	bl	80004ec <__aeabi_dmul>
 8009042:	a333      	add	r3, pc, #204	@ (adr r3, 8009110 <__ieee754_asin+0x2e8>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 f898 	bl	800017c <__aeabi_dsub>
 800904c:	4632      	mov	r2, r6
 800904e:	463b      	mov	r3, r7
 8009050:	f7f7 fa4c 	bl	80004ec <__aeabi_dmul>
 8009054:	a330      	add	r3, pc, #192	@ (adr r3, 8009118 <__ieee754_asin+0x2f0>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7f7 f891 	bl	8000180 <__adddf3>
 800905e:	4632      	mov	r2, r6
 8009060:	463b      	mov	r3, r7
 8009062:	f7f7 fa43 	bl	80004ec <__aeabi_dmul>
 8009066:	a32e      	add	r3, pc, #184	@ (adr r3, 8009120 <__ieee754_asin+0x2f8>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	4680      	mov	r8, r0
 800906e:	4689      	mov	r9, r1
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 fa3a 	bl	80004ec <__aeabi_dmul>
 8009078:	a32b      	add	r3, pc, #172	@ (adr r3, 8009128 <__ieee754_asin+0x300>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 f87d 	bl	800017c <__aeabi_dsub>
 8009082:	4632      	mov	r2, r6
 8009084:	463b      	mov	r3, r7
 8009086:	f7f7 fa31 	bl	80004ec <__aeabi_dmul>
 800908a:	a329      	add	r3, pc, #164	@ (adr r3, 8009130 <__ieee754_asin+0x308>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 f876 	bl	8000180 <__adddf3>
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	f7f7 fa28 	bl	80004ec <__aeabi_dmul>
 800909c:	a326      	add	r3, pc, #152	@ (adr r3, 8009138 <__ieee754_asin+0x310>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f86b 	bl	800017c <__aeabi_dsub>
 80090a6:	4632      	mov	r2, r6
 80090a8:	463b      	mov	r3, r7
 80090aa:	f7f7 fa1f 	bl	80004ec <__aeabi_dmul>
 80090ae:	2200      	movs	r2, #0
 80090b0:	4b25      	ldr	r3, [pc, #148]	@ (8009148 <__ieee754_asin+0x320>)
 80090b2:	f7f7 f865 	bl	8000180 <__adddf3>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 fb3f 	bl	8000740 <__aeabi_ddiv>
 80090c2:	4622      	mov	r2, r4
 80090c4:	462b      	mov	r3, r5
 80090c6:	f7f7 fa11 	bl	80004ec <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4620      	mov	r0, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	e6cc      	b.n	8008e6e <__ieee754_asin+0x46>
 80090d4:	f3af 8000 	nop.w
 80090d8:	54442d18 	.word	0x54442d18
 80090dc:	3ff921fb 	.word	0x3ff921fb
 80090e0:	33145c07 	.word	0x33145c07
 80090e4:	3c91a626 	.word	0x3c91a626
 80090e8:	8800759c 	.word	0x8800759c
 80090ec:	7e37e43c 	.word	0x7e37e43c
 80090f0:	0dfdf709 	.word	0x0dfdf709
 80090f4:	3f023de1 	.word	0x3f023de1
 80090f8:	7501b288 	.word	0x7501b288
 80090fc:	3f49efe0 	.word	0x3f49efe0
 8009100:	b5688f3b 	.word	0xb5688f3b
 8009104:	3fa48228 	.word	0x3fa48228
 8009108:	0e884455 	.word	0x0e884455
 800910c:	3fc9c155 	.word	0x3fc9c155
 8009110:	03eb6f7d 	.word	0x03eb6f7d
 8009114:	3fd4d612 	.word	0x3fd4d612
 8009118:	55555555 	.word	0x55555555
 800911c:	3fc55555 	.word	0x3fc55555
 8009120:	b12e9282 	.word	0xb12e9282
 8009124:	3fb3b8c5 	.word	0x3fb3b8c5
 8009128:	1b8d0159 	.word	0x1b8d0159
 800912c:	3fe6066c 	.word	0x3fe6066c
 8009130:	9c598ac8 	.word	0x9c598ac8
 8009134:	40002ae5 	.word	0x40002ae5
 8009138:	1c8a2d4b 	.word	0x1c8a2d4b
 800913c:	40033a27 	.word	0x40033a27
 8009140:	3fefffff 	.word	0x3fefffff
 8009144:	3fdfffff 	.word	0x3fdfffff
 8009148:	3ff00000 	.word	0x3ff00000
 800914c:	3fe00000 	.word	0x3fe00000
 8009150:	3fef3332 	.word	0x3fef3332
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	f7f7 f812 	bl	8000180 <__adddf3>
 800915c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009160:	4606      	mov	r6, r0
 8009162:	460f      	mov	r7, r1
 8009164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009168:	f7f7 faea 	bl	8000740 <__aeabi_ddiv>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 f9ba 	bl	80004ec <__aeabi_dmul>
 8009178:	f04f 0800 	mov.w	r8, #0
 800917c:	4606      	mov	r6, r0
 800917e:	460f      	mov	r7, r1
 8009180:	4642      	mov	r2, r8
 8009182:	465b      	mov	r3, fp
 8009184:	4640      	mov	r0, r8
 8009186:	4659      	mov	r1, fp
 8009188:	f7f7 f9b0 	bl	80004ec <__aeabi_dmul>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f6 fff2 	bl	800017c <__aeabi_dsub>
 8009198:	4642      	mov	r2, r8
 800919a:	4604      	mov	r4, r0
 800919c:	460d      	mov	r5, r1
 800919e:	465b      	mov	r3, fp
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	f7f6 ffec 	bl	8000180 <__adddf3>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4620      	mov	r0, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	f7f7 fac6 	bl	8000740 <__aeabi_ddiv>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	f7f6 ffe2 	bl	8000180 <__adddf3>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	a113      	add	r1, pc, #76	@ (adr r1, 8009210 <__ieee754_asin+0x3e8>)
 80091c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c6:	f7f6 ffd9 	bl	800017c <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4630      	mov	r0, r6
 80091d0:	4639      	mov	r1, r7
 80091d2:	f7f6 ffd3 	bl	800017c <__aeabi_dsub>
 80091d6:	4642      	mov	r2, r8
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	465b      	mov	r3, fp
 80091de:	4640      	mov	r0, r8
 80091e0:	4659      	mov	r1, fp
 80091e2:	f7f6 ffcd 	bl	8000180 <__adddf3>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8009218 <__ieee754_asin+0x3f0>)
 80091ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f0:	f7f6 ffc4 	bl	800017c <__aeabi_dsub>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7f6 ffbe 	bl	800017c <__aeabi_dsub>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	a104      	add	r1, pc, #16	@ (adr r1, 8009218 <__ieee754_asin+0x3f0>)
 8009206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800920a:	e6e6      	b.n	8008fda <__ieee754_asin+0x1b2>
 800920c:	f3af 8000 	nop.w
 8009210:	33145c07 	.word	0x33145c07
 8009214:	3c91a626 	.word	0x3c91a626
 8009218:	54442d18 	.word	0x54442d18
 800921c:	3fe921fb 	.word	0x3fe921fb

08009220 <__ieee754_sqrt>:
 8009220:	4a65      	ldr	r2, [pc, #404]	@ (80093b8 <__ieee754_sqrt+0x198>)
 8009222:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009226:	438a      	bics	r2, r1
 8009228:	4606      	mov	r6, r0
 800922a:	460f      	mov	r7, r1
 800922c:	460b      	mov	r3, r1
 800922e:	4604      	mov	r4, r0
 8009230:	d10e      	bne.n	8009250 <__ieee754_sqrt+0x30>
 8009232:	4602      	mov	r2, r0
 8009234:	f7f7 f95a 	bl	80004ec <__aeabi_dmul>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7f6 ff9e 	bl	8000180 <__adddf3>
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	2900      	cmp	r1, #0
 8009252:	dc0c      	bgt.n	800926e <__ieee754_sqrt+0x4e>
 8009254:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009258:	4302      	orrs	r2, r0
 800925a:	d0f5      	beq.n	8009248 <__ieee754_sqrt+0x28>
 800925c:	b189      	cbz	r1, 8009282 <__ieee754_sqrt+0x62>
 800925e:	4602      	mov	r2, r0
 8009260:	f7f6 ff8c 	bl	800017c <__aeabi_dsub>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	f7f7 fa6a 	bl	8000740 <__aeabi_ddiv>
 800926c:	e7ea      	b.n	8009244 <__ieee754_sqrt+0x24>
 800926e:	150a      	asrs	r2, r1, #20
 8009270:	d115      	bne.n	800929e <__ieee754_sqrt+0x7e>
 8009272:	2100      	movs	r1, #0
 8009274:	e009      	b.n	800928a <__ieee754_sqrt+0x6a>
 8009276:	0ae3      	lsrs	r3, r4, #11
 8009278:	3a15      	subs	r2, #21
 800927a:	0564      	lsls	r4, r4, #21
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0fa      	beq.n	8009276 <__ieee754_sqrt+0x56>
 8009280:	e7f7      	b.n	8009272 <__ieee754_sqrt+0x52>
 8009282:	460a      	mov	r2, r1
 8009284:	e7fa      	b.n	800927c <__ieee754_sqrt+0x5c>
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	3101      	adds	r1, #1
 800928a:	02d8      	lsls	r0, r3, #11
 800928c:	d5fb      	bpl.n	8009286 <__ieee754_sqrt+0x66>
 800928e:	1e48      	subs	r0, r1, #1
 8009290:	1a12      	subs	r2, r2, r0
 8009292:	f1c1 0020 	rsb	r0, r1, #32
 8009296:	fa24 f000 	lsr.w	r0, r4, r0
 800929a:	4303      	orrs	r3, r0
 800929c:	408c      	lsls	r4, r1
 800929e:	2700      	movs	r7, #0
 80092a0:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 80092a4:	2116      	movs	r1, #22
 80092a6:	07d2      	lsls	r2, r2, #31
 80092a8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80092ac:	463a      	mov	r2, r7
 80092ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092b6:	bf5c      	itt	pl
 80092b8:	005b      	lslpl	r3, r3, #1
 80092ba:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80092be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092c2:	bf58      	it	pl
 80092c4:	0064      	lslpl	r4, r4, #1
 80092c6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80092ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092ce:	0064      	lsls	r4, r4, #1
 80092d0:	1815      	adds	r5, r2, r0
 80092d2:	429d      	cmp	r5, r3
 80092d4:	bfde      	ittt	le
 80092d6:	182a      	addle	r2, r5, r0
 80092d8:	1b5b      	suble	r3, r3, r5
 80092da:	183f      	addle	r7, r7, r0
 80092dc:	0fe5      	lsrs	r5, r4, #31
 80092de:	3901      	subs	r1, #1
 80092e0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80092e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80092e8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80092ec:	d1f0      	bne.n	80092d0 <__ieee754_sqrt+0xb0>
 80092ee:	460d      	mov	r5, r1
 80092f0:	2620      	movs	r6, #32
 80092f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80092f6:	4293      	cmp	r3, r2
 80092f8:	eb00 0c01 	add.w	ip, r0, r1
 80092fc:	dc02      	bgt.n	8009304 <__ieee754_sqrt+0xe4>
 80092fe:	d113      	bne.n	8009328 <__ieee754_sqrt+0x108>
 8009300:	45a4      	cmp	ip, r4
 8009302:	d811      	bhi.n	8009328 <__ieee754_sqrt+0x108>
 8009304:	f1bc 0f00 	cmp.w	ip, #0
 8009308:	eb0c 0100 	add.w	r1, ip, r0
 800930c:	da3e      	bge.n	800938c <__ieee754_sqrt+0x16c>
 800930e:	2900      	cmp	r1, #0
 8009310:	db3c      	blt.n	800938c <__ieee754_sqrt+0x16c>
 8009312:	f102 0e01 	add.w	lr, r2, #1
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	4672      	mov	r2, lr
 800931a:	45a4      	cmp	ip, r4
 800931c:	bf88      	it	hi
 800931e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009322:	eba4 040c 	sub.w	r4, r4, ip
 8009326:	4405      	add	r5, r0
 8009328:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800932c:	3e01      	subs	r6, #1
 800932e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009332:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009336:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800933a:	d1dc      	bne.n	80092f6 <__ieee754_sqrt+0xd6>
 800933c:	431c      	orrs	r4, r3
 800933e:	d01a      	beq.n	8009376 <__ieee754_sqrt+0x156>
 8009340:	4c1e      	ldr	r4, [pc, #120]	@ (80093bc <__ieee754_sqrt+0x19c>)
 8009342:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80093c0 <__ieee754_sqrt+0x1a0>
 8009346:	e9d4 0100 	ldrd	r0, r1, [r4]
 800934a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800934e:	f7f6 ff15 	bl	800017c <__aeabi_dsub>
 8009352:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4650      	mov	r0, sl
 800935c:	4659      	mov	r1, fp
 800935e:	f7f7 fb41 	bl	80009e4 <__aeabi_dcmple>
 8009362:	b140      	cbz	r0, 8009376 <__ieee754_sqrt+0x156>
 8009364:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009368:	e9d9 2300 	ldrd	r2, r3, [r9]
 800936c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009370:	d10e      	bne.n	8009390 <__ieee754_sqrt+0x170>
 8009372:	4635      	mov	r5, r6
 8009374:	3701      	adds	r7, #1
 8009376:	107b      	asrs	r3, r7, #1
 8009378:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800937c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009380:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009384:	086b      	lsrs	r3, r5, #1
 8009386:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800938a:	e75b      	b.n	8009244 <__ieee754_sqrt+0x24>
 800938c:	4696      	mov	lr, r2
 800938e:	e7c2      	b.n	8009316 <__ieee754_sqrt+0xf6>
 8009390:	f7f6 fef6 	bl	8000180 <__adddf3>
 8009394:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4650      	mov	r0, sl
 800939e:	4659      	mov	r1, fp
 80093a0:	f7f7 fb16 	bl	80009d0 <__aeabi_dcmplt>
 80093a4:	b120      	cbz	r0, 80093b0 <__ieee754_sqrt+0x190>
 80093a6:	1cab      	adds	r3, r5, #2
 80093a8:	bf08      	it	eq
 80093aa:	3701      	addeq	r7, #1
 80093ac:	3502      	adds	r5, #2
 80093ae:	e7e2      	b.n	8009376 <__ieee754_sqrt+0x156>
 80093b0:	1c6b      	adds	r3, r5, #1
 80093b2:	f023 0501 	bic.w	r5, r3, #1
 80093b6:	e7de      	b.n	8009376 <__ieee754_sqrt+0x156>
 80093b8:	7ff00000 	.word	0x7ff00000
 80093bc:	08009608 	.word	0x08009608
 80093c0:	08009600 	.word	0x08009600

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
