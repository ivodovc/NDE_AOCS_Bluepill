
NDE_Project_AOCS_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006ad8  08006ad8  00007ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006ba8  08006ba8  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006ba8  08006ba8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bac  08006bac  00007bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006bb0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  08006c18  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006c18  00008378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c58  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002557  00000000  00000000  00018ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d40  00000000  00000000  0001c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b0a  00000000  00000000  0001d050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a82  00000000  00000000  00036b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cee  00000000  00000000  0004a5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f8  00000000  00000000  000df310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e4508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006abc 	.word	0x08006abc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006abc 	.word	0x08006abc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <init_fan>:
 uint32_t *INC;
 uint32_t *IND;


void init_fan(uint32_t* motor_PWM_INA, uint32_t* motor_PWM_INB, uint32_t* motor_PWM_INC, uint32_t* motor_PWM_IND)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
	INA = motor_PWM_INA;
 80010ca:	4a10      	ldr	r2, [pc, #64]	@ (800110c <init_fan+0x50>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6013      	str	r3, [r2, #0]
	INB = motor_PWM_INB;
 80010d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <init_fan+0x54>)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	6013      	str	r3, [r2, #0]
	INC = motor_PWM_INC;
 80010d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <init_fan+0x58>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
	IND = motor_PWM_IND;
 80010dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <init_fan+0x5c>)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	6013      	str	r3, [r2, #0]
	*INA = 0;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <init_fan+0x50>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
	*INB = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <init_fan+0x54>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
	*INC = 0;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <init_fan+0x58>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
	*IND = 0;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <init_fan+0x5c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000084 	.word	0x20000084
 8001110:	20000088 	.word	0x20000088
 8001114:	2000008c 	.word	0x2000008c
 8001118:	20000090 	.word	0x20000090

0800111c <set_fan_speed>:

// speed has to be integer from -1000 to 1000
void set_fan_speed(int16_t speed){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed && speed <= 1000){
 8001126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0e      	blt.n	800114c <set_fan_speed+0x30>
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001136:	dc09      	bgt.n	800114c <set_fan_speed+0x30>
		*INB = 0;
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <set_fan_speed+0x60>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
		*INA = speed;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <set_fan_speed+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001148:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed && speed < 0){
		*INA = 0;
		*INB = -1*speed;
	}
}
 800114a:	e012      	b.n	8001172 <set_fan_speed+0x56>
	}else if (-1000 <= speed && speed < 0){
 800114c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001150:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001154:	db0d      	blt.n	8001172 <set_fan_speed+0x56>
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	2b00      	cmp	r3, #0
 800115c:	da09      	bge.n	8001172 <set_fan_speed+0x56>
		*INA = 0;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <set_fan_speed+0x64>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
		*INB = -1*speed;
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	425a      	negs	r2, r3
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <set_fan_speed+0x60>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000088 	.word	0x20000088
 8001180:	20000084 	.word	0x20000084

08001184 <set_fan_speed2>:

void set_fan_speed2(int16_t speed2){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
	if (0 <= speed2 && speed2 <= 1000){
 800118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0e      	blt.n	80011b4 <set_fan_speed2+0x30>
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119e:	dc09      	bgt.n	80011b4 <set_fan_speed2+0x30>
		*IND = 0;
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <set_fan_speed2+0x60>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
		*INC = speed2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <set_fan_speed2+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011b0:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed2 && speed2 < 0){
		*INC = 0;
		*IND = -1*speed2;
	}
}
 80011b2:	e012      	b.n	80011da <set_fan_speed2+0x56>
	}else if (-1000 <= speed2 && speed2 < 0){
 80011b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80011bc:	db0d      	blt.n	80011da <set_fan_speed2+0x56>
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da09      	bge.n	80011da <set_fan_speed2+0x56>
		*INC = 0;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <set_fan_speed2+0x64>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
		*IND = -1*speed2;
 80011ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d2:	425a      	negs	r2, r3
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <set_fan_speed2+0x60>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000090 	.word	0x20000090
 80011e8:	2000008c 	.word	0x2000008c

080011ec <MPU6050_Init>:

// set i2c timeout
const uint16_t i2c_timeout = 100;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, i2c_timeout);
 80011f4:	2364      	movs	r3, #100	@ 0x64
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2275      	movs	r2, #117	@ 0x75
 8001206:	21d0      	movs	r1, #208	@ 0xd0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f002 f801 	bl	8003210 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b68      	cmp	r3, #104	@ 0x68
 8001212:	d13d      	bne.n	8001290 <MPU6050_Init+0xa4>
    {
        // wake sensor up using power management register
        Data = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8001218:	2364      	movs	r3, #100	@ 0x64
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030e 	add.w	r3, r7, #14
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	226b      	movs	r2, #107	@ 0x6b
 800122a:	21d0      	movs	r1, #208	@ 0xd0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f001 fef5 	bl	800301c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001232:	2307      	movs	r3, #7
 8001234:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, i2c_timeout);
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 030e 	add.w	r3, r7, #14
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	2219      	movs	r2, #25
 8001248:	21d0      	movs	r1, #208	@ 0xd0
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 fee6 	bl	800301c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register AFS_SEL=0
        Data = 0x00;
 8001250:	2300      	movs	r3, #0
 8001252:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 8001254:	2364      	movs	r3, #100	@ 0x64
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 030e 	add.w	r3, r7, #14
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	221c      	movs	r2, #28
 8001266:	21d0      	movs	r1, #208	@ 0xd0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 fed7 	bl	800301c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register FS_SEL=0
        Data = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 8001272:	2364      	movs	r3, #100	@ 0x64
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030e 	add.w	r3, r7, #14
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	221b      	movs	r2, #27
 8001284:	21d0      	movs	r1, #208	@ 0xd0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f001 fec8 	bl	800301c <HAL_I2C_Mem_Write>
        return 0;
 800128c:	2300      	movs	r3, #0
 800128e:	e000      	b.n	8001292 <MPU6050_Init+0xa6>
    }
    return 1;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <MPU6050_Read_MPU>:

void MPU6050_Read_MPU(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b088      	sub	sp, #32
 800129e:	af04      	add	r7, sp, #16
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_R_GYRO_XOUT, 1, Rec_Data, 6, i2c_timeout);
 80012a4:	2364      	movs	r3, #100	@ 0x64
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2306      	movs	r3, #6
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2243      	movs	r2, #67	@ 0x43
 80012b6:	21d0      	movs	r1, #208	@ 0xd0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f001 ffa9 	bl	8003210 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80012be:	7a3b      	ldrb	r3, [r7, #8]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7a7b      	ldrb	r3, [r7, #9]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012d2:	7abb      	ldrb	r3, [r7, #10]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	805a      	strh	r2, [r3, #2]
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80012e6:	7b3b      	ldrb	r3, [r7, #12]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	7b7b      	ldrb	r3, [r7, #13]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	809a      	strh	r2, [r3, #4]

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_R_ACCEL_XOUT, 1, Rec_Data, 6, i2c_timeout);
 80012fa:	2364      	movs	r3, #100	@ 0x64
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2306      	movs	r3, #6
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	223b      	movs	r2, #59	@ 0x3b
 800130c:	21d0      	movs	r1, #208	@ 0xd0
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 ff7e 	bl	8003210 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001314:	7a3b      	ldrb	r3, [r7, #8]
 8001316:	b21b      	sxth	r3, r3
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	839a      	strh	r2, [r3, #28]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001328:	7abb      	ldrb	r3, [r7, #10]
 800132a:	b21b      	sxth	r3, r3
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21a      	sxth	r2, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	83da      	strh	r2, [r3, #30]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800133c:	7b3b      	ldrb	r3, [r7, #12]
 800133e:	b21b      	sxth	r3, r3
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21a      	sxth	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	841a      	strh	r2, [r3, #32]


}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <Calculate_Accel_Values>:

void Calculate_Accel_Values(MPU6050_t *Raw_Values){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    //Scale values
	Raw_Values-> Accel_X = Raw_Values-> Accel_X_RAW*((2*G)/32768); //Values for AFS_SEL = 0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f844 	bl	80003f4 <__aeabi_i2d>
 800136c:	a31c      	add	r3, pc, #112	@ (adr r3, 80013e0 <Calculate_Accel_Values+0x88>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f8a9 	bl	80004c8 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fb53 	bl	8000a28 <__aeabi_d2f>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
	Raw_Values-> Accel_Y = Raw_Values-> Accel_Y_RAW*((2*G)/32768);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f830 	bl	80003f4 <__aeabi_i2d>
 8001394:	a312      	add	r3, pc, #72	@ (adr r3, 80013e0 <Calculate_Accel_Values+0x88>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f895 	bl	80004c8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fb3f 	bl	8000a28 <__aeabi_d2f>
 80013aa:	4602      	mov	r2, r0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
	Raw_Values-> Accel_Z = Raw_Values-> Accel_Z_RAW*((2*G)/32768);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f81c 	bl	80003f4 <__aeabi_i2d>
 80013bc:	a308      	add	r3, pc, #32	@ (adr r3, 80013e0 <Calculate_Accel_Values+0x88>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f881 	bl	80004c8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb2b 	bl	8000a28 <__aeabi_d2f>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
};
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	51eb851f 	.word	0x51eb851f
 80013e4:	3f439eb8 	.word	0x3f439eb8

080013e8 <Calculate_Gyro_Values>:

void Calculate_Gyro_Values(MPU6050_t *Raw_Values){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    //Scale values 
	Raw_Values-> Gyro_X = Raw_Values-> Gyro_X_RAW/131.0; //Values for FS_SEL = 0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fffc 	bl	80003f4 <__aeabi_i2d>
 80013fc:	a31c      	add	r3, pc, #112	@ (adr r3, 8001470 <Calculate_Gyro_Values+0x88>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f98b 	bl	800071c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fb0b 	bl	8000a28 <__aeabi_d2f>
 8001412:	4602      	mov	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
	Raw_Values-> Gyro_Y = Raw_Values-> Gyro_Y_RAW/131.0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ffe8 	bl	80003f4 <__aeabi_i2d>
 8001424:	a312      	add	r3, pc, #72	@ (adr r3, 8001470 <Calculate_Gyro_Values+0x88>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f977 	bl	800071c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff faf7 	bl	8000a28 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]
	Raw_Values-> Gyro_Z = Raw_Values-> Gyro_Z_RAW/131.0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffd4 	bl	80003f4 <__aeabi_i2d>
 800144c:	a308      	add	r3, pc, #32	@ (adr r3, 8001470 <Calculate_Gyro_Values+0x88>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f963 	bl	800071c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fae3 	bl	8000a28 <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	611a      	str	r2, [r3, #16]
};
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	00000000 	.word	0x00000000
 8001474:	40606000 	.word	0x40606000

08001478 <Get_Accel_Angles>:


void Get_Accel_Angles(MPU6050_t *Raw_Values){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf
    
    // Calculate Pitch using RPY
	float pitch_tmp =  RAD_TO_DEG * asin(Raw_Values->Accel_X / G);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffc7 	bl	8000418 <__aeabi_f2d>
 800148a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001578 <Get_Accel_Angles+0x100>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f944 	bl	800071c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f004 fe7c 	bl	8006198 <asin>
 80014a0:	a337      	add	r3, pc, #220	@ (adr r3, 8001580 <Get_Accel_Angles+0x108>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f80f 	bl	80004c8 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fab9 	bl	8000a28 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]
	Raw_Values->Accel_Pitch = Raw_Values->Accel_Pitch * (1 - ACCEL_LPF_ALPHA) + pitch_tmp * ACCEL_LPF_ALPHA;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4932      	ldr	r1, [pc, #200]	@ (8001588 <Get_Accel_Angles+0x110>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc0f 	bl	8000ce4 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461c      	mov	r4, r3
 80014ca:	4930      	ldr	r1, [pc, #192]	@ (800158c <Get_Accel_Angles+0x114>)
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff fc09 	bl	8000ce4 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fafc 	bl	8000ad4 <__addsf3>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	631a      	str	r2, [r3, #48]	@ 0x30

    // Check for potential division by zero
    if (Raw_Values->Accel_Z != 0) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fd8d 	bl	800100c <__aeabi_fcmpeq>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d134      	bne.n	8001562 <Get_Accel_Angles+0xea>
    	float roll_tmp = RAD_TO_DEG * atan(Raw_Values->Accel_Y / Raw_Values->Accel_Z);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fca2 	bl	8000e4c <__aeabi_fdiv>
 8001508:	4603      	mov	r3, r0
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff84 	bl	8000418 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f004 fe66 	bl	80061e8 <atan>
 800151c:	a318      	add	r3, pc, #96	@ (adr r3, 8001580 <Get_Accel_Angles+0x108>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe ffd1 	bl	80004c8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fa7b 	bl	8000a28 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	60bb      	str	r3, [r7, #8]
    	Raw_Values->Accel_Roll = Raw_Values->Accel_Roll * (1 - ACCEL_LPF_ALPHA) + roll_tmp * ACCEL_LPF_ALPHA;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800153a:	4913      	ldr	r1, [pc, #76]	@ (8001588 <Get_Accel_Angles+0x110>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fbd1 	bl	8000ce4 <__aeabi_fmul>
 8001542:	4603      	mov	r3, r0
 8001544:	461c      	mov	r4, r3
 8001546:	4911      	ldr	r1, [pc, #68]	@ (800158c <Get_Accel_Angles+0x114>)
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f7ff fbcb 	bl	8000ce4 <__aeabi_fmul>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fabe 	bl	8000ad4 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        // Handle division by zero error (if necessary)
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
    }
}
 8001560:	e003      	b.n	800156a <Get_Accel_Angles+0xf2>
    	Raw_Values->Accel_Roll = 0.0;  // Set a default value or handle it according to your application logic
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	51eb851f 	.word	0x51eb851f
 800157c:	40239eb8 	.word	0x40239eb8
 8001580:	b851eb85 	.word	0xb851eb85
 8001584:	404ca51e 	.word	0x404ca51e
 8001588:	3f666666 	.word	0x3f666666
 800158c:	3dcccccd 	.word	0x3dcccccd

08001590 <Get_Gyro_Angles>:



void Get_Gyro_Angles(MPU6050_t *Raw_Values, double Sample_Time){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	e9c7 2300 	strd	r2, r3, [r7]

    //     explanation in /Datasheets/MPU-6050-math.pdf


	float pitch_tmp = Raw_Values->Gyro_Pitch + Raw_Values->Gyro_Y*Sample_Time;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff39 	bl	8000418 <__aeabi_f2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff32 	bl	8000418 <__aeabi_f2d>
 80015b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b8:	f7fe ff86 	bl	80004c8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe fdca 	bl	800015c <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa2a 	bl	8000a28 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	617b      	str	r3, [r7, #20]
	Raw_Values->Gyro_Pitch = Raw_Values->Gyro_Pitch * (1 - GYRO_LPF_ALPHA) + pitch_tmp * GYRO_LPF_ALPHA;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	4924      	ldr	r1, [pc, #144]	@ (8001670 <Get_Gyro_Angles+0xe0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fb80 	bl	8000ce4 <__aeabi_fmul>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461c      	mov	r4, r3
 80015e8:	4922      	ldr	r1, [pc, #136]	@ (8001674 <Get_Gyro_Angles+0xe4>)
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff fb7a 	bl	8000ce4 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff fa6d 	bl	8000ad4 <__addsf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	615a      	str	r2, [r3, #20]

	float roll_tmp = Raw_Values->Gyro_Roll + Raw_Values->Gyro_X*Sample_Time;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff06 	bl	8000418 <__aeabi_f2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe feff 	bl	8000418 <__aeabi_f2d>
 800161a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161e:	f7fe ff53 	bl	80004c8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fd97 	bl	800015c <__adddf3>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff f9f7 	bl	8000a28 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	613b      	str	r3, [r7, #16]
	Raw_Values->Gyro_Roll = Raw_Values->Gyro_Roll * (1 - GYRO_LPF_ALPHA) + roll_tmp * GYRO_LPF_ALPHA;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	490b      	ldr	r1, [pc, #44]	@ (8001670 <Get_Gyro_Angles+0xe0>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb4d 	bl	8000ce4 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	461c      	mov	r4, r3
 800164e:	4909      	ldr	r1, [pc, #36]	@ (8001674 <Get_Gyro_Angles+0xe4>)
 8001650:	6938      	ldr	r0, [r7, #16]
 8001652:	f7ff fb47 	bl	8000ce4 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fa3a 	bl	8000ad4 <__addsf3>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	619a      	str	r2, [r3, #24]

};
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	3d4cccd0 	.word	0x3d4cccd0
 8001674:	3f733333 	.word	0x3f733333

08001678 <Comp_Filter_Results>:

void Comp_Filter_Results(MPU6050_t *Results){
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    
    //     explanation in /Datasheets/MPU-6050-math.pdf

	float pitch_tmp = Results->Gyro_Pitch * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Pitch;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	491b      	ldr	r1, [pc, #108]	@ (80016f4 <Comp_Filter_Results+0x7c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb2c 	bl	8000ce4 <__aeabi_fmul>
 800168c:	4603      	mov	r3, r0
 800168e:	461c      	mov	r4, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	4918      	ldr	r1, [pc, #96]	@ (80016f8 <Comp_Filter_Results+0x80>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb24 	bl	8000ce4 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff fa17 	bl	8000ad4 <__addsf3>
 80016a6:	4603      	mov	r3, r0
 80016a8:	60fb      	str	r3, [r7, #12]
	Results->Accel_Pitch = pitch_tmp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	631a      	str	r2, [r3, #48]	@ 0x30
	Results->Gyro_Pitch = pitch_tmp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	615a      	str	r2, [r3, #20]

	float roll_tmp = Results->Gyro_Roll * COMPLEMENTARY_ALPHA + (1-COMPLEMENTARY_ALPHA) * Results->Accel_Roll;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	490e      	ldr	r1, [pc, #56]	@ (80016f4 <Comp_Filter_Results+0x7c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb11 	bl	8000ce4 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461c      	mov	r4, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ca:	490b      	ldr	r1, [pc, #44]	@ (80016f8 <Comp_Filter_Results+0x80>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb09 	bl	8000ce4 <__aeabi_fmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff f9fc 	bl	8000ad4 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	60bb      	str	r3, [r7, #8]
	Results->Accel_Roll = roll_tmp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
	Results->Gyro_Roll = roll_tmp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	619a      	str	r2, [r3, #24]

}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	3dba2e8c 	.word	0x3dba2e8c
 80016f8:	3f68ba2e 	.word	0x3f68ba2e

080016fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001704:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001708:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001714:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001718:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800171c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001724:	e000      	b.n	8001728 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001726:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001728:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f9      	beq.n	8001726 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001732:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <control_rotation>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
float fan_speed_1, fan_speed_2 = 0;

void control_rotation(float desired_rotation, float actual_rotation) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	// Prepracovat ako PID kontroler, ak to nebude fungovat
	if (actual_rotation-desired_rotation > 10.5) {
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f7ff f9bb 	bl	8000ad0 <__aeabi_fsub>
 800175a:	4603      	mov	r3, r0
 800175c:	4934      	ldr	r1, [pc, #208]	@ (8001830 <control_rotation+0xe8>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc7c 	bl	800105c <__aeabi_fcmpgt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01a      	beq.n	80017a0 <control_rotation+0x58>
		fan_speed_1 = -1000;
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <control_rotation+0xec>)
 800176c:	4a32      	ldr	r2, [pc, #200]	@ (8001838 <control_rotation+0xf0>)
 800176e:	601a      	str	r2, [r3, #0]
		fan_speed_2 = -1000;
 8001770:	4b32      	ldr	r3, [pc, #200]	@ (800183c <control_rotation+0xf4>)
 8001772:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <control_rotation+0xf0>)
 8001774:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 8001776:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <control_rotation+0xec>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fc78 	bl	8001070 <__aeabi_f2iz>
 8001780:	4603      	mov	r3, r0
 8001782:	b21b      	sxth	r3, r3
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcc9 	bl	800111c <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 800178a:	4b2c      	ldr	r3, [pc, #176]	@ (800183c <control_rotation+0xf4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fc6e 	bl	8001070 <__aeabi_f2iz>
 8001794:	4603      	mov	r3, r0
 8001796:	b21b      	sxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fcf3 	bl	8001184 <set_fan_speed2>
		fan_speed_1 = 0;
		fan_speed_2 = 0;
		set_fan_speed(fan_speed_1);
		set_fan_speed2(fan_speed_2);
	}
}
 800179e:	e042      	b.n	8001826 <control_rotation+0xde>
	}else if (actual_rotation-desired_rotation < -10.5){
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f7ff f994 	bl	8000ad0 <__aeabi_fsub>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4925      	ldr	r1, [pc, #148]	@ (8001840 <control_rotation+0xf8>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc37 	bl	8001020 <__aeabi_fcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01a      	beq.n	80017ee <control_rotation+0xa6>
		fan_speed_1 = 1000;
 80017b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <control_rotation+0xec>)
 80017ba:	4a22      	ldr	r2, [pc, #136]	@ (8001844 <control_rotation+0xfc>)
 80017bc:	601a      	str	r2, [r3, #0]
		fan_speed_2 = 1000;
 80017be:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <control_rotation+0xf4>)
 80017c0:	4a20      	ldr	r2, [pc, #128]	@ (8001844 <control_rotation+0xfc>)
 80017c2:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <control_rotation+0xec>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc51 	bl	8001070 <__aeabi_f2iz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fca2 	bl	800111c <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <control_rotation+0xf4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc47 	bl	8001070 <__aeabi_f2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fccc 	bl	8001184 <set_fan_speed2>
}
 80017ec:	e01b      	b.n	8001826 <control_rotation+0xde>
		fan_speed_1 = 0;
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <control_rotation+0xec>)
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
		fan_speed_2 = 0;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <control_rotation+0xf4>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		set_fan_speed(fan_speed_1);
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <control_rotation+0xec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fc34 	bl	8001070 <__aeabi_f2iz>
 8001808:	4603      	mov	r3, r0
 800180a:	b21b      	sxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc85 	bl	800111c <set_fan_speed>
		set_fan_speed2(fan_speed_2);
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <control_rotation+0xf4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fc2a 	bl	8001070 <__aeabi_f2iz>
 800181c:	4603      	mov	r3, r0
 800181e:	b21b      	sxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fcaf 	bl	8001184 <set_fan_speed2>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	41280000 	.word	0x41280000
 8001834:	200001f0 	.word	0x200001f0
 8001838:	c47a0000 	.word	0xc47a0000
 800183c:	200001f4 	.word	0x200001f4
 8001840:	c1280000 	.word	0xc1280000
 8001844:	447a0000 	.word	0x447a0000

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	@ 0x38
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f000 fd69 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f8ab 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f000 fa57 	bl	8001d08 <MX_GPIO_Init>
  MX_ADC1_Init();
 800185a:	f000 f8f7 	bl	8001a4c <MX_ADC1_Init>
  MX_I2C1_Init();
 800185e:	f000 f933 	bl	8001ac8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001862:	f000 f9ad 	bl	8001bc0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001866:	f000 fa25 	bl	8001cb4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800186a:	f000 f95b 	bl	8001b24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);

  // Set up HC05 bluetooth controller
  printf("Setting up HC05 module\n");
 800186e:	483a      	ldr	r0, [pc, #232]	@ (8001958 <main+0x110>)
 8001870:	f004 f904 	bl	8005a7c <puts>
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)&at_set_name, strlen(at_set_name));*/

  MPU6050_t MPU6050;

  // Initialize MPU6050 (see library sample code)
  while (MPU6050_Init(&hi2c1) == 1){
 8001874:	e002      	b.n	800187c <main+0x34>
	  printf("Unable to Init MPU6050\n");
 8001876:	4839      	ldr	r0, [pc, #228]	@ (800195c <main+0x114>)
 8001878:	f004 f900 	bl	8005a7c <puts>
  while (MPU6050_Init(&hi2c1) == 1){
 800187c:	4838      	ldr	r0, [pc, #224]	@ (8001960 <main+0x118>)
 800187e:	f7ff fcb5 	bl	80011ec <MPU6050_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d0f6      	beq.n	8001876 <main+0x2e>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001888:	2100      	movs	r1, #0
 800188a:	4836      	ldr	r0, [pc, #216]	@ (8001964 <main+0x11c>)
 800188c:	f003 f8a0 	bl	80049d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001890:	2104      	movs	r1, #4
 8001892:	4834      	ldr	r0, [pc, #208]	@ (8001964 <main+0x11c>)
 8001894:	f003 f89c 	bl	80049d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001898:	2108      	movs	r1, #8
 800189a:	4832      	ldr	r0, [pc, #200]	@ (8001964 <main+0x11c>)
 800189c:	f003 f898 	bl	80049d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80018a0:	210c      	movs	r1, #12
 80018a2:	4830      	ldr	r0, [pc, #192]	@ (8001964 <main+0x11c>)
 80018a4:	f003 f894 	bl	80049d0 <HAL_TIM_PWM_Start>
  init_fan(&(TIM3->CCR1), &(TIM3->CCR2), &(TIM3->CCR3), &(TIM3->CCR4));
 80018a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <main+0x120>)
 80018aa:	4a30      	ldr	r2, [pc, #192]	@ (800196c <main+0x124>)
 80018ac:	4930      	ldr	r1, [pc, #192]	@ (8001970 <main+0x128>)
 80018ae:	4831      	ldr	r0, [pc, #196]	@ (8001974 <main+0x12c>)
 80018b0:	f7ff fc04 	bl	80010bc <init_fan>
  HAL_TIM_Base_Start_IT(&htim2);
 80018b4:	4830      	ldr	r0, [pc, #192]	@ (8001978 <main+0x130>)
 80018b6:	f002 ffe9 	bl	800488c <HAL_TIM_Base_Start_IT>

  //ch1_counter_val = 0;//(TIM1 -> ARR);
  //ch2_counter_val = 0;
  fan_speed_1 = 1;
 80018ba:	4b30      	ldr	r3, [pc, #192]	@ (800197c <main+0x134>)
 80018bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018c0:	601a      	str	r2, [r3, #0]
  fan_speed_2 = 1;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <main+0x138>)
 80018c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018c8:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // MPU6050 reading
	  MPU6050_Read_MPU(&hi2c1, &MPU6050);
 80018ca:	463b      	mov	r3, r7
 80018cc:	4619      	mov	r1, r3
 80018ce:	4824      	ldr	r0, [pc, #144]	@ (8001960 <main+0x118>)
 80018d0:	f7ff fce3 	bl	800129a <MPU6050_Read_MPU>
	  Calculate_Accel_Values(&MPU6050);
 80018d4:	463b      	mov	r3, r7
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd3e 	bl	8001358 <Calculate_Accel_Values>
	  Calculate_Gyro_Values(&MPU6050);
 80018dc:	463b      	mov	r3, r7
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd82 	bl	80013e8 <Calculate_Gyro_Values>
	  Get_Accel_Angles(&MPU6050);
 80018e4:	463b      	mov	r3, r7
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fdc6 	bl	8001478 <Get_Accel_Angles>
	  Get_Gyro_Angles(&MPU6050, 0.01);
 80018ec:	4639      	mov	r1, r7
 80018ee:	a318      	add	r3, pc, #96	@ (adr r3, 8001950 <main+0x108>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	4608      	mov	r0, r1
 80018f6:	f7ff fe4b 	bl	8001590 <Get_Gyro_Angles>
	  Comp_Filter_Results(&MPU6050);
 80018fa:	463b      	mov	r3, r7
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff febb 	bl	8001678 <Comp_Filter_Results>

	  // Writing results
	  GyroX = MPU6050.Gyro_X;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4a1f      	ldr	r2, [pc, #124]	@ (8001984 <main+0x13c>)
 8001906:	6013      	str	r3, [r2, #0]
	  GyroY = MPU6050.Gyro_Y;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <main+0x140>)
 800190c:	6013      	str	r3, [r2, #0]
	  GyroZ = MPU6050.Gyro_Z;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4a1e      	ldr	r2, [pc, #120]	@ (800198c <main+0x144>)
 8001912:	6013      	str	r3, [r2, #0]

	  AccelX = MPU6050.Accel_X;
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <main+0x148>)
 8001918:	6013      	str	r3, [r2, #0]
	  AccelY = MPU6050.Accel_Y;
 800191a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191c:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <main+0x14c>)
 800191e:	6013      	str	r3, [r2, #0]
	  AccelZ = MPU6050.Accel_Z;
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	4a1d      	ldr	r2, [pc, #116]	@ (8001998 <main+0x150>)
 8001924:	6013      	str	r3, [r2, #0]

	  GyroRoll = MPU6050.Gyro_Roll;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <main+0x154>)
 800192a:	6013      	str	r3, [r2, #0]
	  GyroPitch = MPU6050.Gyro_Pitch;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <main+0x158>)
 8001930:	6013      	str	r3, [r2, #0]
	  AccelRoll = MPU6050.Accel_Roll;
 8001932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001934:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <main+0x15c>)
 8001936:	6013      	str	r3, [r2, #0]
	  AccelPitch = MPU6050.Accel_Pitch;
 8001938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193a:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <main+0x160>)
 800193c:	6013      	str	r3, [r2, #0]

	  control_rotation(0, GyroX);
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <main+0x13c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f7ff fefe 	bl	8001748 <control_rotation>
	  MPU6050_Read_MPU(&hi2c1, &MPU6050);
 800194c:	bf00      	nop
 800194e:	e7bc      	b.n	80018ca <main+0x82>
 8001950:	47ae147b 	.word	0x47ae147b
 8001954:	3f847ae1 	.word	0x3f847ae1
 8001958:	08006ad8 	.word	0x08006ad8
 800195c:	08006af0 	.word	0x08006af0
 8001960:	200000c4 	.word	0x200000c4
 8001964:	20000160 	.word	0x20000160
 8001968:	40000440 	.word	0x40000440
 800196c:	4000043c 	.word	0x4000043c
 8001970:	40000438 	.word	0x40000438
 8001974:	40000434 	.word	0x40000434
 8001978:	20000118 	.word	0x20000118
 800197c:	200001f0 	.word	0x200001f0
 8001980:	200001f4 	.word	0x200001f4
 8001984:	200001f8 	.word	0x200001f8
 8001988:	200001fc 	.word	0x200001fc
 800198c:	20000200 	.word	0x20000200
 8001990:	20000204 	.word	0x20000204
 8001994:	20000208 	.word	0x20000208
 8001998:	2000020c 	.word	0x2000020c
 800199c:	20000210 	.word	0x20000210
 80019a0:	20000214 	.word	0x20000214
 80019a4:	20000218 	.word	0x20000218
 80019a8:	2000021c 	.word	0x2000021c

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b094      	sub	sp, #80	@ 0x50
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b6:	2228      	movs	r2, #40	@ 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f93e 	bl	8005c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	2301      	movs	r3, #1
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e4:	2310      	movs	r3, #16
 80019e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fa35 	bl	8003e60 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80019fc:	f000 fa20 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fca2 	bl	8004364 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001a26:	f000 fa0b 	bl	8001e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fe23 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a40:	f000 f9fe 	bl	8001e40 <Error_Handler>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	@ 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a5e:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <MX_ADC1_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a76:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001a8a:	f000 fcad 	bl	80023e8 <HAL_ADC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a94:	f000 f9d4 	bl	8001e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_ADC1_Init+0x74>)
 8001aaa:	f000 fd75 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ab4:	f000 f9c4 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000094 	.word	0x20000094
 8001ac4:	40012400 	.word	0x40012400

08001ac8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001ace:	4a13      	ldr	r2, [pc, #76]	@ (8001b1c <MX_I2C1_Init+0x54>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001ad4:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <MX_I2C1_Init+0x58>)
 8001ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001ae6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <MX_I2C1_Init+0x50>)
 8001b06:	f001 f945 	bl	8002d94 <HAL_I2C_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b10:	f000 f996 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200000c4 	.word	0x200000c4
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	000186a0 	.word	0x000186a0

08001b24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1001;
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b58:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8001b5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b6a:	4814      	ldr	r0, [pc, #80]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b6c:	f002 fe3e 	bl	80047ec <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b76:	f000 f963 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b88:	f003 f976 	bl	8004e78 <HAL_TIM_ConfigClockSource>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b92:	f000 f955 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001ba4:	f003 fd04 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bae:	f000 f947 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000118 	.word	0x20000118

08001bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001be4:	4a32      	ldr	r2, [pc, #200]	@ (8001cb0 <MX_TIM3_Init+0xf0>)
 8001be6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001bf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c08:	4828      	ldr	r0, [pc, #160]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c0a:	f002 fe91 	bl	8004930 <HAL_TIM_PWM_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c14:	f000 f914 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4619      	mov	r1, r3
 8001c26:	4821      	ldr	r0, [pc, #132]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c28:	f003 fcc2 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c32:	f000 f905 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4817      	ldr	r0, [pc, #92]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c4e:	f003 f851 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c58:	f000 f8f2 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4812      	ldr	r0, [pc, #72]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c64:	f003 f846 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c6e:	f000 f8e7 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2208      	movs	r2, #8
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c7a:	f003 f83b 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c84:	f000 f8dc 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001c90:	f003 f830 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c9a:	f000 f8d1 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c9e:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM3_Init+0xec>)
 8001ca0:	f000 f9c2 	bl	8002028 <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	@ 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000160 	.word	0x20000160
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <MX_USART1_UART_Init+0x50>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_USART1_UART_Init+0x4c>)
 8001cec:	f003 fcd0 	bl	8005690 <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cf6:	f000 f8a3 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200001a8 	.word	0x200001a8
 8001d04:	40013800 	.word	0x40013800

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d52:	f043 0308 	orr.w	r3, r3, #8
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_GPIO_Init+0x90>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001d6a:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <MX_GPIO_Init+0x94>)
 8001d6c:	f000 ffe0 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 8001d70:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4619      	mov	r1, r3
 8001d88:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <MX_GPIO_Init+0x94>)
 8001d8a:	f000 fe4d 	bl	8002a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40011000 	.word	0x40011000

08001da0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e009      	b.n	8001dc6 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fc9e 	bl	80016fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbf1      	blt.n	8001db2 <_write+0x12>
  }
  return len;
 8001dce:	687b      	ldr	r3, [r7, #4]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	uint16_t leds[] = {LED_BLUE_Pin, LED_GREEN_Pin, LED_RED_Pin};
 8001de0:	4a13      	ldr	r2, [pc, #76]	@ (8001e30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dea:	6018      	str	r0, [r3, #0]
 8001dec:	3304      	adds	r3, #4
 8001dee:	8019      	strh	r1, [r3, #0]
	static uint8_t i = 0;
	if (htim == &htim2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d117      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		HAL_GPIO_TogglePin(GPIOC, leds[i]);
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	3310      	adds	r3, #16
 8001e00:	443b      	add	r3, r7
 8001e02:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001e06:	4619      	mov	r1, r3
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e0a:	f000 ffa9 	bl	8002d60 <HAL_GPIO_TogglePin>
		i++;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e18:	701a      	strb	r2, [r3, #0]
		if (i>2){
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d902      	bls.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x50>
			i=0;
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08006b08 	.word	0x08006b08
 8001e34:	20000118 	.word	0x20000118
 8001e38:	20000220 	.word	0x20000220
 8001e3c:	40011000 	.word	0x40011000

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <Error_Handler+0x8>

08001e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_MspInit+0x5c>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <HAL_MspInit+0x5c>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6193      	str	r3, [r2, #24]
 8001e5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_MspInit+0x5c>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <HAL_MspInit+0x5c>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <HAL_MspInit+0x5c>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <HAL_MspInit+0x5c>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_MspInit+0x60>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <HAL_MspInit+0x60>)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000

08001eb0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <HAL_ADC_MspInit+0x6c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d121      	bne.n	8001f14 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_ADC_MspInit+0x70>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <HAL_ADC_MspInit+0x70>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_ADC_MspInit+0x70>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_ADC_MspInit+0x70>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_ADC_MspInit+0x70>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_ADC_MspInit+0x70>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f00:	231f      	movs	r3, #31
 8001f02:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f04:	2303      	movs	r3, #3
 8001f06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <HAL_ADC_MspInit+0x74>)
 8001f10:	f000 fd8a 	bl	8002a28 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40012400 	.word	0x40012400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010800 	.word	0x40010800

08001f28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a15      	ldr	r2, [pc, #84]	@ (8001f98 <HAL_I2C_MspInit+0x70>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d123      	bne.n	8001f90 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f60:	23c0      	movs	r3, #192	@ 0xc0
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f64:	2312      	movs	r3, #18
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <HAL_I2C_MspInit+0x78>)
 8001f74:	f000 fd58 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f82:	61d3      	str	r3, [r2, #28]
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_I2C_MspInit+0x74>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb4:	d113      	bne.n	8001fde <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x44>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x44>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x44>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f000 fcf1 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd8:	201c      	movs	r0, #28
 8001fda:	f000 fd0a 	bl	80029f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <HAL_TIM_PWM_MspInit+0x34>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10b      	bne.n	8002016 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_TIM_PWM_MspInit+0x38>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <HAL_TIM_PWM_MspInit+0x38>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_TIM_PWM_MspInit+0x38>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40000400 	.word	0x40000400
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <HAL_TIM_MspPostInit+0x88>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d12f      	bne.n	80020a8 <HAL_TIM_MspPostInit+0x80>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_TIM_MspPostInit+0x8c>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <HAL_TIM_MspPostInit+0x8c>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <HAL_TIM_MspPostInit+0x8c>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_TIM_MspPostInit+0x8c>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a13      	ldr	r2, [pc, #76]	@ (80020b4 <HAL_TIM_MspPostInit+0x8c>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_TIM_MspPostInit+0x8c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002078:	23c0      	movs	r3, #192	@ 0xc0
 800207a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2302      	movs	r3, #2
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4619      	mov	r1, r3
 800208a:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <HAL_TIM_MspPostInit+0x90>)
 800208c:	f000 fccc 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002090:	2303      	movs	r3, #3
 8002092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2302      	movs	r3, #2
 800209a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	@ (80020bc <HAL_TIM_MspPostInit+0x94>)
 80020a4:	f000 fcc0 	bl	8002a28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	40010c00 	.word	0x40010c00

080020c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_UART_MspInit+0x8c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d131      	bne.n	8002144 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_UART_MspInit+0x90>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_UART_MspInit+0x90>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4619      	mov	r1, r3
 8002124:	480b      	ldr	r0, [pc, #44]	@ (8002154 <HAL_UART_MspInit+0x94>)
 8002126:	f000 fc7f 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4619      	mov	r1, r3
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <HAL_UART_MspInit+0x94>)
 8002140:	f000 fc72 	bl	8002a28 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000
 8002154:	40010800 	.word	0x40010800

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <NMI_Handler+0x4>

08002160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <MemManage_Handler+0x4>

08002170 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <UsageFault_Handler+0x4>

08002180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 f902 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <TIM2_IRQHandler+0x10>)
 80021b6:	f002 fcad 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000118 	.word	0x20000118

080021c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	e00a      	b.n	80021ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021d6:	f3af 8000 	nop.w
 80021da:	4601      	mov	r1, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	b2ca      	uxtb	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbf0      	blt.n	80021d6 <_read+0x12>
  }

  return len;
 80021f4:	687b      	ldr	r3, [r7, #4]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002224:	605a      	str	r2, [r3, #4]
  return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <_isatty>:

int _isatty(int file)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
	...

08002260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <_sbrk+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <_sbrk+0x60>)
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <_sbrk+0x64>)
 800227e:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <_sbrk+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d207      	bcs.n	80022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002290:	f003 fd22 	bl	8005cd8 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	220c      	movs	r2, #12
 8002298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e009      	b.n	80022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <_sbrk+0x64>)
 80022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20005000 	.word	0x20005000
 80022c0:	00000400 	.word	0x00000400
 80022c4:	20000224 	.word	0x20000224
 80022c8:	20000378 	.word	0x20000378

080022cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d8:	f7ff fff8 	bl	80022cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480b      	ldr	r0, [pc, #44]	@ (800230c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022de:	490c      	ldr	r1, [pc, #48]	@ (8002310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a09      	ldr	r2, [pc, #36]	@ (8002318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f4:	4c09      	ldr	r4, [pc, #36]	@ (800231c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f003 fcef 	bl	8005ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002306:	f7ff fa9f 	bl	8001848 <main>
  bx lr
 800230a:	4770      	bx	lr
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002314:	08006bb0 	.word	0x08006bb0
  ldr r2, =_sbss
 8002318:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800231c:	20000378 	.word	0x20000378

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <HAL_Init+0x28>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	@ (800234c <HAL_Init+0x28>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 fb35 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	200f      	movs	r0, #15
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff fd84 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fb4d 	bl	8002a0e <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f000 fb15 	bl	80029ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <HAL_IncTick+0x1c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_IncTick+0x20>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a03      	ldr	r2, [pc, #12]	@ (80023d0 <HAL_IncTick+0x20>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000008 	.word	0x20000008
 80023d0:	20000228 	.word	0x20000228

080023d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b02      	ldr	r3, [pc, #8]	@ (80023e4 <HAL_GetTick+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	20000228 	.word	0x20000228

080023e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0be      	b.n	8002588 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fd42 	bl	8001eb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f9ab 	bl	8002788 <ADC_ConversionStop_Disable>
 8002432:	4603      	mov	r3, r0
 8002434:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8099 	bne.w	8002576 <HAL_ADC_Init+0x18e>
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8095 	bne.w	8002576 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	f043 0202 	orr.w	r2, r3, #2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002468:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7b1b      	ldrb	r3, [r3, #12]
 800246e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002470:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4313      	orrs	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002480:	d003      	beq.n	800248a <HAL_ADC_Init+0xa2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <HAL_ADC_Init+0xa8>
 800248a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248e:	e000      	b.n	8002492 <HAL_ADC_Init+0xaa>
 8002490:	2300      	movs	r3, #0
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7d1b      	ldrb	r3, [r3, #20]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d119      	bne.n	80024d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7b1b      	ldrb	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	035a      	lsls	r2, r3, #13
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e00b      	b.n	80024d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <HAL_ADC_Init+0x1a8>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002504:	d003      	beq.n	800250e <HAL_ADC_Init+0x126>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d104      	bne.n	8002518 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	3b01      	subs	r3, #1
 8002514:	051b      	lsls	r3, r3, #20
 8002516:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	430a      	orrs	r2, r1
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <HAL_ADC_Init+0x1ac>)
 8002534:	4013      	ands	r3, r2
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	429a      	cmp	r2, r3
 800253a:	d10b      	bne.n	8002554 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002552:	e018      	b.n	8002586 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f023 0312 	bic.w	r3, r3, #18
 800255c:	f043 0210 	orr.w	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002574:	e007      	b.n	8002586 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	f043 0210 	orr.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	ffe1f7fd 	.word	0xffe1f7fd
 8002594:	ff1f0efe 	.word	0xff1f0efe

08002598 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x20>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0dc      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1da>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b06      	cmp	r3, #6
 80025c6:	d81c      	bhi.n	8002602 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b05      	subs	r3, #5
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	fa00 f203 	lsl.w	r2, r0, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002600:	e03c      	b.n	800267c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d81c      	bhi.n	8002644 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b23      	subs	r3, #35	@ 0x23
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	4019      	ands	r1, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b23      	subs	r3, #35	@ 0x23
 8002636:	fa00 f203 	lsl.w	r2, r0, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30
 8002642:	e01b      	b.n	800267c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b41      	subs	r3, #65	@ 0x41
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	4019      	ands	r1, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b41      	subs	r3, #65	@ 0x41
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b09      	cmp	r3, #9
 8002682:	d91c      	bls.n	80026be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	3b1e      	subs	r3, #30
 8002696:	2207      	movs	r2, #7
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	4019      	ands	r1, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6898      	ldr	r0, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	fa00 f203 	lsl.w	r2, r0, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	e019      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6919      	ldr	r1, [r3, #16]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	2207      	movs	r2, #7
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4019      	ands	r1, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6898      	ldr	r0, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d003      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d132      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_ADC_ConfigChannel+0x1e4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d125      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d126      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002728:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d11a      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <HAL_ADC_ConfigChannel+0x1e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <HAL_ADC_ConfigChannel+0x1ec>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9a      	lsrs	r2, r3, #18
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x1b2>
 8002756:	e007      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40012400 	.word	0x40012400
 8002780:	20000000 	.word	0x20000000
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d12e      	bne.n	8002800 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027b2:	f7ff fe0f 	bl	80023d4 <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027b8:	e01b      	b.n	80027f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ba:	f7ff fe0b 	bl	80023d4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d914      	bls.n	80027f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d10d      	bne.n	80027f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	f043 0210 	orr.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e007      	b.n	8002802 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d0dc      	beq.n	80027ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <__NVIC_SetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4906      	ldr	r1, [pc, #24]	@ (80028a4 <__NVIC_EnableIRQ+0x34>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <SysTick_Config>:
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	210f      	movs	r1, #15
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f7ff ff90 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff2d 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff42 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff90 	bl	80028fc <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5f 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff35 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffa2 	bl	8002960 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b08b      	sub	sp, #44	@ 0x2c
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3a:	e169      	b.n	8002d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8158 	bne.w	8002d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a9a      	ldr	r2, [pc, #616]	@ (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d05e      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a64:	4a98      	ldr	r2, [pc, #608]	@ (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d875      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a6a:	4a98      	ldr	r2, [pc, #608]	@ (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d058      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a70:	4a96      	ldr	r2, [pc, #600]	@ (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d86f      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a76:	4a96      	ldr	r2, [pc, #600]	@ (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d052      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a7c:	4a94      	ldr	r2, [pc, #592]	@ (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d869      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a82:	4a94      	ldr	r2, [pc, #592]	@ (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d04c      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a88:	4a92      	ldr	r2, [pc, #584]	@ (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d863      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a8e:	4a92      	ldr	r2, [pc, #584]	@ (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d046      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a94:	4a90      	ldr	r2, [pc, #576]	@ (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d85d      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a9a:	2b12      	cmp	r3, #18
 8002a9c:	d82a      	bhi.n	8002af4 <HAL_GPIO_Init+0xcc>
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d859      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <HAL_GPIO_Init+0x80>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002b23 	.word	0x08002b23
 8002aac:	08002afd 	.word	0x08002afd
 8002ab0:	08002b0f 	.word	0x08002b0f
 8002ab4:	08002b51 	.word	0x08002b51
 8002ab8:	08002b57 	.word	0x08002b57
 8002abc:	08002b57 	.word	0x08002b57
 8002ac0:	08002b57 	.word	0x08002b57
 8002ac4:	08002b57 	.word	0x08002b57
 8002ac8:	08002b57 	.word	0x08002b57
 8002acc:	08002b57 	.word	0x08002b57
 8002ad0:	08002b57 	.word	0x08002b57
 8002ad4:	08002b57 	.word	0x08002b57
 8002ad8:	08002b57 	.word	0x08002b57
 8002adc:	08002b57 	.word	0x08002b57
 8002ae0:	08002b57 	.word	0x08002b57
 8002ae4:	08002b57 	.word	0x08002b57
 8002ae8:	08002b57 	.word	0x08002b57
 8002aec:	08002b05 	.word	0x08002b05
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	4a79      	ldr	r2, [pc, #484]	@ (8002cdc <HAL_GPIO_Init+0x2b4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afa:	e02c      	b.n	8002b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	623b      	str	r3, [r7, #32]
          break;
 8002b02:	e029      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e024      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	3308      	adds	r3, #8
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e01f      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e01a      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e013      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	611a      	str	r2, [r3, #16]
          break;
 8002b42:	e009      	b.n	8002b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	615a      	str	r2, [r3, #20]
          break;
 8002b4e:	e003      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
          break;
 8002b54:	e000      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          break;
 8002b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	@ 0xff
 8002b5c:	d801      	bhi.n	8002b62 <HAL_GPIO_Init+0x13a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	e001      	b.n	8002b66 <HAL_GPIO_Init+0x13e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2bff      	cmp	r3, #255	@ 0xff
 8002b6c:	d802      	bhi.n	8002b74 <HAL_GPIO_Init+0x14c>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x152>
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	3b08      	subs	r3, #8
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	210f      	movs	r1, #15
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80b1 	beq.w	8002d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc0:	4a48      	ldr	r2, [pc, #288]	@ (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a40      	ldr	r2, [pc, #256]	@ (8002ce8 <HAL_GPIO_Init+0x2c0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1ec>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3f      	ldr	r2, [pc, #252]	@ (8002cec <HAL_GPIO_Init+0x2c4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1e8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cf0 <HAL_GPIO_Init+0x2c8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1e4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf4 <HAL_GPIO_Init+0x2cc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1e0>
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e004      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c14:	2300      	movs	r3, #0
 8002c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4093      	lsls	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c26:	492f      	ldr	r1, [pc, #188]	@ (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c40:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	492c      	ldr	r1, [pc, #176]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	4928      	ldr	r1, [pc, #160]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c68:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4922      	ldr	r1, [pc, #136]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c76:	4b20      	ldr	r3, [pc, #128]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	491e      	ldr	r1, [pc, #120]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c90:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4918      	ldr	r1, [pc, #96]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9e:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4914      	ldr	r1, [pc, #80]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	490e      	ldr	r1, [pc, #56]	@ (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e021      	b.n	8002d0a <HAL_GPIO_Init+0x2e2>
 8002cc6:	bf00      	nop
 8002cc8:	10320000 	.word	0x10320000
 8002ccc:	10310000 	.word	0x10310000
 8002cd0:	10220000 	.word	0x10220000
 8002cd4:	10210000 	.word	0x10210000
 8002cd8:	10120000 	.word	0x10120000
 8002cdc:	10110000 	.word	0x10110000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	40010c00 	.word	0x40010c00
 8002cf0:	40011000 	.word	0x40011000
 8002cf4:	40011400 	.word	0x40011400
 8002cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_GPIO_Init+0x304>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	4909      	ldr	r1, [pc, #36]	@ (8002d2c <HAL_GPIO_Init+0x304>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f47f ae8e 	bne.w	8002a3c <HAL_GPIO_Init+0x14>
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	372c      	adds	r7, #44	@ 0x2c
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43d9      	mvns	r1, r3
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	400b      	ands	r3, r1
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	611a      	str	r2, [r3, #16]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e12b      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff f8b4 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	@ 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f001 fbfc 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a81      	ldr	r2, [pc, #516]	@ (8003008 <HAL_I2C_Init+0x274>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a80      	ldr	r2, [pc, #512]	@ (800300c <HAL_I2C_Init+0x278>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x92>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003010 <HAL_I2C_Init+0x27c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0e7      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a78      	ldr	r2, [pc, #480]	@ (8003014 <HAL_I2C_Init+0x280>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003008 <HAL_I2C_Init+0x274>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0xd4>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0xe8>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a69      	ldr	r2, [pc, #420]	@ (8003018 <HAL_I2C_Init+0x284>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	495c      	ldr	r1, [pc, #368]	@ (8003008 <HAL_I2C_Init+0x274>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d819      	bhi.n	8002ed0 <HAL_I2C_Init+0x13c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_I2C_Init+0x138>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	e051      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e04f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_I2C_Init+0x168>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e58      	subs	r0, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_I2C_Init+0x18e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Init+0x196>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e022      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10e      	bne.n	8002f50 <HAL_I2C_Init+0x1bc>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e58      	subs	r0, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	440b      	add	r3, r1
 8002f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f4e:	e00f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6809      	ldr	r1, [r1, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6911      	ldr	r1, [r2, #16]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	000186a0 	.word	0x000186a0
 800300c:	001e847f 	.word	0x001e847f
 8003010:	003d08ff 	.word	0x003d08ff
 8003014:	431bde83 	.word	0x431bde83
 8003018:	10624dd3 	.word	0x10624dd3

0800301c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff f9cd 	bl	80023d4 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b20      	cmp	r3, #32
 8003046:	f040 80d9 	bne.w	80031fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2319      	movs	r3, #25
 8003050:	2201      	movs	r2, #1
 8003052:	496d      	ldr	r1, [pc, #436]	@ (8003208 <HAL_I2C_Mem_Write+0x1ec>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fccd 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	e0cc      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Mem_Write+0x56>
 800306e:	2302      	movs	r3, #2
 8003070:	e0c5      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d007      	beq.n	8003098 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2221      	movs	r2, #33	@ 0x21
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2240      	movs	r2, #64	@ 0x40
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a3a      	ldr	r2, [r7, #32]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a4d      	ldr	r2, [pc, #308]	@ (800320c <HAL_I2C_Mem_Write+0x1f0>)
 80030d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030da:	88f8      	ldrh	r0, [r7, #6]
 80030dc:	893a      	ldrh	r2, [r7, #8]
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4603      	mov	r3, r0
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fb04 	bl	80036f8 <I2C_RequestMemoryWrite>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d052      	beq.n	800319c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e081      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fd92 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	2b04      	cmp	r3, #4
 8003110:	d107      	bne.n	8003122 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06b      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11b      	bne.n	800319c <HAL_I2C_Mem_Write+0x180>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1aa      	bne.n	80030fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fd85 	bl	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d107      	bne.n	80031cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e016      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	00100002 	.word	0x00100002
 800320c:	ffff0000 	.word	0xffff0000

08003210 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	@ 0x30
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322e:	f7ff f8d1 	bl	80023d4 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 8250 	bne.w	80036e2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	4982      	ldr	r1, [pc, #520]	@ (8003454 <HAL_I2C_Mem_Read+0x244>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fbd1 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	e243      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Read+0x5a>
 8003266:	2302      	movs	r3, #2
 8003268:	e23c      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d007      	beq.n	8003290 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2222      	movs	r2, #34	@ 0x22
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2240      	movs	r2, #64	@ 0x40
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a62      	ldr	r2, [pc, #392]	@ (8003458 <HAL_I2C_Mem_Read+0x248>)
 80032d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4603      	mov	r3, r0
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fa9e 	bl	8003824 <I2C_RequestMemoryRead>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1f8      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d113      	bne.n	8003322 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e1cc      	b.n	80036bc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	2b01      	cmp	r3, #1
 8003328:	d11e      	bne.n	8003368 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003338:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800333a:	b672      	cpsid	i
}
 800333c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003364:	b662      	cpsie	i
}
 8003366:	e035      	b.n	80033d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b02      	cmp	r3, #2
 800336e:	d11e      	bne.n	80033ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
}
 8003382:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033aa:	b662      	cpsie	i
}
 80033ac:	e012      	b.n	80033d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033d4:	e172      	b.n	80036bc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b03      	cmp	r3, #3
 80033dc:	f200 811f 	bhi.w	800361e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d123      	bne.n	8003430 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fcab 	bl	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e173      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800342e:	e145      	b.n	80036bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003434:	2b02      	cmp	r3, #2
 8003436:	d152      	bne.n	80034de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	2200      	movs	r2, #0
 8003440:	4906      	ldr	r1, [pc, #24]	@ (800345c <HAL_I2C_Mem_Read+0x24c>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fad6 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e148      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
 8003452:	bf00      	nop
 8003454:	00100002 	.word	0x00100002
 8003458:	ffff0000 	.word	0xffff0000
 800345c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003460:	b672      	cpsid	i
}
 8003462:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034a6:	b662      	cpsie	i
}
 80034a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034dc:	e0ee      	b.n	80036bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e4:	2200      	movs	r2, #0
 80034e6:	4981      	ldr	r1, [pc, #516]	@ (80036ec <HAL_I2C_Mem_Read+0x4dc>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa83 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0f5      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800353e:	4b6c      	ldr	r3, [pc, #432]	@ (80036f0 <HAL_I2C_Mem_Read+0x4e0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	08db      	lsrs	r3, r3, #3
 8003544:	4a6b      	ldr	r2, [pc, #428]	@ (80036f4 <HAL_I2C_Mem_Read+0x4e4>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0a1a      	lsrs	r2, r3, #8
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00da      	lsls	r2, r3, #3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	3b01      	subs	r3, #1
 800355c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d118      	bne.n	8003596 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003586:	b662      	cpsie	i
}
 8003588:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0a6      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d1d9      	bne.n	8003558 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035e6:	b662      	cpsie	i
}
 80035e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800361c:	e04e      	b.n	80036bc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fb90 	bl	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e058      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d124      	bne.n	80036bc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003688:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f47f ae88 	bne.w	80033d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	@ 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	00010004 	.word	0x00010004
 80036f0:	20000000 	.word	0x20000000
 80036f4:	14f8b589 	.word	0x14f8b589

080036f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	2200      	movs	r2, #0
 800372a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f960 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003748:	d103      	bne.n	8003752 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e05f      	b.n	8003816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	6a3a      	ldr	r2, [r7, #32]
 800376a:	492d      	ldr	r1, [pc, #180]	@ (8003820 <I2C_RequestMemoryWrite+0x128>)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f9bb 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e04c      	b.n	8003816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003794:	6a39      	ldr	r1, [r7, #32]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fa46 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d107      	bne.n	80037ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e02b      	b.n	8003816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c4:	893b      	ldrh	r3, [r7, #8]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	611a      	str	r2, [r3, #16]
 80037ce:	e021      	b.n	8003814 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037d0:	893b      	ldrh	r3, [r7, #8]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e0:	6a39      	ldr	r1, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa20 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d107      	bne.n	8003806 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e005      	b.n	8003816 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800380a:	893b      	ldrh	r3, [r7, #8]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	00010002 	.word	0x00010002

08003824 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	461a      	mov	r2, r3
 8003832:	4603      	mov	r3, r0
 8003834:	817b      	strh	r3, [r7, #10]
 8003836:	460b      	mov	r3, r1
 8003838:	813b      	strh	r3, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800384c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2200      	movs	r2, #0
 8003866:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8c2 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003884:	d103      	bne.n	800388e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0aa      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	4952      	ldr	r1, [pc, #328]	@ (80039f0 <I2C_RequestMemoryRead+0x1cc>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f91d 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e097      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f9a8 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d107      	bne.n	80038f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e076      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003900:	893b      	ldrh	r3, [r7, #8]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]
 800390a:	e021      	b.n	8003950 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b29b      	uxth	r3, r3
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391c:	6a39      	ldr	r1, [r7, #32]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f982 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e050      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003946:	893b      	ldrh	r3, [r7, #8]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003952:	6a39      	ldr	r1, [r7, #32]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f967 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e035      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800398a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2200      	movs	r2, #0
 8003994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f82b 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b2:	d103      	bne.n	80039bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e013      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	4906      	ldr	r1, [pc, #24]	@ (80039f0 <I2C_RequestMemoryRead+0x1cc>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f886 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	00010002 	.word	0x00010002

080039f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a04:	e048      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d044      	beq.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fe fce1 	bl	80023d4 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d139      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10d      	bne.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	e00c      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d116      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e023      	b.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d10d      	bne.n	8003abe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	e00c      	b.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d093      	beq.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af6:	e071      	b.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b06:	d123      	bne.n	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e067      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d041      	beq.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fe fc3c 	bl	80023d4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d136      	bne.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10c      	bne.n	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e00b      	b.n	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e021      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10c      	bne.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e00b      	b.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bf14      	ite	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	2300      	moveq	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f47f af6d 	bne.w	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c34:	e034      	b.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f8e3 	bl	8003e02 <I2C_IsAcknowledgeFailed>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e034      	b.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d028      	beq.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe fbc1 	bl	80023d4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11d      	bne.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6e:	2b80      	cmp	r3, #128	@ 0x80
 8003c70:	d016      	beq.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e007      	b.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	d1c3      	bne.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cc4:	e034      	b.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f89b 	bl	8003e02 <I2C_IsAcknowledgeFailed>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e034      	b.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d028      	beq.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fb79 	bl	80023d4 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11d      	bne.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d016      	beq.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e007      	b.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d1c3      	bne.n	8003cc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d54:	e049      	b.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d119      	bne.n	8003d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0210 	mvn.w	r2, #16
 8003d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e030      	b.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7fe fb1c 	bl	80023d4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d016      	beq.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e007      	b.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	d1ae      	bne.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e18:	d11b      	bne.n	8003e52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f043 0204 	orr.w	r2, r3, #4
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e272      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8087 	beq.w	8003f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e80:	4b92      	ldr	r3, [pc, #584]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
 8003e98:	4b8c      	ldr	r3, [pc, #560]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x12c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d168      	bne.n	8003f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e24c      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x76>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e02e      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b7b      	ldr	r3, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b78      	ldr	r3, [pc, #480]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a77      	ldr	r2, [pc, #476]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0xbc>
 8003f02:	4b72      	ldr	r3, [pc, #456]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe fa4a 	bl	80023d4 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe fa46 	bl	80023d4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e200      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe4>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fa36 	bl	80023d4 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fa32 	bl	80023d4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1ec      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x10c>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
 8003fb2:	4b46      	ldr	r3, [pc, #280]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c0      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4939      	ldr	r1, [pc, #228]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe f9eb 	bl	80023d4 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe f9e7 	bl	80023d4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4927      	ldr	r1, [pc, #156]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe f9ca 	bl	80023d4 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe f9c6 	bl	80023d4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e180      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03a      	beq.n	80040e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fe f9aa 	bl	80023d4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fe f9a6 	bl	80023d4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e160      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f000 face 	bl	8004644 <RCC_Delay>
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7fe f990 	bl	80023d4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fe f98c 	bl	80023d4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d908      	bls.n	80040d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e146      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	42420000 	.word	0x42420000
 80040d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b92      	ldr	r3, [pc, #584]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e9      	bne.n	80040b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a6 	beq.w	800423e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a87      	ldr	r2, [pc, #540]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b85      	ldr	r3, [pc, #532]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe f94d 	bl	80023d4 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe f949 	bl	80023d4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e103      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x312>
 8004164:	4b6f      	ldr	r3, [pc, #444]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a6e      	ldr	r2, [pc, #440]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x334>
 800417a:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	4b67      	ldr	r3, [pc, #412]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a66      	ldr	r2, [pc, #408]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x356>
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a60      	ldr	r2, [pc, #384]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6213      	str	r3, [r2, #32]
 80041c2:	4b58      	ldr	r3, [pc, #352]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a57      	ldr	r2, [pc, #348]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fe f8fd 	bl	80023d4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe f8f9 	bl	80023d4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0b1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x37e>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fe f8e7 	bl	80023d4 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe f8e3 	bl	80023d4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e09b      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8087 	beq.w	8004356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d061      	beq.n	8004318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d146      	bne.n	80042ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fe f8b7 	bl	80023d4 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fe f8b3 	bl	80023d4 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e06d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004292:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4921      	ldr	r1, [pc, #132]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a19      	ldr	r1, [r3, #32]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	430b      	orrs	r3, r1
 80042b6:	491b      	ldr	r1, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fe f887 	bl	80023d4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fe f883 	bl	80023d4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042dc:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x46a>
 80042e8:	e035      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe f870 	bl	80023d4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fe f86c 	bl	80023d4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e026      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x498>
 8004316:	e01e      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e019      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_OscConfig+0x500>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0d0      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b67      	ldr	r3, [pc, #412]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4965      	ldr	r1, [pc, #404]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a58      	ldr	r2, [pc, #352]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80043e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e073      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4936      	ldr	r1, [pc, #216]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fd ffbe 	bl	80023d4 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fd ffba 	bl	80023d4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e053      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d210      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0207 	bic.w	r2, r3, #7
 800449a:	4922      	ldr	r1, [pc, #136]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044de:	4b12      	ldr	r3, [pc, #72]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 f821 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	@ (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <HAL_RCC_ClockConfig+0x1cc>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_ClockConfig+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd ff1c 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	08006b2c 	.word	0x08006b2c
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e027      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800456a:	613b      	str	r3, [r7, #16]
      break;
 800456c:	e027      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0c9b      	lsrs	r3, r3, #18
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0c5b      	lsrs	r3, r3, #17
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800459a:	fb03 f202 	mul.w	r2, r3, r2
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	613b      	str	r3, [r7, #16]
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ba:	613b      	str	r3, [r7, #16]
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	693b      	ldr	r3, [r7, #16]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	08006b44 	.word	0x08006b44
 80045d8:	08006b54 	.word	0x08006b54
 80045dc:	003d0900 	.word	0x003d0900

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b02      	ldr	r3, [pc, #8]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	20000000 	.word	0x20000000

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f8:	f7ff fff2 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	08006b3c 	.word	0x08006b3c

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004620:	f7ff ffde 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	08006b3c 	.word	0x08006b3c

08004644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <RCC_Delay+0x34>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	@ (800467c <RCC_Delay+0x38>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004660:	bf00      	nop
  }
  while (Delay --);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f9      	bne.n	8004660 <RCC_Delay+0x1c>
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	20000000 	.word	0x20000000
 800467c:	10624dd3 	.word	0x10624dd3

08004680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d07d      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800469c:	2300      	movs	r3, #0
 800469e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a0:	4b4f      	ldr	r3, [pc, #316]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10d      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	4b4c      	ldr	r3, [pc, #304]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4a4b      	ldr	r2, [pc, #300]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	61d3      	str	r3, [r2, #28]
 80046b8:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d118      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d4:	4b43      	ldr	r3, [pc, #268]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a42      	ldr	r2, [pc, #264]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e0:	f7fd fe78 	bl	80023d4 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd fe74 	bl	80023d4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	@ 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e06d      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b3a      	ldr	r3, [pc, #232]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004706:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02e      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	429a      	cmp	r2, r3
 8004722:	d027      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004724:	4b2e      	ldr	r3, [pc, #184]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800472e:	4b2e      	ldr	r3, [pc, #184]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004734:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800473a:	4a29      	ldr	r2, [pc, #164]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d014      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474a:	f7fd fe43 	bl	80023d4 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004750:	e00a      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004752:	f7fd fe3f 	bl	80023d4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e036      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ee      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004774:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4917      	ldr	r1, [pc, #92]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	4313      	orrs	r3, r2
 8004784:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d105      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478c:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	4a13      	ldr	r2, [pc, #76]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a4:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	490b      	ldr	r1, [pc, #44]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	4904      	ldr	r1, [pc, #16]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40007000 	.word	0x40007000
 80047e8:	42420440 	.word	0x42420440

080047ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e041      	b.n	8004882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd fbc6 	bl	8001fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 fc10 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e03a      	b.n	800491a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <HAL_TIM_Base_Start_IT+0x98>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a14      	ldr	r2, [pc, #80]	@ (8004928 <HAL_TIM_Base_Start_IT+0x9c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a13      	ldr	r2, [pc, #76]	@ (800492c <HAL_TIM_Base_Start_IT+0xa0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800

08004930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e041      	b.n	80049c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd fb48 	bl	8001fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fb6e 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <HAL_TIM_PWM_Start+0x24>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e022      	b.n	8004a3a <HAL_TIM_PWM_Start+0x6a>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d109      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x3e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	e015      	b.n	8004a3a <HAL_TIM_PWM_Start+0x6a>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d109      	bne.n	8004a28 <HAL_TIM_PWM_Start+0x58>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e008      	b.n	8004a3a <HAL_TIM_PWM_Start+0x6a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e05e      	b.n	8004b00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x82>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a50:	e013      	b.n	8004a7a <HAL_TIM_PWM_Start+0xaa>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0x92>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_PWM_Start+0xaa>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a70:	e003      	b.n	8004a7a <HAL_TIM_PWM_Start+0xaa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd70 	bl	8005568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004b08 <HAL_TIM_PWM_Start+0x138>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d107      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_TIM_PWM_Start+0x138>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_PWM_Start+0xfa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_PWM_Start+0xfa>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <HAL_TIM_PWM_Start+0x13c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_PWM_Start+0xfa>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a12      	ldr	r2, [pc, #72]	@ (8004b10 <HAL_TIM_PWM_Start+0x140>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d010      	beq.n	8004afe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e007      	b.n	8004afe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800

08004b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d020      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01b      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0202 	mvn.w	r2, #2
 8004b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa5a 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa4d 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa5c 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d020      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01b      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0204 	mvn.w	r2, #4
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa34 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa27 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa36 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d020      	beq.n	8004c10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01b      	beq.n	8004c10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0208 	mvn.w	r2, #8
 8004be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2204      	movs	r2, #4
 8004be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa0e 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa01 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa10 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0210 	mvn.w	r2, #16
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2208      	movs	r2, #8
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9e8 	bl	8005018 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9db 	bl	8005006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9ea 	bl	800502a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0201 	mvn.w	r2, #1
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fd f8ac 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fced 	bl	800567e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9ba 	bl	800503c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0220 	mvn.w	r2, #32
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fcc0 	bl	800566c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0ae      	b.n	8004e70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	f200 809f 	bhi.w	8004e60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d5d 	.word	0x08004d5d
 8004d2c:	08004e61 	.word	0x08004e61
 8004d30:	08004e61 	.word	0x08004e61
 8004d34:	08004e61 	.word	0x08004e61
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004e61 	.word	0x08004e61
 8004d40:	08004e61 	.word	0x08004e61
 8004d44:	08004e61 	.word	0x08004e61
 8004d48:	08004ddf 	.word	0x08004ddf
 8004d4c:	08004e61 	.word	0x08004e61
 8004d50:	08004e61 	.word	0x08004e61
 8004d54:	08004e61 	.word	0x08004e61
 8004d58:	08004e1f 	.word	0x08004e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f9e2 	bl	800512c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0208 	orr.w	r2, r2, #8
 8004d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0204 	bic.w	r2, r2, #4
 8004d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6999      	ldr	r1, [r3, #24]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	619a      	str	r2, [r3, #24]
      break;
 8004d9a:	e064      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fa28 	bl	80051f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6999      	ldr	r1, [r3, #24]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	619a      	str	r2, [r3, #24]
      break;
 8004ddc:	e043      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fa71 	bl	80052cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0208 	orr.w	r2, r2, #8
 8004df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0204 	bic.w	r2, r2, #4
 8004e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69d9      	ldr	r1, [r3, #28]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	61da      	str	r2, [r3, #28]
      break;
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fabb 	bl	80053a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69d9      	ldr	r1, [r3, #28]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	61da      	str	r2, [r3, #28]
      break;
 8004e5e:	e002      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIM_ConfigClockSource+0x1c>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e0b4      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x186>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ecc:	d03e      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0xd4>
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed2:	f200 8087 	bhi.w	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eda:	f000 8086 	beq.w	8004fea <HAL_TIM_ConfigClockSource+0x172>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee2:	d87f      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b70      	cmp	r3, #112	@ 0x70
 8004ee6:	d01a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0xa6>
 8004ee8:	2b70      	cmp	r3, #112	@ 0x70
 8004eea:	d87b      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b60      	cmp	r3, #96	@ 0x60
 8004eee:	d050      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0x11a>
 8004ef0:	2b60      	cmp	r3, #96	@ 0x60
 8004ef2:	d877      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b50      	cmp	r3, #80	@ 0x50
 8004ef6:	d03c      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xfa>
 8004ef8:	2b50      	cmp	r3, #80	@ 0x50
 8004efa:	d873      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b40      	cmp	r3, #64	@ 0x40
 8004efe:	d058      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d86f      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b30      	cmp	r3, #48	@ 0x30
 8004f06:	d064      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b30      	cmp	r3, #48	@ 0x30
 8004f0a:	d86b      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d060      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d867      	bhi.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d05c      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d05a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	e062      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f2e:	f000 fafc 	bl	800552a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	609a      	str	r2, [r3, #8]
      break;
 8004f4a:	e04f      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f5c:	f000 fae5 	bl	800552a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f6e:	609a      	str	r2, [r3, #8]
      break;
 8004f70:	e03c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f000 fa5c 	bl	800543c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2150      	movs	r1, #80	@ 0x50
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fab3 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004f90:	e02c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 fa7a 	bl	8005498 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2160      	movs	r1, #96	@ 0x60
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 faa3 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e01c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 fa3c 	bl	800543c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2140      	movs	r1, #64	@ 0x40
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fa93 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e00c      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f000 fa8a 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004fe2:	e003      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
	...

08005050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2f      	ldr	r2, [pc, #188]	@ (8005120 <TIM_Base_SetConfig+0xd0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_Base_SetConfig+0x30>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0x30>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a2c      	ldr	r2, [pc, #176]	@ (8005124 <TIM_Base_SetConfig+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0x30>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2b      	ldr	r2, [pc, #172]	@ (8005128 <TIM_Base_SetConfig+0xd8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a22      	ldr	r2, [pc, #136]	@ (8005120 <TIM_Base_SetConfig+0xd0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0x62>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <TIM_Base_SetConfig+0xd4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <TIM_Base_SetConfig+0xd8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005120 <TIM_Base_SetConfig+0xd0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d103      	bne.n	80050f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f023 0201 	bic.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]
  }
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800

0800512c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f023 0201 	bic.w	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 0302 	bic.w	r3, r3, #2
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a1c      	ldr	r2, [pc, #112]	@ (80051f4 <TIM_OC1_SetConfig+0xc8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10c      	bne.n	80051a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0308 	bic.w	r3, r3, #8
 800518e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a13      	ldr	r2, [pc, #76]	@ (80051f4 <TIM_OC1_SetConfig+0xc8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d111      	bne.n	80051ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00

080051f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f023 0210 	bic.w	r2, r3, #16
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0320 	bic.w	r3, r3, #32
 8005242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1d      	ldr	r2, [pc, #116]	@ (80052c8 <TIM_OC2_SetConfig+0xd0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d10d      	bne.n	8005274 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a14      	ldr	r2, [pc, #80]	@ (80052c8 <TIM_OC2_SetConfig+0xd0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d113      	bne.n	80052a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40012c00 	.word	0x40012c00

080052cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <TIM_OC3_SetConfig+0xd0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d10d      	bne.n	8005346 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a14      	ldr	r2, [pc, #80]	@ (800539c <TIM_OC3_SetConfig+0xd0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d113      	bne.n	8005376 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40012c00 	.word	0x40012c00

080053a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	031b      	lsls	r3, r3, #12
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a0f      	ldr	r2, [pc, #60]	@ (8005438 <TIM_OC4_SetConfig+0x98>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d109      	bne.n	8005414 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00

0800543c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0201 	bic.w	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 030a 	bic.w	r3, r3, #10
 8005478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0210 	bic.w	r2, r3, #16
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	031b      	lsls	r3, r3, #12
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	f043 0307 	orr.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005544:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	021a      	lsls	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	431a      	orrs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	609a      	str	r2, [r3, #8]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	2201      	movs	r2, #1
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1a      	ldr	r2, [r3, #32]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	43db      	mvns	r3, r3
 800558a:	401a      	ands	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e046      	b.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005614:	d009      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a12      	ldr	r2, [pc, #72]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a10      	ldr	r2, [pc, #64]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10c      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800

0800566c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr

0800567e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e042      	b.n	8005728 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fc fd02 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	@ 0x24
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f82b 	bl	8005730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800576a:	f023 030c 	bic.w	r3, r3, #12
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	430b      	orrs	r3, r1
 8005776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2c      	ldr	r2, [pc, #176]	@ (8005844 <UART_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d103      	bne.n	80057a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005798:	f7fe ff40 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	e002      	b.n	80057a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7fe ff28 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80057a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009a      	lsls	r2, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <UART_SetConfig+0x118>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	0119      	lsls	r1, r3, #4
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009a      	lsls	r2, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <UART_SetConfig+0x118>)
 80057de:	fba3 0302 	umull	r0, r3, r3, r2
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2064      	movs	r0, #100	@ 0x64
 80057e6:	fb00 f303 	mul.w	r3, r0, r3
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	3332      	adds	r3, #50	@ 0x32
 80057f0:	4a15      	ldr	r2, [pc, #84]	@ (8005848 <UART_SetConfig+0x118>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057fc:	4419      	add	r1, r3
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009a      	lsls	r2, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	fbb2 f2f3 	udiv	r2, r2, r3
 8005814:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <UART_SetConfig+0x118>)
 8005816:	fba3 0302 	umull	r0, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2064      	movs	r0, #100	@ 0x64
 800581e:	fb00 f303 	mul.w	r3, r0, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	@ 0x32
 8005828:	4a07      	ldr	r2, [pc, #28]	@ (8005848 <UART_SetConfig+0x118>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	440a      	add	r2, r1
 800583a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40013800 	.word	0x40013800
 8005848:	51eb851f 	.word	0x51eb851f

0800584c <std>:
 800584c:	2300      	movs	r3, #0
 800584e:	b510      	push	{r4, lr}
 8005850:	4604      	mov	r4, r0
 8005852:	e9c0 3300 	strd	r3, r3, [r0]
 8005856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800585a:	6083      	str	r3, [r0, #8]
 800585c:	8181      	strh	r1, [r0, #12]
 800585e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005860:	81c2      	strh	r2, [r0, #14]
 8005862:	6183      	str	r3, [r0, #24]
 8005864:	4619      	mov	r1, r3
 8005866:	2208      	movs	r2, #8
 8005868:	305c      	adds	r0, #92	@ 0x5c
 800586a:	f000 f9e7 	bl	8005c3c <memset>
 800586e:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <std+0x58>)
 8005870:	6224      	str	r4, [r4, #32]
 8005872:	6263      	str	r3, [r4, #36]	@ 0x24
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <std+0x5c>)
 8005876:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <std+0x60>)
 800587a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <std+0x64>)
 800587e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005880:	4b0c      	ldr	r3, [pc, #48]	@ (80058b4 <std+0x68>)
 8005882:	429c      	cmp	r4, r3
 8005884:	d006      	beq.n	8005894 <std+0x48>
 8005886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800588a:	4294      	cmp	r4, r2
 800588c:	d002      	beq.n	8005894 <std+0x48>
 800588e:	33d0      	adds	r3, #208	@ 0xd0
 8005890:	429c      	cmp	r4, r3
 8005892:	d105      	bne.n	80058a0 <std+0x54>
 8005894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589c:	f000 ba46 	b.w	8005d2c <__retarget_lock_init_recursive>
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	08005a8d 	.word	0x08005a8d
 80058a8:	08005aaf 	.word	0x08005aaf
 80058ac:	08005ae7 	.word	0x08005ae7
 80058b0:	08005b0b 	.word	0x08005b0b
 80058b4:	2000022c 	.word	0x2000022c

080058b8 <stdio_exit_handler>:
 80058b8:	4a02      	ldr	r2, [pc, #8]	@ (80058c4 <stdio_exit_handler+0xc>)
 80058ba:	4903      	ldr	r1, [pc, #12]	@ (80058c8 <stdio_exit_handler+0x10>)
 80058bc:	4803      	ldr	r0, [pc, #12]	@ (80058cc <stdio_exit_handler+0x14>)
 80058be:	f000 b869 	b.w	8005994 <_fwalk_sglue>
 80058c2:	bf00      	nop
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	08006021 	.word	0x08006021
 80058cc:	2000001c 	.word	0x2000001c

080058d0 <cleanup_stdio>:
 80058d0:	6841      	ldr	r1, [r0, #4]
 80058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <cleanup_stdio+0x34>)
 80058d4:	b510      	push	{r4, lr}
 80058d6:	4299      	cmp	r1, r3
 80058d8:	4604      	mov	r4, r0
 80058da:	d001      	beq.n	80058e0 <cleanup_stdio+0x10>
 80058dc:	f000 fba0 	bl	8006020 <_fflush_r>
 80058e0:	68a1      	ldr	r1, [r4, #8]
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <cleanup_stdio+0x38>)
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d002      	beq.n	80058ee <cleanup_stdio+0x1e>
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fb99 	bl	8006020 <_fflush_r>
 80058ee:	68e1      	ldr	r1, [r4, #12]
 80058f0:	4b06      	ldr	r3, [pc, #24]	@ (800590c <cleanup_stdio+0x3c>)
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d004      	beq.n	8005900 <cleanup_stdio+0x30>
 80058f6:	4620      	mov	r0, r4
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fc:	f000 bb90 	b.w	8006020 <_fflush_r>
 8005900:	bd10      	pop	{r4, pc}
 8005902:	bf00      	nop
 8005904:	2000022c 	.word	0x2000022c
 8005908:	20000294 	.word	0x20000294
 800590c:	200002fc 	.word	0x200002fc

08005910 <global_stdio_init.part.0>:
 8005910:	b510      	push	{r4, lr}
 8005912:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <global_stdio_init.part.0+0x30>)
 8005914:	4c0b      	ldr	r4, [pc, #44]	@ (8005944 <global_stdio_init.part.0+0x34>)
 8005916:	4a0c      	ldr	r2, [pc, #48]	@ (8005948 <global_stdio_init.part.0+0x38>)
 8005918:	4620      	mov	r0, r4
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	2104      	movs	r1, #4
 800591e:	2200      	movs	r2, #0
 8005920:	f7ff ff94 	bl	800584c <std>
 8005924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005928:	2201      	movs	r2, #1
 800592a:	2109      	movs	r1, #9
 800592c:	f7ff ff8e 	bl	800584c <std>
 8005930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005934:	2202      	movs	r2, #2
 8005936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800593a:	2112      	movs	r1, #18
 800593c:	f7ff bf86 	b.w	800584c <std>
 8005940:	20000364 	.word	0x20000364
 8005944:	2000022c 	.word	0x2000022c
 8005948:	080058b9 	.word	0x080058b9

0800594c <__sfp_lock_acquire>:
 800594c:	4801      	ldr	r0, [pc, #4]	@ (8005954 <__sfp_lock_acquire+0x8>)
 800594e:	f000 b9ee 	b.w	8005d2e <__retarget_lock_acquire_recursive>
 8005952:	bf00      	nop
 8005954:	2000036d 	.word	0x2000036d

08005958 <__sfp_lock_release>:
 8005958:	4801      	ldr	r0, [pc, #4]	@ (8005960 <__sfp_lock_release+0x8>)
 800595a:	f000 b9e9 	b.w	8005d30 <__retarget_lock_release_recursive>
 800595e:	bf00      	nop
 8005960:	2000036d 	.word	0x2000036d

08005964 <__sinit>:
 8005964:	b510      	push	{r4, lr}
 8005966:	4604      	mov	r4, r0
 8005968:	f7ff fff0 	bl	800594c <__sfp_lock_acquire>
 800596c:	6a23      	ldr	r3, [r4, #32]
 800596e:	b11b      	cbz	r3, 8005978 <__sinit+0x14>
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	f7ff bff0 	b.w	8005958 <__sfp_lock_release>
 8005978:	4b04      	ldr	r3, [pc, #16]	@ (800598c <__sinit+0x28>)
 800597a:	6223      	str	r3, [r4, #32]
 800597c:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <__sinit+0x2c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f5      	bne.n	8005970 <__sinit+0xc>
 8005984:	f7ff ffc4 	bl	8005910 <global_stdio_init.part.0>
 8005988:	e7f2      	b.n	8005970 <__sinit+0xc>
 800598a:	bf00      	nop
 800598c:	080058d1 	.word	0x080058d1
 8005990:	20000364 	.word	0x20000364

08005994 <_fwalk_sglue>:
 8005994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005998:	4607      	mov	r7, r0
 800599a:	4688      	mov	r8, r1
 800599c:	4614      	mov	r4, r2
 800599e:	2600      	movs	r6, #0
 80059a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059a4:	f1b9 0901 	subs.w	r9, r9, #1
 80059a8:	d505      	bpl.n	80059b6 <_fwalk_sglue+0x22>
 80059aa:	6824      	ldr	r4, [r4, #0]
 80059ac:	2c00      	cmp	r4, #0
 80059ae:	d1f7      	bne.n	80059a0 <_fwalk_sglue+0xc>
 80059b0:	4630      	mov	r0, r6
 80059b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d907      	bls.n	80059cc <_fwalk_sglue+0x38>
 80059bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059c0:	3301      	adds	r3, #1
 80059c2:	d003      	beq.n	80059cc <_fwalk_sglue+0x38>
 80059c4:	4629      	mov	r1, r5
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c0      	blx	r8
 80059ca:	4306      	orrs	r6, r0
 80059cc:	3568      	adds	r5, #104	@ 0x68
 80059ce:	e7e9      	b.n	80059a4 <_fwalk_sglue+0x10>

080059d0 <_puts_r>:
 80059d0:	6a03      	ldr	r3, [r0, #32]
 80059d2:	b570      	push	{r4, r5, r6, lr}
 80059d4:	4605      	mov	r5, r0
 80059d6:	460e      	mov	r6, r1
 80059d8:	6884      	ldr	r4, [r0, #8]
 80059da:	b90b      	cbnz	r3, 80059e0 <_puts_r+0x10>
 80059dc:	f7ff ffc2 	bl	8005964 <__sinit>
 80059e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059e2:	07db      	lsls	r3, r3, #31
 80059e4:	d405      	bmi.n	80059f2 <_puts_r+0x22>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	0598      	lsls	r0, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <_puts_r+0x22>
 80059ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ee:	f000 f99e 	bl	8005d2e <__retarget_lock_acquire_recursive>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	0719      	lsls	r1, r3, #28
 80059f6:	d502      	bpl.n	80059fe <_puts_r+0x2e>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d135      	bne.n	8005a6a <_puts_r+0x9a>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f8c5 	bl	8005b90 <__swsetup_r>
 8005a06:	b380      	cbz	r0, 8005a6a <_puts_r+0x9a>
 8005a08:	f04f 35ff 	mov.w	r5, #4294967295
 8005a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a0e:	07da      	lsls	r2, r3, #31
 8005a10:	d405      	bmi.n	8005a1e <_puts_r+0x4e>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	059b      	lsls	r3, r3, #22
 8005a16:	d402      	bmi.n	8005a1e <_puts_r+0x4e>
 8005a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a1a:	f000 f989 	bl	8005d30 <__retarget_lock_release_recursive>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da04      	bge.n	8005a30 <_puts_r+0x60>
 8005a26:	69a2      	ldr	r2, [r4, #24]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	dc17      	bgt.n	8005a5c <_puts_r+0x8c>
 8005a2c:	290a      	cmp	r1, #10
 8005a2e:	d015      	beq.n	8005a5c <_puts_r+0x8c>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	7019      	strb	r1, [r3, #0]
 8005a38:	68a3      	ldr	r3, [r4, #8]
 8005a3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	60a3      	str	r3, [r4, #8]
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d1ed      	bne.n	8005a22 <_puts_r+0x52>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da11      	bge.n	8005a6e <_puts_r+0x9e>
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	210a      	movs	r1, #10
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f85f 	bl	8005b12 <__swbuf_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d0d7      	beq.n	8005a08 <_puts_r+0x38>
 8005a58:	250a      	movs	r5, #10
 8005a5a:	e7d7      	b.n	8005a0c <_puts_r+0x3c>
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f857 	bl	8005b12 <__swbuf_r>
 8005a64:	3001      	adds	r0, #1
 8005a66:	d1e7      	bne.n	8005a38 <_puts_r+0x68>
 8005a68:	e7ce      	b.n	8005a08 <_puts_r+0x38>
 8005a6a:	3e01      	subs	r6, #1
 8005a6c:	e7e4      	b.n	8005a38 <_puts_r+0x68>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	220a      	movs	r2, #10
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e7ee      	b.n	8005a58 <_puts_r+0x88>
	...

08005a7c <puts>:
 8005a7c:	4b02      	ldr	r3, [pc, #8]	@ (8005a88 <puts+0xc>)
 8005a7e:	4601      	mov	r1, r0
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	f7ff bfa5 	b.w	80059d0 <_puts_r>
 8005a86:	bf00      	nop
 8005a88:	20000018 	.word	0x20000018

08005a8c <__sread>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	460c      	mov	r4, r1
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	f000 f8fc 	bl	8005c90 <_read_r>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	bfab      	itete	ge
 8005a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8005aa0:	181b      	addge	r3, r3, r0
 8005aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005aa6:	bfac      	ite	ge
 8005aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005aaa:	81a3      	strhlt	r3, [r4, #12]
 8005aac:	bd10      	pop	{r4, pc}

08005aae <__swrite>:
 8005aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab2:	461f      	mov	r7, r3
 8005ab4:	898b      	ldrh	r3, [r1, #12]
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	05db      	lsls	r3, r3, #23
 8005aba:	460c      	mov	r4, r1
 8005abc:	4616      	mov	r6, r2
 8005abe:	d505      	bpl.n	8005acc <__swrite+0x1e>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac8:	f000 f8d0 	bl	8005c6c <_lseek_r>
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	4632      	mov	r2, r6
 8005ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	463b      	mov	r3, r7
 8005ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae2:	f000 b8e7 	b.w	8005cb4 <_write_r>

08005ae6 <__sseek>:
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	460c      	mov	r4, r1
 8005aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aee:	f000 f8bd 	bl	8005c6c <_lseek_r>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	bf15      	itete	ne
 8005af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b02:	81a3      	strheq	r3, [r4, #12]
 8005b04:	bf18      	it	ne
 8005b06:	81a3      	strhne	r3, [r4, #12]
 8005b08:	bd10      	pop	{r4, pc}

08005b0a <__sclose>:
 8005b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0e:	f000 b89d 	b.w	8005c4c <_close_r>

08005b12 <__swbuf_r>:
 8005b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b14:	460e      	mov	r6, r1
 8005b16:	4614      	mov	r4, r2
 8005b18:	4605      	mov	r5, r0
 8005b1a:	b118      	cbz	r0, 8005b24 <__swbuf_r+0x12>
 8005b1c:	6a03      	ldr	r3, [r0, #32]
 8005b1e:	b90b      	cbnz	r3, 8005b24 <__swbuf_r+0x12>
 8005b20:	f7ff ff20 	bl	8005964 <__sinit>
 8005b24:	69a3      	ldr	r3, [r4, #24]
 8005b26:	60a3      	str	r3, [r4, #8]
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	071a      	lsls	r2, r3, #28
 8005b2c:	d501      	bpl.n	8005b32 <__swbuf_r+0x20>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	b943      	cbnz	r3, 8005b44 <__swbuf_r+0x32>
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 f82b 	bl	8005b90 <__swsetup_r>
 8005b3a:	b118      	cbz	r0, 8005b44 <__swbuf_r+0x32>
 8005b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b40:	4638      	mov	r0, r7
 8005b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	6922      	ldr	r2, [r4, #16]
 8005b48:	b2f6      	uxtb	r6, r6
 8005b4a:	1a98      	subs	r0, r3, r2
 8005b4c:	6963      	ldr	r3, [r4, #20]
 8005b4e:	4637      	mov	r7, r6
 8005b50:	4283      	cmp	r3, r0
 8005b52:	dc05      	bgt.n	8005b60 <__swbuf_r+0x4e>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 fa62 	bl	8006020 <_fflush_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d1ed      	bne.n	8005b3c <__swbuf_r+0x2a>
 8005b60:	68a3      	ldr	r3, [r4, #8]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	6022      	str	r2, [r4, #0]
 8005b6c:	701e      	strb	r6, [r3, #0]
 8005b6e:	6962      	ldr	r2, [r4, #20]
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d004      	beq.n	8005b80 <__swbuf_r+0x6e>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	07db      	lsls	r3, r3, #31
 8005b7a:	d5e1      	bpl.n	8005b40 <__swbuf_r+0x2e>
 8005b7c:	2e0a      	cmp	r6, #10
 8005b7e:	d1df      	bne.n	8005b40 <__swbuf_r+0x2e>
 8005b80:	4621      	mov	r1, r4
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 fa4c 	bl	8006020 <_fflush_r>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0d9      	beq.n	8005b40 <__swbuf_r+0x2e>
 8005b8c:	e7d6      	b.n	8005b3c <__swbuf_r+0x2a>
	...

08005b90 <__swsetup_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4b29      	ldr	r3, [pc, #164]	@ (8005c38 <__swsetup_r+0xa8>)
 8005b94:	4605      	mov	r5, r0
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	460c      	mov	r4, r1
 8005b9a:	b118      	cbz	r0, 8005ba4 <__swsetup_r+0x14>
 8005b9c:	6a03      	ldr	r3, [r0, #32]
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <__swsetup_r+0x14>
 8005ba0:	f7ff fee0 	bl	8005964 <__sinit>
 8005ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba8:	0719      	lsls	r1, r3, #28
 8005baa:	d422      	bmi.n	8005bf2 <__swsetup_r+0x62>
 8005bac:	06da      	lsls	r2, r3, #27
 8005bae:	d407      	bmi.n	8005bc0 <__swsetup_r+0x30>
 8005bb0:	2209      	movs	r2, #9
 8005bb2:	602a      	str	r2, [r5, #0]
 8005bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	e033      	b.n	8005c28 <__swsetup_r+0x98>
 8005bc0:	0758      	lsls	r0, r3, #29
 8005bc2:	d512      	bpl.n	8005bea <__swsetup_r+0x5a>
 8005bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bc6:	b141      	cbz	r1, 8005bda <__swsetup_r+0x4a>
 8005bc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	d002      	beq.n	8005bd6 <__swsetup_r+0x46>
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 f8af 	bl	8005d34 <_free_r>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	2300      	movs	r3, #0
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f043 0308 	orr.w	r3, r3, #8
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	b94b      	cbnz	r3, 8005c0a <__swsetup_r+0x7a>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c00:	d003      	beq.n	8005c0a <__swsetup_r+0x7a>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 fa58 	bl	80060ba <__smakebuf_r>
 8005c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0e:	f013 0201 	ands.w	r2, r3, #1
 8005c12:	d00a      	beq.n	8005c2a <__swsetup_r+0x9a>
 8005c14:	2200      	movs	r2, #0
 8005c16:	60a2      	str	r2, [r4, #8]
 8005c18:	6962      	ldr	r2, [r4, #20]
 8005c1a:	4252      	negs	r2, r2
 8005c1c:	61a2      	str	r2, [r4, #24]
 8005c1e:	6922      	ldr	r2, [r4, #16]
 8005c20:	b942      	cbnz	r2, 8005c34 <__swsetup_r+0xa4>
 8005c22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c26:	d1c5      	bne.n	8005bb4 <__swsetup_r+0x24>
 8005c28:	bd38      	pop	{r3, r4, r5, pc}
 8005c2a:	0799      	lsls	r1, r3, #30
 8005c2c:	bf58      	it	pl
 8005c2e:	6962      	ldrpl	r2, [r4, #20]
 8005c30:	60a2      	str	r2, [r4, #8]
 8005c32:	e7f4      	b.n	8005c1e <__swsetup_r+0x8e>
 8005c34:	2000      	movs	r0, #0
 8005c36:	e7f7      	b.n	8005c28 <__swsetup_r+0x98>
 8005c38:	20000018 	.word	0x20000018

08005c3c <memset>:
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4402      	add	r2, r0
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <memset+0xa>
 8005c44:	4770      	bx	lr
 8005c46:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4a:	e7f9      	b.n	8005c40 <memset+0x4>

08005c4c <_close_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4d05      	ldr	r5, [pc, #20]	@ (8005c68 <_close_r+0x1c>)
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fc fad1 	bl	80021fe <_close>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_close_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_close_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000368 	.word	0x20000368

08005c6c <_lseek_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	2200      	movs	r2, #0
 8005c76:	4d05      	ldr	r5, [pc, #20]	@ (8005c8c <_lseek_r+0x20>)
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fc fae3 	bl	8002246 <_lseek>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_lseek_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_lseek_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	20000368 	.word	0x20000368

08005c90 <_read_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4604      	mov	r4, r0
 8005c94:	4608      	mov	r0, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	2200      	movs	r2, #0
 8005c9a:	4d05      	ldr	r5, [pc, #20]	@ (8005cb0 <_read_r+0x20>)
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f7fc fa90 	bl	80021c4 <_read>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_read_r+0x1e>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_read_r+0x1e>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20000368 	.word	0x20000368

08005cb4 <_write_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4d05      	ldr	r5, [pc, #20]	@ (8005cd4 <_write_r+0x20>)
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7fc f86c 	bl	8001da0 <_write>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_write_r+0x1e>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_write_r+0x1e>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	20000368 	.word	0x20000368

08005cd8 <__errno>:
 8005cd8:	4b01      	ldr	r3, [pc, #4]	@ (8005ce0 <__errno+0x8>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000018 	.word	0x20000018

08005ce4 <__libc_init_array>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	4d0c      	ldr	r5, [pc, #48]	@ (8005d1c <__libc_init_array+0x38>)
 8005cea:	4c0d      	ldr	r4, [pc, #52]	@ (8005d20 <__libc_init_array+0x3c>)
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	42a6      	cmp	r6, r4
 8005cf2:	d109      	bne.n	8005d08 <__libc_init_array+0x24>
 8005cf4:	f000 fee2 	bl	8006abc <_init>
 8005cf8:	2600      	movs	r6, #0
 8005cfa:	4d0a      	ldr	r5, [pc, #40]	@ (8005d24 <__libc_init_array+0x40>)
 8005cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8005d28 <__libc_init_array+0x44>)
 8005cfe:	1b64      	subs	r4, r4, r5
 8005d00:	10a4      	asrs	r4, r4, #2
 8005d02:	42a6      	cmp	r6, r4
 8005d04:	d105      	bne.n	8005d12 <__libc_init_array+0x2e>
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0c:	4798      	blx	r3
 8005d0e:	3601      	adds	r6, #1
 8005d10:	e7ee      	b.n	8005cf0 <__libc_init_array+0xc>
 8005d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d16:	4798      	blx	r3
 8005d18:	3601      	adds	r6, #1
 8005d1a:	e7f2      	b.n	8005d02 <__libc_init_array+0x1e>
 8005d1c:	08006ba8 	.word	0x08006ba8
 8005d20:	08006ba8 	.word	0x08006ba8
 8005d24:	08006ba8 	.word	0x08006ba8
 8005d28:	08006bac 	.word	0x08006bac

08005d2c <__retarget_lock_init_recursive>:
 8005d2c:	4770      	bx	lr

08005d2e <__retarget_lock_acquire_recursive>:
 8005d2e:	4770      	bx	lr

08005d30 <__retarget_lock_release_recursive>:
 8005d30:	4770      	bx	lr
	...

08005d34 <_free_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4605      	mov	r5, r0
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	d040      	beq.n	8005dbe <_free_r+0x8a>
 8005d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d40:	1f0c      	subs	r4, r1, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bfb8      	it	lt
 8005d46:	18e4      	addlt	r4, r4, r3
 8005d48:	f000 f8de 	bl	8005f08 <__malloc_lock>
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc0 <_free_r+0x8c>)
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	b933      	cbnz	r3, 8005d60 <_free_r+0x2c>
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	6014      	str	r4, [r2, #0]
 8005d56:	4628      	mov	r0, r5
 8005d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d5c:	f000 b8da 	b.w	8005f14 <__malloc_unlock>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d908      	bls.n	8005d76 <_free_r+0x42>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	1821      	adds	r1, r4, r0
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf01      	itttt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	1809      	addeq	r1, r1, r0
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	e7ed      	b.n	8005d52 <_free_r+0x1e>
 8005d76:	461a      	mov	r2, r3
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b10b      	cbz	r3, 8005d80 <_free_r+0x4c>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d9fa      	bls.n	8005d76 <_free_r+0x42>
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	1850      	adds	r0, r2, r1
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	d10b      	bne.n	8005da0 <_free_r+0x6c>
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	1850      	adds	r0, r2, r1
 8005d8e:	4283      	cmp	r3, r0
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	d1e0      	bne.n	8005d56 <_free_r+0x22>
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4408      	add	r0, r1
 8005d9a:	6010      	str	r0, [r2, #0]
 8005d9c:	6053      	str	r3, [r2, #4]
 8005d9e:	e7da      	b.n	8005d56 <_free_r+0x22>
 8005da0:	d902      	bls.n	8005da8 <_free_r+0x74>
 8005da2:	230c      	movs	r3, #12
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	e7d6      	b.n	8005d56 <_free_r+0x22>
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	1821      	adds	r1, r4, r0
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf01      	itttt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	1809      	addeq	r1, r1, r0
 8005db6:	6021      	streq	r1, [r4, #0]
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	6054      	str	r4, [r2, #4]
 8005dbc:	e7cb      	b.n	8005d56 <_free_r+0x22>
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20000374 	.word	0x20000374

08005dc4 <sbrk_aligned>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8005e04 <sbrk_aligned+0x40>)
 8005dc8:	460c      	mov	r4, r1
 8005dca:	6831      	ldr	r1, [r6, #0]
 8005dcc:	4605      	mov	r5, r0
 8005dce:	b911      	cbnz	r1, 8005dd6 <sbrk_aligned+0x12>
 8005dd0:	f000 f9d2 	bl	8006178 <_sbrk_r>
 8005dd4:	6030      	str	r0, [r6, #0]
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 f9cd 	bl	8006178 <_sbrk_r>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	d103      	bne.n	8005dea <sbrk_aligned+0x26>
 8005de2:	f04f 34ff 	mov.w	r4, #4294967295
 8005de6:	4620      	mov	r0, r4
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
 8005dea:	1cc4      	adds	r4, r0, #3
 8005dec:	f024 0403 	bic.w	r4, r4, #3
 8005df0:	42a0      	cmp	r0, r4
 8005df2:	d0f8      	beq.n	8005de6 <sbrk_aligned+0x22>
 8005df4:	1a21      	subs	r1, r4, r0
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 f9be 	bl	8006178 <_sbrk_r>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d1f2      	bne.n	8005de6 <sbrk_aligned+0x22>
 8005e00:	e7ef      	b.n	8005de2 <sbrk_aligned+0x1e>
 8005e02:	bf00      	nop
 8005e04:	20000370 	.word	0x20000370

08005e08 <_malloc_r>:
 8005e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e0c:	1ccd      	adds	r5, r1, #3
 8005e0e:	f025 0503 	bic.w	r5, r5, #3
 8005e12:	3508      	adds	r5, #8
 8005e14:	2d0c      	cmp	r5, #12
 8005e16:	bf38      	it	cc
 8005e18:	250c      	movcc	r5, #12
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	db01      	blt.n	8005e24 <_malloc_r+0x1c>
 8005e20:	42a9      	cmp	r1, r5
 8005e22:	d904      	bls.n	8005e2e <_malloc_r+0x26>
 8005e24:	230c      	movs	r3, #12
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f04 <_malloc_r+0xfc>
 8005e32:	f000 f869 	bl	8005f08 <__malloc_lock>
 8005e36:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3a:	461c      	mov	r4, r3
 8005e3c:	bb44      	cbnz	r4, 8005e90 <_malloc_r+0x88>
 8005e3e:	4629      	mov	r1, r5
 8005e40:	4630      	mov	r0, r6
 8005e42:	f7ff ffbf 	bl	8005dc4 <sbrk_aligned>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	4604      	mov	r4, r0
 8005e4a:	d158      	bne.n	8005efe <_malloc_r+0xf6>
 8005e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e50:	4627      	mov	r7, r4
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	d143      	bne.n	8005ede <_malloc_r+0xd6>
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	d04b      	beq.n	8005ef2 <_malloc_r+0xea>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	4630      	mov	r0, r6
 8005e60:	eb04 0903 	add.w	r9, r4, r3
 8005e64:	f000 f988 	bl	8006178 <_sbrk_r>
 8005e68:	4581      	cmp	r9, r0
 8005e6a:	d142      	bne.n	8005ef2 <_malloc_r+0xea>
 8005e6c:	6821      	ldr	r1, [r4, #0]
 8005e6e:	4630      	mov	r0, r6
 8005e70:	1a6d      	subs	r5, r5, r1
 8005e72:	4629      	mov	r1, r5
 8005e74:	f7ff ffa6 	bl	8005dc4 <sbrk_aligned>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d03a      	beq.n	8005ef2 <_malloc_r+0xea>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	442b      	add	r3, r5
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	f8d8 3000 	ldr.w	r3, [r8]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	bb62      	cbnz	r2, 8005ee4 <_malloc_r+0xdc>
 8005e8a:	f8c8 7000 	str.w	r7, [r8]
 8005e8e:	e00f      	b.n	8005eb0 <_malloc_r+0xa8>
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	1b52      	subs	r2, r2, r5
 8005e94:	d420      	bmi.n	8005ed8 <_malloc_r+0xd0>
 8005e96:	2a0b      	cmp	r2, #11
 8005e98:	d917      	bls.n	8005eca <_malloc_r+0xc2>
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	42a3      	cmp	r3, r4
 8005e9e:	6025      	str	r5, [r4, #0]
 8005ea0:	bf18      	it	ne
 8005ea2:	6059      	strne	r1, [r3, #4]
 8005ea4:	6863      	ldr	r3, [r4, #4]
 8005ea6:	bf08      	it	eq
 8005ea8:	f8c8 1000 	streq.w	r1, [r8]
 8005eac:	5162      	str	r2, [r4, r5]
 8005eae:	604b      	str	r3, [r1, #4]
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 f82f 	bl	8005f14 <__malloc_unlock>
 8005eb6:	f104 000b 	add.w	r0, r4, #11
 8005eba:	1d23      	adds	r3, r4, #4
 8005ebc:	f020 0007 	bic.w	r0, r0, #7
 8005ec0:	1ac2      	subs	r2, r0, r3
 8005ec2:	bf1c      	itt	ne
 8005ec4:	1a1b      	subne	r3, r3, r0
 8005ec6:	50a3      	strne	r3, [r4, r2]
 8005ec8:	e7af      	b.n	8005e2a <_malloc_r+0x22>
 8005eca:	6862      	ldr	r2, [r4, #4]
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	bf0c      	ite	eq
 8005ed0:	f8c8 2000 	streq.w	r2, [r8]
 8005ed4:	605a      	strne	r2, [r3, #4]
 8005ed6:	e7eb      	b.n	8005eb0 <_malloc_r+0xa8>
 8005ed8:	4623      	mov	r3, r4
 8005eda:	6864      	ldr	r4, [r4, #4]
 8005edc:	e7ae      	b.n	8005e3c <_malloc_r+0x34>
 8005ede:	463c      	mov	r4, r7
 8005ee0:	687f      	ldr	r7, [r7, #4]
 8005ee2:	e7b6      	b.n	8005e52 <_malloc_r+0x4a>
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	d1fb      	bne.n	8005ee4 <_malloc_r+0xdc>
 8005eec:	2300      	movs	r3, #0
 8005eee:	6053      	str	r3, [r2, #4]
 8005ef0:	e7de      	b.n	8005eb0 <_malloc_r+0xa8>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	6033      	str	r3, [r6, #0]
 8005ef8:	f000 f80c 	bl	8005f14 <__malloc_unlock>
 8005efc:	e794      	b.n	8005e28 <_malloc_r+0x20>
 8005efe:	6005      	str	r5, [r0, #0]
 8005f00:	e7d6      	b.n	8005eb0 <_malloc_r+0xa8>
 8005f02:	bf00      	nop
 8005f04:	20000374 	.word	0x20000374

08005f08 <__malloc_lock>:
 8005f08:	4801      	ldr	r0, [pc, #4]	@ (8005f10 <__malloc_lock+0x8>)
 8005f0a:	f7ff bf10 	b.w	8005d2e <__retarget_lock_acquire_recursive>
 8005f0e:	bf00      	nop
 8005f10:	2000036c 	.word	0x2000036c

08005f14 <__malloc_unlock>:
 8005f14:	4801      	ldr	r0, [pc, #4]	@ (8005f1c <__malloc_unlock+0x8>)
 8005f16:	f7ff bf0b 	b.w	8005d30 <__retarget_lock_release_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	2000036c 	.word	0x2000036c

08005f20 <__sflush_r>:
 8005f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	0716      	lsls	r6, r2, #28
 8005f28:	4605      	mov	r5, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	d454      	bmi.n	8005fd8 <__sflush_r+0xb8>
 8005f2e:	684b      	ldr	r3, [r1, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	dc02      	bgt.n	8005f3a <__sflush_r+0x1a>
 8005f34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dd48      	ble.n	8005fcc <__sflush_r+0xac>
 8005f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f3c:	2e00      	cmp	r6, #0
 8005f3e:	d045      	beq.n	8005fcc <__sflush_r+0xac>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f46:	682f      	ldr	r7, [r5, #0]
 8005f48:	6a21      	ldr	r1, [r4, #32]
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	d030      	beq.n	8005fb0 <__sflush_r+0x90>
 8005f4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	0759      	lsls	r1, r3, #29
 8005f54:	d505      	bpl.n	8005f62 <__sflush_r+0x42>
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	1ad2      	subs	r2, r2, r3
 8005f5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f5c:	b10b      	cbz	r3, 8005f62 <__sflush_r+0x42>
 8005f5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f60:	1ad2      	subs	r2, r2, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	4628      	mov	r0, r5
 8005f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f68:	6a21      	ldr	r1, [r4, #32]
 8005f6a:	47b0      	blx	r6
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	d106      	bne.n	8005f80 <__sflush_r+0x60>
 8005f72:	6829      	ldr	r1, [r5, #0]
 8005f74:	291d      	cmp	r1, #29
 8005f76:	d82b      	bhi.n	8005fd0 <__sflush_r+0xb0>
 8005f78:	4a28      	ldr	r2, [pc, #160]	@ (800601c <__sflush_r+0xfc>)
 8005f7a:	40ca      	lsrs	r2, r1
 8005f7c:	07d6      	lsls	r6, r2, #31
 8005f7e:	d527      	bpl.n	8005fd0 <__sflush_r+0xb0>
 8005f80:	2200      	movs	r2, #0
 8005f82:	6062      	str	r2, [r4, #4]
 8005f84:	6922      	ldr	r2, [r4, #16]
 8005f86:	04d9      	lsls	r1, r3, #19
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	d504      	bpl.n	8005f96 <__sflush_r+0x76>
 8005f8c:	1c42      	adds	r2, r0, #1
 8005f8e:	d101      	bne.n	8005f94 <__sflush_r+0x74>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b903      	cbnz	r3, 8005f96 <__sflush_r+0x76>
 8005f94:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f98:	602f      	str	r7, [r5, #0]
 8005f9a:	b1b9      	cbz	r1, 8005fcc <__sflush_r+0xac>
 8005f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	d002      	beq.n	8005faa <__sflush_r+0x8a>
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7ff fec5 	bl	8005d34 <_free_r>
 8005faa:	2300      	movs	r3, #0
 8005fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fae:	e00d      	b.n	8005fcc <__sflush_r+0xac>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b0      	blx	r6
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	1c50      	adds	r0, r2, #1
 8005fba:	d1c9      	bne.n	8005f50 <__sflush_r+0x30>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0c6      	beq.n	8005f50 <__sflush_r+0x30>
 8005fc2:	2b1d      	cmp	r3, #29
 8005fc4:	d001      	beq.n	8005fca <__sflush_r+0xaa>
 8005fc6:	2b16      	cmp	r3, #22
 8005fc8:	d11d      	bne.n	8006006 <__sflush_r+0xe6>
 8005fca:	602f      	str	r7, [r5, #0]
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e021      	b.n	8006014 <__sflush_r+0xf4>
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	e01a      	b.n	800600e <__sflush_r+0xee>
 8005fd8:	690f      	ldr	r7, [r1, #16]
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	d0f6      	beq.n	8005fcc <__sflush_r+0xac>
 8005fde:	0793      	lsls	r3, r2, #30
 8005fe0:	bf18      	it	ne
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	680e      	ldr	r6, [r1, #0]
 8005fe6:	bf08      	it	eq
 8005fe8:	694b      	ldreq	r3, [r1, #20]
 8005fea:	1bf6      	subs	r6, r6, r7
 8005fec:	600f      	str	r7, [r1, #0]
 8005fee:	608b      	str	r3, [r1, #8]
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	ddeb      	ble.n	8005fcc <__sflush_r+0xac>
 8005ff4:	4633      	mov	r3, r6
 8005ff6:	463a      	mov	r2, r7
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	6a21      	ldr	r1, [r4, #32]
 8005ffc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006000:	47e0      	blx	ip
 8006002:	2800      	cmp	r0, #0
 8006004:	dc07      	bgt.n	8006016 <__sflush_r+0xf6>
 8006006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800600a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006016:	4407      	add	r7, r0
 8006018:	1a36      	subs	r6, r6, r0
 800601a:	e7e9      	b.n	8005ff0 <__sflush_r+0xd0>
 800601c:	20400001 	.word	0x20400001

08006020 <_fflush_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	690b      	ldr	r3, [r1, #16]
 8006024:	4605      	mov	r5, r0
 8006026:	460c      	mov	r4, r1
 8006028:	b913      	cbnz	r3, 8006030 <_fflush_r+0x10>
 800602a:	2500      	movs	r5, #0
 800602c:	4628      	mov	r0, r5
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	b118      	cbz	r0, 800603a <_fflush_r+0x1a>
 8006032:	6a03      	ldr	r3, [r0, #32]
 8006034:	b90b      	cbnz	r3, 800603a <_fflush_r+0x1a>
 8006036:	f7ff fc95 	bl	8005964 <__sinit>
 800603a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f3      	beq.n	800602a <_fflush_r+0xa>
 8006042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006044:	07d0      	lsls	r0, r2, #31
 8006046:	d404      	bmi.n	8006052 <_fflush_r+0x32>
 8006048:	0599      	lsls	r1, r3, #22
 800604a:	d402      	bmi.n	8006052 <_fflush_r+0x32>
 800604c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800604e:	f7ff fe6e 	bl	8005d2e <__retarget_lock_acquire_recursive>
 8006052:	4628      	mov	r0, r5
 8006054:	4621      	mov	r1, r4
 8006056:	f7ff ff63 	bl	8005f20 <__sflush_r>
 800605a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800605c:	4605      	mov	r5, r0
 800605e:	07da      	lsls	r2, r3, #31
 8006060:	d4e4      	bmi.n	800602c <_fflush_r+0xc>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	059b      	lsls	r3, r3, #22
 8006066:	d4e1      	bmi.n	800602c <_fflush_r+0xc>
 8006068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800606a:	f7ff fe61 	bl	8005d30 <__retarget_lock_release_recursive>
 800606e:	e7dd      	b.n	800602c <_fflush_r+0xc>

08006070 <__swhatbuf_r>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	460c      	mov	r4, r1
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	4615      	mov	r5, r2
 800607a:	2900      	cmp	r1, #0
 800607c:	461e      	mov	r6, r3
 800607e:	b096      	sub	sp, #88	@ 0x58
 8006080:	da0c      	bge.n	800609c <__swhatbuf_r+0x2c>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	2100      	movs	r1, #0
 8006086:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800608a:	bf14      	ite	ne
 800608c:	2340      	movne	r3, #64	@ 0x40
 800608e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006092:	2000      	movs	r0, #0
 8006094:	6031      	str	r1, [r6, #0]
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	b016      	add	sp, #88	@ 0x58
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	466a      	mov	r2, sp
 800609e:	f000 f849 	bl	8006134 <_fstat_r>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	dbed      	blt.n	8006082 <__swhatbuf_r+0x12>
 80060a6:	9901      	ldr	r1, [sp, #4]
 80060a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80060ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80060b0:	4259      	negs	r1, r3
 80060b2:	4159      	adcs	r1, r3
 80060b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060b8:	e7eb      	b.n	8006092 <__swhatbuf_r+0x22>

080060ba <__smakebuf_r>:
 80060ba:	898b      	ldrh	r3, [r1, #12]
 80060bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060be:	079d      	lsls	r5, r3, #30
 80060c0:	4606      	mov	r6, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	d507      	bpl.n	80060d6 <__smakebuf_r+0x1c>
 80060c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060ca:	6023      	str	r3, [r4, #0]
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	2301      	movs	r3, #1
 80060d0:	6163      	str	r3, [r4, #20]
 80060d2:	b003      	add	sp, #12
 80060d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d6:	466a      	mov	r2, sp
 80060d8:	ab01      	add	r3, sp, #4
 80060da:	f7ff ffc9 	bl	8006070 <__swhatbuf_r>
 80060de:	9f00      	ldr	r7, [sp, #0]
 80060e0:	4605      	mov	r5, r0
 80060e2:	4639      	mov	r1, r7
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff fe8f 	bl	8005e08 <_malloc_r>
 80060ea:	b948      	cbnz	r0, 8006100 <__smakebuf_r+0x46>
 80060ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f0:	059a      	lsls	r2, r3, #22
 80060f2:	d4ee      	bmi.n	80060d2 <__smakebuf_r+0x18>
 80060f4:	f023 0303 	bic.w	r3, r3, #3
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	81a3      	strh	r3, [r4, #12]
 80060fe:	e7e2      	b.n	80060c6 <__smakebuf_r+0xc>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	9b01      	ldr	r3, [sp, #4]
 800610e:	6020      	str	r0, [r4, #0]
 8006110:	b15b      	cbz	r3, 800612a <__smakebuf_r+0x70>
 8006112:	4630      	mov	r0, r6
 8006114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006118:	f000 f81e 	bl	8006158 <_isatty_r>
 800611c:	b128      	cbz	r0, 800612a <__smakebuf_r+0x70>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	431d      	orrs	r5, r3
 800612e:	81a5      	strh	r5, [r4, #12]
 8006130:	e7cf      	b.n	80060d2 <__smakebuf_r+0x18>
	...

08006134 <_fstat_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	2300      	movs	r3, #0
 8006138:	4d06      	ldr	r5, [pc, #24]	@ (8006154 <_fstat_r+0x20>)
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	f7fc f867 	bl	8002214 <_fstat>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d102      	bne.n	8006150 <_fstat_r+0x1c>
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	b103      	cbz	r3, 8006150 <_fstat_r+0x1c>
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	20000368 	.word	0x20000368

08006158 <_isatty_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	2300      	movs	r3, #0
 800615c:	4d05      	ldr	r5, [pc, #20]	@ (8006174 <_isatty_r+0x1c>)
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fc f865 	bl	8002232 <_isatty>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_isatty_r+0x1a>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_isatty_r+0x1a>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000368 	.word	0x20000368

08006178 <_sbrk_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	2300      	movs	r3, #0
 800617c:	4d05      	ldr	r5, [pc, #20]	@ (8006194 <_sbrk_r+0x1c>)
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	f7fc f86c 	bl	8002260 <_sbrk>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_sbrk_r+0x1a>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_sbrk_r+0x1a>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20000368 	.word	0x20000368

08006198 <asin>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	4604      	mov	r4, r0
 800619c:	460d      	mov	r5, r1
 800619e:	f000 f9bf 	bl	8006520 <__ieee754_asin>
 80061a2:	4622      	mov	r2, r4
 80061a4:	4606      	mov	r6, r0
 80061a6:	460f      	mov	r7, r1
 80061a8:	462b      	mov	r3, r5
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7fa fc25 	bl	80009fc <__aeabi_dcmpun>
 80061b2:	b988      	cbnz	r0, 80061d8 <asin+0x40>
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f000 f9a6 	bl	8006508 <fabs>
 80061bc:	2200      	movs	r2, #0
 80061be:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <asin+0x48>)
 80061c0:	f7fa fc12 	bl	80009e8 <__aeabi_dcmpgt>
 80061c4:	b140      	cbz	r0, 80061d8 <asin+0x40>
 80061c6:	f7ff fd87 	bl	8005cd8 <__errno>
 80061ca:	2321      	movs	r3, #33	@ 0x21
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	4805      	ldr	r0, [pc, #20]	@ (80061e4 <asin+0x4c>)
 80061d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061d4:	f000 b99c 	b.w	8006510 <nan>
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061de:	bf00      	nop
 80061e0:	3ff00000 	.word	0x3ff00000
 80061e4:	08006b56 	.word	0x08006b56

080061e8 <atan>:
 80061e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	4bbc      	ldr	r3, [pc, #752]	@ (80064e0 <atan+0x2f8>)
 80061ee:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80061f2:	429e      	cmp	r6, r3
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	468b      	mov	fp, r1
 80061fa:	d918      	bls.n	800622e <atan+0x46>
 80061fc:	4bb9      	ldr	r3, [pc, #740]	@ (80064e4 <atan+0x2fc>)
 80061fe:	429e      	cmp	r6, r3
 8006200:	d801      	bhi.n	8006206 <atan+0x1e>
 8006202:	d109      	bne.n	8006218 <atan+0x30>
 8006204:	b140      	cbz	r0, 8006218 <atan+0x30>
 8006206:	4622      	mov	r2, r4
 8006208:	462b      	mov	r3, r5
 800620a:	4620      	mov	r0, r4
 800620c:	4629      	mov	r1, r5
 800620e:	f7f9 ffa5 	bl	800015c <__adddf3>
 8006212:	4604      	mov	r4, r0
 8006214:	460d      	mov	r5, r1
 8006216:	e006      	b.n	8006226 <atan+0x3e>
 8006218:	f1bb 0f00 	cmp.w	fp, #0
 800621c:	f340 8123 	ble.w	8006466 <atan+0x27e>
 8006220:	a593      	add	r5, pc, #588	@ (adr r5, 8006470 <atan+0x288>)
 8006222:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622e:	4bae      	ldr	r3, [pc, #696]	@ (80064e8 <atan+0x300>)
 8006230:	429e      	cmp	r6, r3
 8006232:	d811      	bhi.n	8006258 <atan+0x70>
 8006234:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006238:	429e      	cmp	r6, r3
 800623a:	d80a      	bhi.n	8006252 <atan+0x6a>
 800623c:	a38e      	add	r3, pc, #568	@ (adr r3, 8006478 <atan+0x290>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7f9 ff8b 	bl	800015c <__adddf3>
 8006246:	2200      	movs	r2, #0
 8006248:	4ba8      	ldr	r3, [pc, #672]	@ (80064ec <atan+0x304>)
 800624a:	f7fa fbcd 	bl	80009e8 <__aeabi_dcmpgt>
 800624e:	2800      	cmp	r0, #0
 8006250:	d1e9      	bne.n	8006226 <atan+0x3e>
 8006252:	f04f 3aff 	mov.w	sl, #4294967295
 8006256:	e027      	b.n	80062a8 <atan+0xc0>
 8006258:	f000 f956 	bl	8006508 <fabs>
 800625c:	4ba4      	ldr	r3, [pc, #656]	@ (80064f0 <atan+0x308>)
 800625e:	4604      	mov	r4, r0
 8006260:	429e      	cmp	r6, r3
 8006262:	460d      	mov	r5, r1
 8006264:	f200 80b8 	bhi.w	80063d8 <atan+0x1f0>
 8006268:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800626c:	429e      	cmp	r6, r3
 800626e:	f200 809c 	bhi.w	80063aa <atan+0x1c2>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	f7f9 ff71 	bl	800015c <__adddf3>
 800627a:	2200      	movs	r2, #0
 800627c:	4b9b      	ldr	r3, [pc, #620]	@ (80064ec <atan+0x304>)
 800627e:	f7f9 ff6b 	bl	8000158 <__aeabi_dsub>
 8006282:	2200      	movs	r2, #0
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7f9 ff64 	bl	800015c <__adddf3>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa fa3e 	bl	800071c <__aeabi_ddiv>
 80062a0:	f04f 0a00 	mov.w	sl, #0
 80062a4:	4604      	mov	r4, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	4620      	mov	r0, r4
 80062ae:	4629      	mov	r1, r5
 80062b0:	f7fa f90a 	bl	80004c8 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4680      	mov	r8, r0
 80062ba:	4689      	mov	r9, r1
 80062bc:	f7fa f904 	bl	80004c8 <__aeabi_dmul>
 80062c0:	a36f      	add	r3, pc, #444	@ (adr r3, 8006480 <atan+0x298>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	4606      	mov	r6, r0
 80062c8:	460f      	mov	r7, r1
 80062ca:	f7fa f8fd 	bl	80004c8 <__aeabi_dmul>
 80062ce:	a36e      	add	r3, pc, #440	@ (adr r3, 8006488 <atan+0x2a0>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7f9 ff42 	bl	800015c <__adddf3>
 80062d8:	4632      	mov	r2, r6
 80062da:	463b      	mov	r3, r7
 80062dc:	f7fa f8f4 	bl	80004c8 <__aeabi_dmul>
 80062e0:	a36b      	add	r3, pc, #428	@ (adr r3, 8006490 <atan+0x2a8>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f7f9 ff39 	bl	800015c <__adddf3>
 80062ea:	4632      	mov	r2, r6
 80062ec:	463b      	mov	r3, r7
 80062ee:	f7fa f8eb 	bl	80004c8 <__aeabi_dmul>
 80062f2:	a369      	add	r3, pc, #420	@ (adr r3, 8006498 <atan+0x2b0>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7f9 ff30 	bl	800015c <__adddf3>
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	f7fa f8e2 	bl	80004c8 <__aeabi_dmul>
 8006304:	a366      	add	r3, pc, #408	@ (adr r3, 80064a0 <atan+0x2b8>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7f9 ff27 	bl	800015c <__adddf3>
 800630e:	4632      	mov	r2, r6
 8006310:	463b      	mov	r3, r7
 8006312:	f7fa f8d9 	bl	80004c8 <__aeabi_dmul>
 8006316:	a364      	add	r3, pc, #400	@ (adr r3, 80064a8 <atan+0x2c0>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f7f9 ff1e 	bl	800015c <__adddf3>
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	f7fa f8d0 	bl	80004c8 <__aeabi_dmul>
 8006328:	a361      	add	r3, pc, #388	@ (adr r3, 80064b0 <atan+0x2c8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	4680      	mov	r8, r0
 8006330:	4689      	mov	r9, r1
 8006332:	4630      	mov	r0, r6
 8006334:	4639      	mov	r1, r7
 8006336:	f7fa f8c7 	bl	80004c8 <__aeabi_dmul>
 800633a:	a35f      	add	r3, pc, #380	@ (adr r3, 80064b8 <atan+0x2d0>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f7f9 ff0a 	bl	8000158 <__aeabi_dsub>
 8006344:	4632      	mov	r2, r6
 8006346:	463b      	mov	r3, r7
 8006348:	f7fa f8be 	bl	80004c8 <__aeabi_dmul>
 800634c:	a35c      	add	r3, pc, #368	@ (adr r3, 80064c0 <atan+0x2d8>)
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f7f9 ff01 	bl	8000158 <__aeabi_dsub>
 8006356:	4632      	mov	r2, r6
 8006358:	463b      	mov	r3, r7
 800635a:	f7fa f8b5 	bl	80004c8 <__aeabi_dmul>
 800635e:	a35a      	add	r3, pc, #360	@ (adr r3, 80064c8 <atan+0x2e0>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7f9 fef8 	bl	8000158 <__aeabi_dsub>
 8006368:	4632      	mov	r2, r6
 800636a:	463b      	mov	r3, r7
 800636c:	f7fa f8ac 	bl	80004c8 <__aeabi_dmul>
 8006370:	a357      	add	r3, pc, #348	@ (adr r3, 80064d0 <atan+0x2e8>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7f9 feef 	bl	8000158 <__aeabi_dsub>
 800637a:	4632      	mov	r2, r6
 800637c:	463b      	mov	r3, r7
 800637e:	f7fa f8a3 	bl	80004c8 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4640      	mov	r0, r8
 8006388:	4649      	mov	r1, r9
 800638a:	f7f9 fee7 	bl	800015c <__adddf3>
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	f7fa f899 	bl	80004c8 <__aeabi_dmul>
 8006396:	f1ba 3fff 	cmp.w	sl, #4294967295
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	d144      	bne.n	800642a <atan+0x242>
 80063a0:	4620      	mov	r0, r4
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7f9 fed8 	bl	8000158 <__aeabi_dsub>
 80063a8:	e733      	b.n	8006212 <atan+0x2a>
 80063aa:	2200      	movs	r2, #0
 80063ac:	4b4f      	ldr	r3, [pc, #316]	@ (80064ec <atan+0x304>)
 80063ae:	f7f9 fed3 	bl	8000158 <__aeabi_dsub>
 80063b2:	2200      	movs	r2, #0
 80063b4:	4606      	mov	r6, r0
 80063b6:	460f      	mov	r7, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	4b4b      	ldr	r3, [pc, #300]	@ (80064ec <atan+0x304>)
 80063be:	f7f9 fecd 	bl	800015c <__adddf3>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7fa f9a7 	bl	800071c <__aeabi_ddiv>
 80063ce:	f04f 0a01 	mov.w	sl, #1
 80063d2:	4604      	mov	r4, r0
 80063d4:	460d      	mov	r5, r1
 80063d6:	e767      	b.n	80062a8 <atan+0xc0>
 80063d8:	4b46      	ldr	r3, [pc, #280]	@ (80064f4 <atan+0x30c>)
 80063da:	429e      	cmp	r6, r3
 80063dc:	d21a      	bcs.n	8006414 <atan+0x22c>
 80063de:	2200      	movs	r2, #0
 80063e0:	4b45      	ldr	r3, [pc, #276]	@ (80064f8 <atan+0x310>)
 80063e2:	f7f9 feb9 	bl	8000158 <__aeabi_dsub>
 80063e6:	2200      	movs	r2, #0
 80063e8:	4606      	mov	r6, r0
 80063ea:	460f      	mov	r7, r1
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <atan+0x310>)
 80063f2:	f7fa f869 	bl	80004c8 <__aeabi_dmul>
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b3c      	ldr	r3, [pc, #240]	@ (80064ec <atan+0x304>)
 80063fa:	f7f9 feaf 	bl	800015c <__adddf3>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4630      	mov	r0, r6
 8006404:	4639      	mov	r1, r7
 8006406:	f7fa f989 	bl	800071c <__aeabi_ddiv>
 800640a:	f04f 0a02 	mov.w	sl, #2
 800640e:	4604      	mov	r4, r0
 8006410:	460d      	mov	r5, r1
 8006412:	e749      	b.n	80062a8 <atan+0xc0>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	2000      	movs	r0, #0
 800641a:	4938      	ldr	r1, [pc, #224]	@ (80064fc <atan+0x314>)
 800641c:	f7fa f97e 	bl	800071c <__aeabi_ddiv>
 8006420:	f04f 0a03 	mov.w	sl, #3
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	e73e      	b.n	80062a8 <atan+0xc0>
 800642a:	4b35      	ldr	r3, [pc, #212]	@ (8006500 <atan+0x318>)
 800642c:	4e35      	ldr	r6, [pc, #212]	@ (8006504 <atan+0x31c>)
 800642e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7f9 fe8f 	bl	8000158 <__aeabi_dsub>
 800643a:	4622      	mov	r2, r4
 800643c:	462b      	mov	r3, r5
 800643e:	f7f9 fe8b 	bl	8000158 <__aeabi_dsub>
 8006442:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800644e:	f7f9 fe83 	bl	8000158 <__aeabi_dsub>
 8006452:	f1bb 0f00 	cmp.w	fp, #0
 8006456:	4604      	mov	r4, r0
 8006458:	460d      	mov	r5, r1
 800645a:	f6bf aee4 	bge.w	8006226 <atan+0x3e>
 800645e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006462:	461d      	mov	r5, r3
 8006464:	e6df      	b.n	8006226 <atan+0x3e>
 8006466:	a51c      	add	r5, pc, #112	@ (adr r5, 80064d8 <atan+0x2f0>)
 8006468:	e9d5 4500 	ldrd	r4, r5, [r5]
 800646c:	e6db      	b.n	8006226 <atan+0x3e>
 800646e:	bf00      	nop
 8006470:	54442d18 	.word	0x54442d18
 8006474:	3ff921fb 	.word	0x3ff921fb
 8006478:	8800759c 	.word	0x8800759c
 800647c:	7e37e43c 	.word	0x7e37e43c
 8006480:	e322da11 	.word	0xe322da11
 8006484:	3f90ad3a 	.word	0x3f90ad3a
 8006488:	24760deb 	.word	0x24760deb
 800648c:	3fa97b4b 	.word	0x3fa97b4b
 8006490:	a0d03d51 	.word	0xa0d03d51
 8006494:	3fb10d66 	.word	0x3fb10d66
 8006498:	c54c206e 	.word	0xc54c206e
 800649c:	3fb745cd 	.word	0x3fb745cd
 80064a0:	920083ff 	.word	0x920083ff
 80064a4:	3fc24924 	.word	0x3fc24924
 80064a8:	5555550d 	.word	0x5555550d
 80064ac:	3fd55555 	.word	0x3fd55555
 80064b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80064b4:	bfa2b444 	.word	0xbfa2b444
 80064b8:	52defd9a 	.word	0x52defd9a
 80064bc:	3fadde2d 	.word	0x3fadde2d
 80064c0:	af749a6d 	.word	0xaf749a6d
 80064c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80064c8:	fe231671 	.word	0xfe231671
 80064cc:	3fbc71c6 	.word	0x3fbc71c6
 80064d0:	9998ebc4 	.word	0x9998ebc4
 80064d4:	3fc99999 	.word	0x3fc99999
 80064d8:	54442d18 	.word	0x54442d18
 80064dc:	bff921fb 	.word	0xbff921fb
 80064e0:	440fffff 	.word	0x440fffff
 80064e4:	7ff00000 	.word	0x7ff00000
 80064e8:	3fdbffff 	.word	0x3fdbffff
 80064ec:	3ff00000 	.word	0x3ff00000
 80064f0:	3ff2ffff 	.word	0x3ff2ffff
 80064f4:	40038000 	.word	0x40038000
 80064f8:	3ff80000 	.word	0x3ff80000
 80064fc:	bff00000 	.word	0xbff00000
 8006500:	08006b58 	.word	0x08006b58
 8006504:	08006b78 	.word	0x08006b78

08006508 <fabs>:
 8006508:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800650c:	4619      	mov	r1, r3
 800650e:	4770      	bx	lr

08006510 <nan>:
 8006510:	2000      	movs	r0, #0
 8006512:	4901      	ldr	r1, [pc, #4]	@ (8006518 <nan+0x8>)
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	7ff80000 	.word	0x7ff80000
 800651c:	00000000 	.word	0x00000000

08006520 <__ieee754_asin>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	4bc4      	ldr	r3, [pc, #784]	@ (8006838 <__ieee754_asin+0x318>)
 8006526:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800652a:	b087      	sub	sp, #28
 800652c:	429e      	cmp	r6, r3
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	9101      	str	r1, [sp, #4]
 8006534:	d929      	bls.n	800658a <__ieee754_asin+0x6a>
 8006536:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800653a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800653e:	4306      	orrs	r6, r0
 8006540:	d114      	bne.n	800656c <__ieee754_asin+0x4c>
 8006542:	a3a3      	add	r3, pc, #652	@ (adr r3, 80067d0 <__ieee754_asin+0x2b0>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7f9 ffbe 	bl	80004c8 <__aeabi_dmul>
 800654c:	a3a2      	add	r3, pc, #648	@ (adr r3, 80067d8 <__ieee754_asin+0x2b8>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7f9 ffb5 	bl	80004c8 <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7f9 fdf9 	bl	800015c <__adddf3>
 800656a:	e007      	b.n	800657c <__ieee754_asin+0x5c>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	f7f9 fdf2 	bl	8000158 <__aeabi_dsub>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	f7fa f8d0 	bl	800071c <__aeabi_ddiv>
 800657c:	4604      	mov	r4, r0
 800657e:	460d      	mov	r5, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	b007      	add	sp, #28
 8006586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658a:	4bac      	ldr	r3, [pc, #688]	@ (800683c <__ieee754_asin+0x31c>)
 800658c:	429e      	cmp	r6, r3
 800658e:	d80e      	bhi.n	80065ae <__ieee754_asin+0x8e>
 8006590:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8006594:	f080 80ab 	bcs.w	80066ee <__ieee754_asin+0x1ce>
 8006598:	a391      	add	r3, pc, #580	@ (adr r3, 80067e0 <__ieee754_asin+0x2c0>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7f9 fddd 	bl	800015c <__adddf3>
 80065a2:	2200      	movs	r2, #0
 80065a4:	4ba6      	ldr	r3, [pc, #664]	@ (8006840 <__ieee754_asin+0x320>)
 80065a6:	f7fa fa1f 	bl	80009e8 <__aeabi_dcmpgt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d1e8      	bne.n	8006580 <__ieee754_asin+0x60>
 80065ae:	4620      	mov	r0, r4
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7ff ffa9 	bl	8006508 <fabs>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	2000      	movs	r0, #0
 80065bc:	49a0      	ldr	r1, [pc, #640]	@ (8006840 <__ieee754_asin+0x320>)
 80065be:	f7f9 fdcb 	bl	8000158 <__aeabi_dsub>
 80065c2:	2200      	movs	r2, #0
 80065c4:	4b9f      	ldr	r3, [pc, #636]	@ (8006844 <__ieee754_asin+0x324>)
 80065c6:	f7f9 ff7f 	bl	80004c8 <__aeabi_dmul>
 80065ca:	a387      	add	r3, pc, #540	@ (adr r3, 80067e8 <__ieee754_asin+0x2c8>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	4604      	mov	r4, r0
 80065d2:	460d      	mov	r5, r1
 80065d4:	f7f9 ff78 	bl	80004c8 <__aeabi_dmul>
 80065d8:	a385      	add	r3, pc, #532	@ (adr r3, 80067f0 <__ieee754_asin+0x2d0>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7f9 fdbd 	bl	800015c <__adddf3>
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f7f9 ff6f 	bl	80004c8 <__aeabi_dmul>
 80065ea:	a383      	add	r3, pc, #524	@ (adr r3, 80067f8 <__ieee754_asin+0x2d8>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 fdb2 	bl	8000158 <__aeabi_dsub>
 80065f4:	4622      	mov	r2, r4
 80065f6:	462b      	mov	r3, r5
 80065f8:	f7f9 ff66 	bl	80004c8 <__aeabi_dmul>
 80065fc:	a380      	add	r3, pc, #512	@ (adr r3, 8006800 <__ieee754_asin+0x2e0>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f7f9 fdab 	bl	800015c <__adddf3>
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	f7f9 ff5d 	bl	80004c8 <__aeabi_dmul>
 800660e:	a37e      	add	r3, pc, #504	@ (adr r3, 8006808 <__ieee754_asin+0x2e8>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7f9 fda0 	bl	8000158 <__aeabi_dsub>
 8006618:	4622      	mov	r2, r4
 800661a:	462b      	mov	r3, r5
 800661c:	f7f9 ff54 	bl	80004c8 <__aeabi_dmul>
 8006620:	a37b      	add	r3, pc, #492	@ (adr r3, 8006810 <__ieee754_asin+0x2f0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 fd99 	bl	800015c <__adddf3>
 800662a:	4622      	mov	r2, r4
 800662c:	462b      	mov	r3, r5
 800662e:	f7f9 ff4b 	bl	80004c8 <__aeabi_dmul>
 8006632:	a379      	add	r3, pc, #484	@ (adr r3, 8006818 <__ieee754_asin+0x2f8>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7f9 ff42 	bl	80004c8 <__aeabi_dmul>
 8006644:	a376      	add	r3, pc, #472	@ (adr r3, 8006820 <__ieee754_asin+0x300>)
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f7f9 fd85 	bl	8000158 <__aeabi_dsub>
 800664e:	4622      	mov	r2, r4
 8006650:	462b      	mov	r3, r5
 8006652:	f7f9 ff39 	bl	80004c8 <__aeabi_dmul>
 8006656:	a374      	add	r3, pc, #464	@ (adr r3, 8006828 <__ieee754_asin+0x308>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	f7f9 fd7e 	bl	800015c <__adddf3>
 8006660:	4622      	mov	r2, r4
 8006662:	462b      	mov	r3, r5
 8006664:	f7f9 ff30 	bl	80004c8 <__aeabi_dmul>
 8006668:	a371      	add	r3, pc, #452	@ (adr r3, 8006830 <__ieee754_asin+0x310>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f7f9 fd73 	bl	8000158 <__aeabi_dsub>
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	f7f9 ff27 	bl	80004c8 <__aeabi_dmul>
 800667a:	4b71      	ldr	r3, [pc, #452]	@ (8006840 <__ieee754_asin+0x320>)
 800667c:	2200      	movs	r2, #0
 800667e:	f7f9 fd6d 	bl	800015c <__adddf3>
 8006682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f000 f945 	bl	8006918 <__ieee754_sqrt>
 800668e:	4b6e      	ldr	r3, [pc, #440]	@ (8006848 <__ieee754_asin+0x328>)
 8006690:	4682      	mov	sl, r0
 8006692:	429e      	cmp	r6, r3
 8006694:	468b      	mov	fp, r1
 8006696:	f240 80d9 	bls.w	800684c <__ieee754_asin+0x32c>
 800669a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a2:	f7fa f83b 	bl	800071c <__aeabi_ddiv>
 80066a6:	4652      	mov	r2, sl
 80066a8:	465b      	mov	r3, fp
 80066aa:	f7f9 ff0d 	bl	80004c8 <__aeabi_dmul>
 80066ae:	4652      	mov	r2, sl
 80066b0:	465b      	mov	r3, fp
 80066b2:	f7f9 fd53 	bl	800015c <__adddf3>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	f7f9 fd4f 	bl	800015c <__adddf3>
 80066be:	a346      	add	r3, pc, #280	@ (adr r3, 80067d8 <__ieee754_asin+0x2b8>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 fd48 	bl	8000158 <__aeabi_dsub>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	a140      	add	r1, pc, #256	@ (adr r1, 80067d0 <__ieee754_asin+0x2b0>)
 80066ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066d2:	f7f9 fd41 	bl	8000158 <__aeabi_dsub>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	4604      	mov	r4, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfdc      	itt	le
 80066de:	4602      	movle	r2, r0
 80066e0:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80066e4:	460d      	mov	r5, r1
 80066e6:	bfdc      	itt	le
 80066e8:	4614      	movle	r4, r2
 80066ea:	461d      	movle	r5, r3
 80066ec:	e748      	b.n	8006580 <__ieee754_asin+0x60>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	f7f9 fee9 	bl	80004c8 <__aeabi_dmul>
 80066f6:	a33c      	add	r3, pc, #240	@ (adr r3, 80067e8 <__ieee754_asin+0x2c8>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	4606      	mov	r6, r0
 80066fe:	460f      	mov	r7, r1
 8006700:	f7f9 fee2 	bl	80004c8 <__aeabi_dmul>
 8006704:	a33a      	add	r3, pc, #232	@ (adr r3, 80067f0 <__ieee754_asin+0x2d0>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f7f9 fd27 	bl	800015c <__adddf3>
 800670e:	4632      	mov	r2, r6
 8006710:	463b      	mov	r3, r7
 8006712:	f7f9 fed9 	bl	80004c8 <__aeabi_dmul>
 8006716:	a338      	add	r3, pc, #224	@ (adr r3, 80067f8 <__ieee754_asin+0x2d8>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fd1c 	bl	8000158 <__aeabi_dsub>
 8006720:	4632      	mov	r2, r6
 8006722:	463b      	mov	r3, r7
 8006724:	f7f9 fed0 	bl	80004c8 <__aeabi_dmul>
 8006728:	a335      	add	r3, pc, #212	@ (adr r3, 8006800 <__ieee754_asin+0x2e0>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 fd15 	bl	800015c <__adddf3>
 8006732:	4632      	mov	r2, r6
 8006734:	463b      	mov	r3, r7
 8006736:	f7f9 fec7 	bl	80004c8 <__aeabi_dmul>
 800673a:	a333      	add	r3, pc, #204	@ (adr r3, 8006808 <__ieee754_asin+0x2e8>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 fd0a 	bl	8000158 <__aeabi_dsub>
 8006744:	4632      	mov	r2, r6
 8006746:	463b      	mov	r3, r7
 8006748:	f7f9 febe 	bl	80004c8 <__aeabi_dmul>
 800674c:	a330      	add	r3, pc, #192	@ (adr r3, 8006810 <__ieee754_asin+0x2f0>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fd03 	bl	800015c <__adddf3>
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	f7f9 feb5 	bl	80004c8 <__aeabi_dmul>
 800675e:	a32e      	add	r3, pc, #184	@ (adr r3, 8006818 <__ieee754_asin+0x2f8>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	4680      	mov	r8, r0
 8006766:	4689      	mov	r9, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 feac 	bl	80004c8 <__aeabi_dmul>
 8006770:	a32b      	add	r3, pc, #172	@ (adr r3, 8006820 <__ieee754_asin+0x300>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 fcef 	bl	8000158 <__aeabi_dsub>
 800677a:	4632      	mov	r2, r6
 800677c:	463b      	mov	r3, r7
 800677e:	f7f9 fea3 	bl	80004c8 <__aeabi_dmul>
 8006782:	a329      	add	r3, pc, #164	@ (adr r3, 8006828 <__ieee754_asin+0x308>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f7f9 fce8 	bl	800015c <__adddf3>
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	f7f9 fe9a 	bl	80004c8 <__aeabi_dmul>
 8006794:	a326      	add	r3, pc, #152	@ (adr r3, 8006830 <__ieee754_asin+0x310>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f7f9 fcdd 	bl	8000158 <__aeabi_dsub>
 800679e:	4632      	mov	r2, r6
 80067a0:	463b      	mov	r3, r7
 80067a2:	f7f9 fe91 	bl	80004c8 <__aeabi_dmul>
 80067a6:	2200      	movs	r2, #0
 80067a8:	4b25      	ldr	r3, [pc, #148]	@ (8006840 <__ieee754_asin+0x320>)
 80067aa:	f7f9 fcd7 	bl	800015c <__adddf3>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4640      	mov	r0, r8
 80067b4:	4649      	mov	r1, r9
 80067b6:	f7f9 ffb1 	bl	800071c <__aeabi_ddiv>
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f7f9 fe83 	bl	80004c8 <__aeabi_dmul>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	e6cc      	b.n	8006566 <__ieee754_asin+0x46>
 80067cc:	f3af 8000 	nop.w
 80067d0:	54442d18 	.word	0x54442d18
 80067d4:	3ff921fb 	.word	0x3ff921fb
 80067d8:	33145c07 	.word	0x33145c07
 80067dc:	3c91a626 	.word	0x3c91a626
 80067e0:	8800759c 	.word	0x8800759c
 80067e4:	7e37e43c 	.word	0x7e37e43c
 80067e8:	0dfdf709 	.word	0x0dfdf709
 80067ec:	3f023de1 	.word	0x3f023de1
 80067f0:	7501b288 	.word	0x7501b288
 80067f4:	3f49efe0 	.word	0x3f49efe0
 80067f8:	b5688f3b 	.word	0xb5688f3b
 80067fc:	3fa48228 	.word	0x3fa48228
 8006800:	0e884455 	.word	0x0e884455
 8006804:	3fc9c155 	.word	0x3fc9c155
 8006808:	03eb6f7d 	.word	0x03eb6f7d
 800680c:	3fd4d612 	.word	0x3fd4d612
 8006810:	55555555 	.word	0x55555555
 8006814:	3fc55555 	.word	0x3fc55555
 8006818:	b12e9282 	.word	0xb12e9282
 800681c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006820:	1b8d0159 	.word	0x1b8d0159
 8006824:	3fe6066c 	.word	0x3fe6066c
 8006828:	9c598ac8 	.word	0x9c598ac8
 800682c:	40002ae5 	.word	0x40002ae5
 8006830:	1c8a2d4b 	.word	0x1c8a2d4b
 8006834:	40033a27 	.word	0x40033a27
 8006838:	3fefffff 	.word	0x3fefffff
 800683c:	3fdfffff 	.word	0x3fdfffff
 8006840:	3ff00000 	.word	0x3ff00000
 8006844:	3fe00000 	.word	0x3fe00000
 8006848:	3fef3332 	.word	0x3fef3332
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	f7f9 fc84 	bl	800015c <__adddf3>
 8006854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006858:	4606      	mov	r6, r0
 800685a:	460f      	mov	r7, r1
 800685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006860:	f7f9 ff5c 	bl	800071c <__aeabi_ddiv>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7f9 fe2c 	bl	80004c8 <__aeabi_dmul>
 8006870:	f04f 0800 	mov.w	r8, #0
 8006874:	4606      	mov	r6, r0
 8006876:	460f      	mov	r7, r1
 8006878:	4642      	mov	r2, r8
 800687a:	465b      	mov	r3, fp
 800687c:	4640      	mov	r0, r8
 800687e:	4659      	mov	r1, fp
 8006880:	f7f9 fe22 	bl	80004c8 <__aeabi_dmul>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7f9 fc64 	bl	8000158 <__aeabi_dsub>
 8006890:	4642      	mov	r2, r8
 8006892:	4604      	mov	r4, r0
 8006894:	460d      	mov	r5, r1
 8006896:	465b      	mov	r3, fp
 8006898:	4650      	mov	r0, sl
 800689a:	4659      	mov	r1, fp
 800689c:	f7f9 fc5e 	bl	800015c <__adddf3>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4620      	mov	r0, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7f9 ff38 	bl	800071c <__aeabi_ddiv>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	f7f9 fc54 	bl	800015c <__adddf3>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	a113      	add	r1, pc, #76	@ (adr r1, 8006908 <__ieee754_asin+0x3e8>)
 80068ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068be:	f7f9 fc4b 	bl	8000158 <__aeabi_dsub>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7f9 fc45 	bl	8000158 <__aeabi_dsub>
 80068ce:	4642      	mov	r2, r8
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	465b      	mov	r3, fp
 80068d6:	4640      	mov	r0, r8
 80068d8:	4659      	mov	r1, fp
 80068da:	f7f9 fc3f 	bl	800015c <__adddf3>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8006910 <__ieee754_asin+0x3f0>)
 80068e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068e8:	f7f9 fc36 	bl	8000158 <__aeabi_dsub>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7f9 fc30 	bl	8000158 <__aeabi_dsub>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	a104      	add	r1, pc, #16	@ (adr r1, 8006910 <__ieee754_asin+0x3f0>)
 80068fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006902:	e6e6      	b.n	80066d2 <__ieee754_asin+0x1b2>
 8006904:	f3af 8000 	nop.w
 8006908:	33145c07 	.word	0x33145c07
 800690c:	3c91a626 	.word	0x3c91a626
 8006910:	54442d18 	.word	0x54442d18
 8006914:	3fe921fb 	.word	0x3fe921fb

08006918 <__ieee754_sqrt>:
 8006918:	4a65      	ldr	r2, [pc, #404]	@ (8006ab0 <__ieee754_sqrt+0x198>)
 800691a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691e:	438a      	bics	r2, r1
 8006920:	4606      	mov	r6, r0
 8006922:	460f      	mov	r7, r1
 8006924:	460b      	mov	r3, r1
 8006926:	4604      	mov	r4, r0
 8006928:	d10e      	bne.n	8006948 <__ieee754_sqrt+0x30>
 800692a:	4602      	mov	r2, r0
 800692c:	f7f9 fdcc 	bl	80004c8 <__aeabi_dmul>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4630      	mov	r0, r6
 8006936:	4639      	mov	r1, r7
 8006938:	f7f9 fc10 	bl	800015c <__adddf3>
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	2900      	cmp	r1, #0
 800694a:	dc0c      	bgt.n	8006966 <__ieee754_sqrt+0x4e>
 800694c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006950:	4302      	orrs	r2, r0
 8006952:	d0f5      	beq.n	8006940 <__ieee754_sqrt+0x28>
 8006954:	b189      	cbz	r1, 800697a <__ieee754_sqrt+0x62>
 8006956:	4602      	mov	r2, r0
 8006958:	f7f9 fbfe 	bl	8000158 <__aeabi_dsub>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	f7f9 fedc 	bl	800071c <__aeabi_ddiv>
 8006964:	e7ea      	b.n	800693c <__ieee754_sqrt+0x24>
 8006966:	150a      	asrs	r2, r1, #20
 8006968:	d115      	bne.n	8006996 <__ieee754_sqrt+0x7e>
 800696a:	2100      	movs	r1, #0
 800696c:	e009      	b.n	8006982 <__ieee754_sqrt+0x6a>
 800696e:	0ae3      	lsrs	r3, r4, #11
 8006970:	3a15      	subs	r2, #21
 8006972:	0564      	lsls	r4, r4, #21
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0fa      	beq.n	800696e <__ieee754_sqrt+0x56>
 8006978:	e7f7      	b.n	800696a <__ieee754_sqrt+0x52>
 800697a:	460a      	mov	r2, r1
 800697c:	e7fa      	b.n	8006974 <__ieee754_sqrt+0x5c>
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	3101      	adds	r1, #1
 8006982:	02d8      	lsls	r0, r3, #11
 8006984:	d5fb      	bpl.n	800697e <__ieee754_sqrt+0x66>
 8006986:	1e48      	subs	r0, r1, #1
 8006988:	1a12      	subs	r2, r2, r0
 800698a:	f1c1 0020 	rsb	r0, r1, #32
 800698e:	fa24 f000 	lsr.w	r0, r4, r0
 8006992:	4303      	orrs	r3, r0
 8006994:	408c      	lsls	r4, r1
 8006996:	2700      	movs	r7, #0
 8006998:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800699c:	2116      	movs	r1, #22
 800699e:	07d2      	lsls	r2, r2, #31
 80069a0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80069a4:	463a      	mov	r2, r7
 80069a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ae:	bf5c      	itt	pl
 80069b0:	005b      	lslpl	r3, r3, #1
 80069b2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80069b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80069ba:	bf58      	it	pl
 80069bc:	0064      	lslpl	r4, r4, #1
 80069be:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80069c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069c6:	0064      	lsls	r4, r4, #1
 80069c8:	1815      	adds	r5, r2, r0
 80069ca:	429d      	cmp	r5, r3
 80069cc:	bfde      	ittt	le
 80069ce:	182a      	addle	r2, r5, r0
 80069d0:	1b5b      	suble	r3, r3, r5
 80069d2:	183f      	addle	r7, r7, r0
 80069d4:	0fe5      	lsrs	r5, r4, #31
 80069d6:	3901      	subs	r1, #1
 80069d8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80069dc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80069e0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80069e4:	d1f0      	bne.n	80069c8 <__ieee754_sqrt+0xb0>
 80069e6:	460d      	mov	r5, r1
 80069e8:	2620      	movs	r6, #32
 80069ea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80069ee:	4293      	cmp	r3, r2
 80069f0:	eb00 0c01 	add.w	ip, r0, r1
 80069f4:	dc02      	bgt.n	80069fc <__ieee754_sqrt+0xe4>
 80069f6:	d113      	bne.n	8006a20 <__ieee754_sqrt+0x108>
 80069f8:	45a4      	cmp	ip, r4
 80069fa:	d811      	bhi.n	8006a20 <__ieee754_sqrt+0x108>
 80069fc:	f1bc 0f00 	cmp.w	ip, #0
 8006a00:	eb0c 0100 	add.w	r1, ip, r0
 8006a04:	da3e      	bge.n	8006a84 <__ieee754_sqrt+0x16c>
 8006a06:	2900      	cmp	r1, #0
 8006a08:	db3c      	blt.n	8006a84 <__ieee754_sqrt+0x16c>
 8006a0a:	f102 0e01 	add.w	lr, r2, #1
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	4672      	mov	r2, lr
 8006a12:	45a4      	cmp	ip, r4
 8006a14:	bf88      	it	hi
 8006a16:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006a1a:	eba4 040c 	sub.w	r4, r4, ip
 8006a1e:	4405      	add	r5, r0
 8006a20:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006a24:	3e01      	subs	r6, #1
 8006a26:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006a2a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a2e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006a32:	d1dc      	bne.n	80069ee <__ieee754_sqrt+0xd6>
 8006a34:	431c      	orrs	r4, r3
 8006a36:	d01a      	beq.n	8006a6e <__ieee754_sqrt+0x156>
 8006a38:	4c1e      	ldr	r4, [pc, #120]	@ (8006ab4 <__ieee754_sqrt+0x19c>)
 8006a3a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006ab8 <__ieee754_sqrt+0x1a0>
 8006a3e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a46:	f7f9 fb87 	bl	8000158 <__aeabi_dsub>
 8006a4a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4650      	mov	r0, sl
 8006a54:	4659      	mov	r1, fp
 8006a56:	f7f9 ffb3 	bl	80009c0 <__aeabi_dcmple>
 8006a5a:	b140      	cbz	r0, 8006a6e <__ieee754_sqrt+0x156>
 8006a5c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a60:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a64:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006a68:	d10e      	bne.n	8006a88 <__ieee754_sqrt+0x170>
 8006a6a:	4635      	mov	r5, r6
 8006a6c:	3701      	adds	r7, #1
 8006a6e:	107b      	asrs	r3, r7, #1
 8006a70:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a74:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006a78:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8006a7c:	086b      	lsrs	r3, r5, #1
 8006a7e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8006a82:	e75b      	b.n	800693c <__ieee754_sqrt+0x24>
 8006a84:	4696      	mov	lr, r2
 8006a86:	e7c2      	b.n	8006a0e <__ieee754_sqrt+0xf6>
 8006a88:	f7f9 fb68 	bl	800015c <__adddf3>
 8006a8c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4650      	mov	r0, sl
 8006a96:	4659      	mov	r1, fp
 8006a98:	f7f9 ff88 	bl	80009ac <__aeabi_dcmplt>
 8006a9c:	b120      	cbz	r0, 8006aa8 <__ieee754_sqrt+0x190>
 8006a9e:	1cab      	adds	r3, r5, #2
 8006aa0:	bf08      	it	eq
 8006aa2:	3701      	addeq	r7, #1
 8006aa4:	3502      	adds	r5, #2
 8006aa6:	e7e2      	b.n	8006a6e <__ieee754_sqrt+0x156>
 8006aa8:	1c6b      	adds	r3, r5, #1
 8006aaa:	f023 0501 	bic.w	r5, r3, #1
 8006aae:	e7de      	b.n	8006a6e <__ieee754_sqrt+0x156>
 8006ab0:	7ff00000 	.word	0x7ff00000
 8006ab4:	08006ba0 	.word	0x08006ba0
 8006ab8:	08006b98 	.word	0x08006b98

08006abc <_init>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr

08006ac8 <_fini>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr
